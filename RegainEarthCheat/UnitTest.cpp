#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UAdvancedExternalUILibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedExternalUILibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedExternalUILibrary, 0x0028);
		}

		// class UAdvancedFriendsGameInstance : public UGameInstance
		TEST_METHOD(Class__AdvancedSessions__AdvancedFriendsGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, bCallFriendInterfaceEventsOnPlayerControllers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, bCallIdentityInterfaceEventsOnPlayerControllers, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, bCallVoiceInterfaceEventsOnPlayerControllers, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, bEnableTalkingStatusDelegate, 0x01AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, UnknownData_4J1V, 0x01AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedFriendsGameInstance, 0x0228);
		}

		// class UAdvancedFriendsInterface : public UInterface
		TEST_METHOD(Class__AdvancedSessions__AdvancedFriendsInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedFriendsInterface, 0x0028);
		}

		// class UAdvancedFriendsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedFriendsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedFriendsLibrary, 0x0028);
		}

		// class AAdvancedGameSession : public AGameSession
		TEST_METHOD(Class__AdvancedSessions__AdvancedGameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAdvancedGameSession, BanList, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAdvancedGameSession, 0x0288);
		}

		// class UAdvancedIdentityLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedIdentityLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedIdentityLibrary, 0x0028);
		}

		// class UAdvancedSessionsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedSessionsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSessionsLibrary, 0x0028);
		}

		// class UAdvancedVoiceLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedVoiceLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedVoiceLibrary, 0x0028);
		}

		// class UCancelFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__CancelFindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelFindSessionsCallbackProxy, UnknownData_LRIF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelFindSessionsCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__CreateSessionCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxyAdvanced, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxyAdvanced, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxyAdvanced, UnknownData_VLZW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxyAdvanced, 0x00B8);
		}

		// class UEndSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__EndSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSessionCallbackProxy, UnknownData_BOGX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndSessionCallbackProxy, 0x0078);
		}

		// class UFindFriendSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__FindFriendSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFriendSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFriendSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFriendSessionCallbackProxy, UnknownData_C64R, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindFriendSessionCallbackProxy, 0x0098);
		}

		// class UFindSessionsCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__FindSessionsCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxyAdvanced, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxyAdvanced, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxyAdvanced, UnknownData_XSHE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxyAdvanced, 0x00D0);
		}

		// class UGetFriendsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__GetFriendsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendsCallbackProxy, UnknownData_Z8R2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetFriendsCallbackProxy, 0x0070);
		}

		// class UGetRecentPlayersCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__GetRecentPlayersCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentPlayersCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentPlayersCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentPlayersCallbackProxy, UnknownData_JISL, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetRecentPlayersCallbackProxy, 0x0090);
		}

		// class UGetUserPrivilegeCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__GetUserPrivilegeCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserPrivilegeCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserPrivilegeCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserPrivilegeCallbackProxy, UnknownData_1RPF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserPrivilegeCallbackProxy, 0x0080);
		}

		// class ULoginUserCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__LoginUserCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginUserCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginUserCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginUserCallbackProxy, UnknownData_K9JP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoginUserCallbackProxy, 0x0098);
		}

		// class ULogoutUserCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__LogoutUserCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutUserCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutUserCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutUserCallbackProxy, UnknownData_WNCQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutUserCallbackProxy, 0x0078);
		}

		// class USendFriendInviteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__SendFriendInviteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USendFriendInviteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendFriendInviteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendFriendInviteCallbackProxy, UnknownData_6IGN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USendFriendInviteCallbackProxy, 0x0090);
		}

		// class UUpdateSessionCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__UpdateSessionCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, UnknownData_9NTO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateSessionCallbackProxyAdvanced, 0x0098);
		}

		// class UInAppPurchaseComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__InAppPurchaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, InAppPurchaseLogMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsSuccess, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsFailure, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationSuccess, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationFailure, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistorySuccess, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistoryFailure, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, UnknownData_ECNY, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseComponent, 0x0128);
		}

		// class ULuminApplicationLifecycleComponent : public UApplicationLifecycleComponent
		TEST_METHOD(Class__MagicLeap__LuminApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceHasReactivatedDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillEnterRealityModeDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillGoInStandbyDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusLostDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusGainedDelegate, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminApplicationLifecycleComponent, 0x0190);
		}

		// class UMagicLeapHeadTrackingNotificationsComponent : public UVRNotificationsComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapHeadTrackingNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingLost, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecovered, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecoveryFailed, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingNewSessionStarted, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, UnknownData_KCHB, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHeadTrackingNotificationsComponent, 0x01D0);
		}

		// class UMagicLeapHMDFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapHMDFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHMDFunctionLibrary, 0x0028);
		}

		// class UMagicLeapMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_AI8E, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, OnMeshTrackerUpdated, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, ScanWorld, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MeshType, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_XTLN, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BoundingVolume, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, LevelOfDetail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_TZOI, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, PerimeterOfGapsToFill, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, Planarize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_JXA3, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, DisconnectedSectionArea, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestNormals, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestVertexConfidence, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorMode, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_T5V4, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BlockVertexColors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RemoveOverlappingTriangles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_LU3R, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MRMesh, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BricksPerFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_X4WQ, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshTrackerComponent, 0x0290);
		}

		// class UMagicLeapSettings : public UObject
		TEST_METHOD(Class__MagicLeap__MagicLeapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bEnableZI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseVulkanForZI, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseMLAudioForZI, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, UnknownData_YW1I, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSettings, 0x0030);
		}

		// class UMagicLeapMeshBlockSelectorInterface : public UInterface
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshBlockSelectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshBlockSelectorInterface, 0x0028);
		}

		// class UMagicLeapRaycastComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapRaycastComponent, UnknownData_N58P, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastComponent, 0x0118);
		}

		// class UMagicLeapRaycastFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastFunctionLibrary, 0x0028);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0088);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_IT5A, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0680);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_DAEW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_CPAN, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0060);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_YQ2G, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_PGIU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_QDW9, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_BO0M, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_8OQG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_SJHD, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_291V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_1LM7, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_GXXW, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, WorldToLocalScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_B14N, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01C0);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_UED1, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_26XX, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0078);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_8GMY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_NJ1Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_F9NC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_TAF8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_8YZJ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_75LK, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_ZF9B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_ZVLL, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_EOAW, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_H57K, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_4DO6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_63G4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_AGVJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_M35N, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_JUWK, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_Q2GW, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_C6K5, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_3TMP, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_ZWBD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_H49D, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_3CHN, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_KIVG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_CG64, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0460);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_6393, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0480);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_M7J3, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_GZIQ, 0x0492);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x04A0);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_YQJM, 0x047A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0480);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_HS1K, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0490);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_O0U9, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0490);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_9OOI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_VOZW, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_XX7W, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_MUA7, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_9OGT, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_1W64, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_JYJH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_S1CH, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_Z8ZT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_9VFH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_5968, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_62KD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_YQKY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_60AB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_74GN, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_PMQM, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_JXT9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_JJYR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_O9E7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_U515, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_7CT1, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_CL7X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_VTR6, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_KSUW, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_YL9U, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_ZP7O, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_OIUW, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_TYNP, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x0110);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_O4XD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_3TBT, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_SDDV, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_NVA1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_86A7, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_RHK3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_UQJH, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_FM55, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_LFF4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_LYTY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_E0H1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_NSMX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_H1R0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_CYV6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_KDAX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bGridSizeIsExplicit, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_NV98, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitGridSize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bRotationGridSizeIsExplicit, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_YL9Z, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ExplicitRotationGridSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldRotGrid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_2GEQ, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_OY8D, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_9KTI, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_H5M8, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_AQNR, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x01A0);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_W1XK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_LDPW, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_IDSV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_OZYO, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_A165, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class UAddPatchToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolBuilder, UnknownData_XY8X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolBuilder, 0x0030);
		}

		// class UAddPatchToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Width, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Rotation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Subdivisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Shift, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolProperties, 0x0070);
		}

		// class UAddPatchTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPatchTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_TVQT, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, ShapeSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_D13P, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchTool, 0x0100);
		}

		// class UAddPrimitiveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveToolBuilder, UnknownData_CZRL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveToolBuilder, 0x0038);
		}

		// class UProceduralShapeToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ProceduralShapeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bInstanceIfPossible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PolygroupMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PlaceMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bSnapToGrid, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PivotLocation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_0P2G, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Rotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bAlignShapeToPlacementSurface, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_PAR6, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralShapeToolProperties, 0x0070);
		}

		// class UProceduralRectangleToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralRectangleToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, Width, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, Depth, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, WidthSubdivisions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRectangleToolProperties, DepthSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralRectangleToolProperties, 0x0080);
		}

		// class UProceduralBoxToolProperties : public UProceduralRectangleToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralBoxToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralBoxToolProperties, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralBoxToolProperties, HeightSubdivisions, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralBoxToolProperties, 0x0088);
		}

		// class UProceduralRoundedRectangleToolProperties : public UProceduralRectangleToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralRoundedRectangleToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRoundedRectangleToolProperties, CornerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralRoundedRectangleToolProperties, CornerSlices, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralRoundedRectangleToolProperties, 0x0088);
		}

		// class UProceduralDiscToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralDiscToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, RadialSlices, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, RadialSubdivisions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralDiscToolProperties, UnknownData_19UY, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralDiscToolProperties, 0x0080);
		}

		// class UProceduralPuncturedDiscToolProperties : public UProceduralDiscToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralPuncturedDiscToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralPuncturedDiscToolProperties, HoleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralPuncturedDiscToolProperties, UnknownData_FTSV, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralPuncturedDiscToolProperties, 0x0088);
		}

		// class UProceduralTorusToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralTorusToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, MajorRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, MinorRadius, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, TubeSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralTorusToolProperties, CrossSectionSlices, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralTorusToolProperties, 0x0080);
		}

		// class UProceduralCylinderToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralCylinderToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, Height, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, RadialSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralCylinderToolProperties, HeightSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralCylinderToolProperties, 0x0080);
		}

		// class UProceduralConeToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralConeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, Height, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, RadialSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralConeToolProperties, HeightSubdivisions, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralConeToolProperties, 0x0080);
		}

		// class UProceduralArrowToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralArrowToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, ShaftRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, ShaftHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, HeadRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, HeadHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, RadialSlices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralArrowToolProperties, TotalSubdivisions, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralArrowToolProperties, 0x0088);
		}

		// class UProceduralSphereToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralSphereToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, LatitudeSlices, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, LongitudeSlices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphereToolProperties, UnknownData_6DZV, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSphereToolProperties, 0x0080);
		}

		// class UProceduralSphericalBoxToolProperties : public UProceduralShapeToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProceduralSphericalBoxToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphericalBoxToolProperties, Radius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralSphericalBoxToolProperties, Subdivisions, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralSphericalBoxToolProperties, 0x0078);
		}

		// class ULastActorInfo : public UObject
		TEST_METHOD(Class__MeshModelingTools__LastActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, UnknownData_XEZL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, Actor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, ShapeSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, MaterialProperties, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULastActorInfo, 0x0058);
		}

		// class UAddPrimitiveTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_GK5N, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, ShapeSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, LastGenerated, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, AssetName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_196E, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveTool, 0x00F0);
		}

		// class UAddBoxPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddBoxPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddBoxPrimitiveTool, 0x00F0);
		}

		// class UAddCylinderPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddCylinderPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddCylinderPrimitiveTool, 0x00F0);
		}

		// class UAddConePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddConePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddConePrimitiveTool, 0x00F0);
		}

		// class UAddRectanglePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddRectanglePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddRectanglePrimitiveTool, 0x00F0);
		}

		// class UAddRoundedRectanglePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddRoundedRectanglePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddRoundedRectanglePrimitiveTool, 0x00F0);
		}

		// class UAddDiscPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddDiscPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddDiscPrimitiveTool, 0x00F0);
		}

		// class UAddPuncturedDiscPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddPuncturedDiscPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPuncturedDiscPrimitiveTool, 0x00F0);
		}

		// class UAddTorusPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddTorusPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddTorusPrimitiveTool, 0x00F0);
		}

		// class UAddArrowPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddArrowPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddArrowPrimitiveTool, 0x00F0);
		}

		// class UAddSpherePrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddSpherePrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddSpherePrimitiveTool, 0x00F0);
		}

		// class UAddSphericalBoxPrimitiveTool : public UAddPrimitiveTool
		TEST_METHOD(Class__MeshModelingTools__AddSphericalBoxPrimitiveTool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddSphericalBoxPrimitiveTool, 0x00F0);
		}

		// class UAlignObjectsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolBuilder, 0x0028);
		}

		// class UAlignObjectsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_OS4H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignTo, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_IB72, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, BoxPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_DIBW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignX, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignY, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignZ, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_16ZG, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolProperties, 0x0070);
		}

		// class UAlignObjectsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_GM3U, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, AlignProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_T81C, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsTool, 0x0140);
		}

		// class UBakeMeshAttributeMapsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolBuilder, UnknownData_JL3N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsToolBuilder, 0x0030);
		}

		// class UBakeMeshAttributeMapsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, MapType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_E68P, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, Resolution, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_GCJK, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UVLayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UVLayerNamesList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, bUseWorldSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, UnknownData_1KN9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsToolProperties, Result, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsToolProperties, 0x0098);
		}

		// class UBakedNormalMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedNormalMapToolProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedNormalMapToolProperties, 0x0060);
		}

		// class UBakedOcclusionMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedOcclusionMapToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, OcclusionRays, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, MaxDistance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, bGaussianBlur, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, UnknownData_L00U, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, BlurRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, BiasAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapToolProperties, UnknownData_4JIR, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedOcclusionMapToolProperties, 0x0078);
		}

		// class UBakedOcclusionMapVisualizationProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedOcclusionMapVisualizationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapVisualizationProperties, BaseGrayLevel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedOcclusionMapVisualizationProperties, OcclusionMultiplier, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedOcclusionMapVisualizationProperties, 0x0068);
		}

		// class UBakedCurvatureMapToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedCurvatureMapToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, CurvatureType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_RZID, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, ColorMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_QUIA, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, RangeMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, MinRangeMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, Clamping, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_GB92, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, bGaussianBlur, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_E6WA, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, BlurRadius, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedCurvatureMapToolProperties, UnknownData_V5MB, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedCurvatureMapToolProperties, 0x0080);
		}

		// class UBakedTexture2DImageProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakedTexture2DImageProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, SourceTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, UVLayer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakedTexture2DImageProperties, UnknownData_UH51, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakedTexture2DImageProperties, 0x0070);
		}

		// class UBakeMeshAttributeMapsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeMeshAttributeMapsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, Settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, NormalMapProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, OcclusionMapProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CurvatureMapProps, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, Texture2DProps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, VisualizationProps, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_50AQ, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, PreviewMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_5PW6, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedNormalMap, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_OVY2, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedOcclusionMap, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_USY3, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedCurvatureMap, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_RTPV, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedMeshPropertyMap, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, UnknownData_RZ6M, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, CachedTexture2DImageMap, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyNormalMap, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyColorMapBlack, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeMeshAttributeMapsTool, EmptyColorMapWhite, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeMeshAttributeMapsTool, 0x04D0);
		}

		// class UBakeTransformToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolBuilder, UnknownData_PES6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolBuilder, 0x0030);
		}

		// class UBakeTransformToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bBakeRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, BakeScale, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bRecenterPivot, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, UnknownData_JV3J, 0x0063);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolProperties, 0x0068);
		}

		// class UBakeTransformTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeTransformTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, UnknownData_0O10, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformTool, 0x00B8);
		}

		// class UPhysicsObjectToolPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PhysicsObjectToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, ObjectName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, CollisionType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, UnknownData_GO0I, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, UnknownData_1BX8, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Spheres, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Boxes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Capsules, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsObjectToolPropertySet, Convexes, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsObjectToolPropertySet, 0x00B8);
		}

		// class UCollisionGeometryVisualizationProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CollisionGeometryVisualizationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, LineThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, bShowHidden, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, UnknownData_AFVM, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, Color, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionGeometryVisualizationProperties, UnknownData_VKR8, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionGeometryVisualizationProperties, 0x0070);
		}

		// class UCombineMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolBuilder, UnknownData_YYEA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolBuilder, 0x0038);
		}

		// class UCombineMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, bIsDuplicateMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_RH4W, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, WriteOutputTo, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_6RBG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, OutputName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, OutputAsset, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolProperties, 0x0088);
		}

		// class UCombineMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, HandleSourceProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, UnknownData_F0SJ, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesTool, 0x00B8);
		}

		// class UConvertToPolygonsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolBuilder, 0x0028);
		}

		// class UConvertToPolygonsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, ConversionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_U07K, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, AngleTolerance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bCalculateNormals, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bShowGroupColors, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_JAIF, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolProperties, 0x0070);
		}

		// class UConvertToPolygonsTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, PreviewMesh, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, UnknownData_A9AH, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsTool, 0x03E0);
		}

		// class UCSGMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, Operation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bShowNewBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bAttemptFixHoles, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, bOnlyUseFirstMeshMaterials, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesToolProperties, UnknownData_KR6W, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesToolProperties, 0x0068);
		}

		// class UCSGMeshesTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, CSGProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, UnknownData_JYDR, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, DrawnLineSet, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCSGMeshesTool, UnknownData_MJZ2, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesTool, 0x0120);
		}

		// class UCSGMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CSGMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCSGMeshesToolBuilder, 0x0030);
		}

		// class UDeformMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsToolBuilder, 0x0030);
		}

		// class UDeformMeshPolygonsTransformProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTransformProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, DeformationStrategy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, TransformMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectFaces, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectEdges, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSnapToWorldGrid, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bShowWireframe, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_DJAM, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, SelectedWeightScheme, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_61TZ, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_DCJN, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, HandleWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bPostFixHandles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_6CB4, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTransformProperties, 0x0080);
		}

		// class UDeformMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_97WU, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, DynamicMeshComponent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, TransformProps, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_40BB, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTool, 0x12F0);
		}

		// class UDisplaceMeshCommonProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshCommonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, DisplacementType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, UnknownData_LIEX, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, DisplaceIntensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, RandomSeed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, Subdivisions, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, WeightMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, WeightMapsList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, bInvertWeightMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, bDisableSizeWarning, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshCommonProperties, UnknownData_S88E, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshCommonProperties, 0x0090);
		}

		// class UDisplaceMeshTextureMapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTextureMapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTextureMapProperties, DisplacementMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTextureMapProperties, 0x0068);
		}

		// class UDisplaceMeshDirectionalFilterProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshDirectionalFilterProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, bEnableFilter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, UnknownData_PF92, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, FilterDirection, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, FilterWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshDirectionalFilterProperties, UnknownData_MTJG, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshDirectionalFilterProperties, 0x0078);
		}

		// class UDisplaceMeshPerlinNoiseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshPerlinNoiseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshPerlinNoiseProperties, PerlinLayerProperties, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshPerlinNoiseProperties, 0x0070);
		}

		// class UDisplaceMeshSineWaveProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshSineWaveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWaveFrequency, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWavePhaseShift, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, SineWaveDirection, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshSineWaveProperties, UnknownData_5Z1M, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshSineWaveProperties, 0x0078);
		}

		// class UDisplaceMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshToolBuilder, 0x0028);
		}

		// class UDisplaceMeshTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, CommonProperties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DirectionalFilterProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, TextureMapProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, NoiseProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, SineWaveProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, UnknownData_0LDR, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTool, 0x03F0);
		}

		// class UDrawAndRevolveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawAndRevolveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveToolBuilder, UnknownData_O7WV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawAndRevolveToolBuilder, 0x0030);
		}

		// class URevolveProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RevolveProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, RevolutionDegrees, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, RevolutionDegreesOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, Steps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bReverseRevolutionDirection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bFlipMesh, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bProfileIsCrossSectionOfSide, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, PolygroupMode, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, QuadSplitMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_BWFB, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, DiagonalProportionTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, CapFillMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bWeldFullRevolution, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bWeldVertsOnAxis, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_UV2D, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, AxisWeldTolerance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bSharpNormals, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_6BMB, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, SharpNormalAngleTolerance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bFlipVs, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, bUVsSkipFullyWeldedEdges, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveProperties, UnknownData_7DXC, 0x00AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveProperties, 0x00B0);
		}

		// class URevolveToolProperties : public URevolveProperties
		TEST_METHOD(Class__MeshModelingTools__RevolveToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bConnectOpenProfileToAxis, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bSnapToWorldGrid, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, UnknownData_OERF, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, DrawPlaneOrigin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, DrawPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bEnableSnapping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, bAllowedToEditDrawPlane, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveToolProperties, UnknownData_Q3JL, 0x00CE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveToolProperties, 0x00D0);
		}

		// class URevolveOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RevolveOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveOperatorFactory, UnknownData_COJ2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveOperatorFactory, RevolveTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveOperatorFactory, 0x0038);
		}

		// class UDrawAndRevolveTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawAndRevolveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, UnknownData_GCLW, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, ControlPointsMechanic, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, PlaneMechanic, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, Settings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, MaterialProperties, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawAndRevolveTool, Preview, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawAndRevolveTool, 0x0120);
		}

		// class UDrawPolygonToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolBuilder, UnknownData_I1ZY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolBuilder, 0x0030);
		}

		// class UDrawPolygonToolStandardProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolStandardProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, PolygonType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, OutputMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_UA5R, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, FeatureSizeRatio, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, ExtrudeHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, Steps, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bAllowSelfIntersections, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bShowGizmo, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_B1JK, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolStandardProperties, 0x0078);
		}

		// class UDrawPolygonToolSnapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolSnapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bEnableSnapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToEdges, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToAngles, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToLengths, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_T7KY, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, SegmentLength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bHitSceneObjects, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_L5FL, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, HitNormalOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_LU5D, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolSnapProperties, 0x0078);
		}

		// class UDrawPolygonTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_IMUD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PolygonProperties, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, SnapProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, MaterialProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_UGZW, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PreviewMesh, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_4DHR, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, HeightMechanic, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_TUNL, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonTool, 0x0570);
		}

		// class UDrawPolyPathToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathToolBuilder, UnknownData_4VLY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathToolBuilder, 0x0038);
		}

		// class UDrawPolyPathProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, OutputType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_DOOF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, WidthMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_07ZE, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Width, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, HeightMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_A0YU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Height, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, RampStartRatio, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, bSnapToWorldGrid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_1FYA, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathProperties, 0x0080);
		}

		// class UDrawPolyPathExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, Direction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_G1Q3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_NTP2, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathExtrudeProperties, 0x0068);
		}

		// class UDrawPolyPathTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_WLCT, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, TransformProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, MaterialProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_GK0V, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, PlaneMechanic, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_0V01, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, EditPreview, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeHeightMechanic, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, CurveDistMechanic, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, SurfacePathMechanic, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_G7V7, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathTool, 0x0210);
		}

		// class UDynamicMeshBrushTool : public UBaseBrushTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, PreviewMesh, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, UnknownData_CE4J, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshBrushTool, 0x0200);
		}

		// class UDynamicMeshSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptToolBuilder, UnknownData_QNJZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptToolBuilder, 0x0038);
		}

		// class UBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bIsRemeshingEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_7L46, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushSpeed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bFreezeTarget, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_YLAN, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, SmoothBrushSpeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bDetailPreservingSmooth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_R6P7, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushSculptProperties, 0x0078);
		}

		// class UMeshConstraintProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshConstraintProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreserveSharpEdges, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MeshBoundaryConstraint, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, GroupBoundaryConstraint, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MaterialBoundaryConstraint, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreventNormalFlips, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, UnknownData_JP6L, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshConstraintProperties, 0x0068);
		}

		// class URemeshProperties : public UMeshConstraintProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, SmoothingStrength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bFlips, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bSplits, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bCollapses, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, UnknownData_SLE0, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshProperties, 0x0070);
		}

		// class UBrushRemeshProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__BrushRemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, bEnableRemeshing, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_E7XR, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, TriangleSize, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, PreserveDetail, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_6ML3, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushRemeshProperties, 0x0080);
		}

		// class UFixedPlaneBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bPropertySetEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bShowGizmo, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bSnapToGrid, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, UnknownData_K8QV, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, position, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, Rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushProperties, 0x0080);
		}

		// class UDynamicMeshSculptTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptMaxBrushProperties, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, KelvinBrushProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, RemeshProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, GizmoProperties, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ViewProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_OUCY, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicator, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMaterial, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, DynamicMeshComponent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ActiveOverrideMaterial, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_0LHT, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformGizmo, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformProxy, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_XN6G, 0x0C60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptTool, 0x0C70);
		}

		// class UEdgeLoopInsertionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionToolBuilder, UnknownData_3MNZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionToolBuilder, 0x0030);
		}

		// class UEdgeLoopInsertionProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, PositionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_J3V0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, InsertionMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_OR3E, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_ST29, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, ProportionOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, DistanceOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bInteractive, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bFlipOffsetDirection, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, bWireframe, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, UnknownData_TQWT, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionProperties, VertexTolerance, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionProperties, 0x0090);
		}

		// class UEdgeLoopInsertionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionOperatorFactory, UnknownData_N8HE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionOperatorFactory, Tool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionOperatorFactory, 0x0038);
		}

		// class UEdgeLoopInsertionTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EdgeLoopInsertionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_8QG5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_SM9U, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, Preview, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeLoopInsertionTool, UnknownData_B7T7, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeLoopInsertionTool, 0x0500);
		}

		// class UEditMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolBuilder, UnknownData_FAX2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolBuilder, 0x0038);
		}

		// class UPolyEditCommonProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCommonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bSelectEdgeLoops, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_1XAQ, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, LocalFrameMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_TS96, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bLockRotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, bSnapToWorldGrid, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCommonProperties, UnknownData_T601, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCommonProperties, 0x0070);
		}

		// class UEditMeshPolygonsToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolActionPropertySet, UnknownData_CTVE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActionPropertySet, 0x0068);
		}

		// class UEditMeshPolygonsToolActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions, 0x0068);
		}

		// class UEditMeshPolygonsToolActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions_Triangles, 0x0068);
		}

		// class UEditMeshPolygonsToolUVActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolUVActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolUVActions, 0x0068);
		}

		// class UEditMeshPolygonsToolEdgeActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions, 0x0068);
		}

		// class UEditMeshPolygonsToolEdgeActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions_Triangles, 0x0068);
		}

		// class UPolyEditExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, Direction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_9AUW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, bShellsToSolids, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_2AIA, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditExtrudeProperties, 0x0068);
		}

		// class UPolyEditOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOffsetProperties, bUseFaceNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOffsetProperties, UnknownData_WSWE, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditOffsetProperties, 0x0068);
		}

		// class UPolyEditInsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditInsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, bReproject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, UnknownData_8TN2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, Softness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, bBoundaryOnly, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, UnknownData_DQX1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditInsetProperties, AreaScale, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditInsetProperties, 0x0070);
		}

		// class UPolyEditOutsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditOutsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, Softness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, bBoundaryOnly, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, UnknownData_7PBB, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, AreaScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditOutsetProperties, UnknownData_LNR7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditOutsetProperties, 0x0070);
		}

		// class UPolyEditCutProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCutProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, Orientation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_W1SL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, bSnapToVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_NQCU, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCutProperties, 0x0068);
		}

		// class UPolyEditSetUVProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditSetUVProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, bShowMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, UnknownData_VV27, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditSetUVProperties, 0x0068);
		}

		// class UEditMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_JG50, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, DynamicMeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CommonProps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions_Triangles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions_Triangles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditUVActions, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeProperties, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, OffsetProperties, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, InsetProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, OutsetProperties, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CutProperties, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SetUVProperties, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SelectionMechanic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_GRXB, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, MultiTransformer, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_YZRT, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditPreview, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_NWVS, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeHeightMechanic, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CurveDistMechanic, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SurfacePathMechanic, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_PS7I, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsTool, 0x07D0);
		}

		// class UEditNormalsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolBuilder, UnknownData_CO4A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolBuilder, 0x0030);
		}

		// class UEditNormalsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bRecomputeNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, NormalCalculationMethod, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bFixInconsistentNormals, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bInvertNormals, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SplitNormalMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_LG2G, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SharpEdgeAngleThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bAllowSharpVertices, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_FURS, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolProperties, 0x0070);
		}

		// class UEditNormalsAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsAdvancedProperties, 0x0060);
		}

		// class UEditNormalsOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EditNormalsOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_7NT5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_E9AD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsOperatorFactory, 0x0040);
		}

		// class UEditNormalsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditNormalsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, Previews, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, UnknownData_8TLJ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsTool, 0x0100);
		}

		// class UEditPivotToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolBuilder, 0x0028);
		}

		// class UEditPivotToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, bEnableSnapDragging, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, RotationMode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, UnknownData_DTF9, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolProperties, 0x0068);
		}

		// class UEditPivotToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_6ATH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, bUseWorldBox, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_UKH2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolActionPropertySet, 0x0070);
		}

		// class UEditPivotTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditPivotTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_AI9C, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, TransformProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, EditPivotActions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_9V18, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, ActiveGizmos, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_TYXV, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotTool, 0x0200);
		}

		// class UEditUVIslandsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsToolBuilder, 0x0030);
		}

		// class UEditUVIslandsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_05SC, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MaterialSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, CheckerMaterial, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, DynamicMeshComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, SelectionMechanic, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_U682, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MultiTransformer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_9L68, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsTool, 0x0370);
		}

		// class UExtractCollisionGeometryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ExtractCollisionGeometryToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryToolBuilder, UnknownData_F6DG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtractCollisionGeometryToolBuilder, 0x0030);
		}

		// class UExtractCollisionGeometryTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ExtractCollisionGeometryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, VizSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, ObjectProps, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, PreviewElements, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExtractCollisionGeometryTool, UnknownData_X8PD, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExtractCollisionGeometryTool, 0x0330);
		}

		// class UGroupEdgeInsertionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionToolBuilder, UnknownData_1X6S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionToolBuilder, 0x0030);
		}

		// class UGroupEdgeInsertionProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, InsertionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, UnknownData_UTAF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, bWireframe, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, UnknownData_AWHB, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionProperties, VertexTolerance, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionProperties, 0x0070);
		}

		// class UGroupEdgeInsertionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionOperatorFactory, UnknownData_1HTT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionOperatorFactory, Tool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionOperatorFactory, 0x0038);
		}

		// class UGroupEdgeInsertionTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__GroupEdgeInsertionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, UnknownData_X5ZK, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, Preview, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroupEdgeInsertionTool, UnknownData_9JZZ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroupEdgeInsertionTool, 0x0550);
		}

		// class UHoleFillToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolBuilder, 0x0028);
		}

		// class USmoothHoleFillProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SmoothHoleFillProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, bConstrainToHoleInterior, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_1OAY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, RemeshingExteriorRegionWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, SmoothingExteriorRegionWidth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, SmoothingInteriorRegionWidth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, InteriorSmoothness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_5L69, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, FillDensityScalar, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, bProjectDuringRemesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothHoleFillProperties, UnknownData_JHMF, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothHoleFillProperties, 0x0088);
		}

		// class UHoleFillToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, FillType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, bRemoveIsolatedTriangles, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolProperties, UnknownData_L9VE, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolProperties, 0x0068);
		}

		// class UHoleFillToolActions : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillToolActions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillToolActions, UnknownData_30C3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillToolActions, 0x0068);
		}

		// class UHoleFillStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__HoleFillStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, InitialHoles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, SelectedHoles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, SuccessfulFills, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, FailedFills, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillStatisticsProperties, RemainingHoles, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillStatisticsProperties, 0x00B0);
		}

		// class UHoleFillOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__HoleFillOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillOperatorFactory, UnknownData_EKH2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillOperatorFactory, FillTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillOperatorFactory, 0x0038);
		}

		// class UHoleFillTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__HoleFillTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, UnknownData_0ALM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, SmoothHoleFillProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Properties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Actions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Statistics, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, Preview, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, SelectionMechanic, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoleFillTool, UnknownData_PT6A, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoleFillTool, 0x01E0);
		}

		// class UMeshSculptBrushOpProps : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSculptBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSculptBrushOpProps, 0x0060);
		}

		// class UBaseKelvinletBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BaseKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, Stiffness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, Incompressiblity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, BrushSteps, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKelvinletBrushOpProps, UnknownData_FB1P, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseKelvinletBrushOpProps, 0x0070);
		}

		// class UScaleKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ScaleKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleKelvinletBrushOpProps, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleKelvinletBrushOpProps, Falloff, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleKelvinletBrushOpProps, 0x0078);
		}

		// class UPullKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PullKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPullKelvinletBrushOpProps, Falloff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPullKelvinletBrushOpProps, Depth, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPullKelvinletBrushOpProps, 0x0078);
		}

		// class USharpPullKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SharpPullKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpPullKelvinletBrushOpProps, Falloff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharpPullKelvinletBrushOpProps, Depth, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharpPullKelvinletBrushOpProps, 0x0078);
		}

		// class UTwistKelvinletBrushOpProps : public UBaseKelvinletBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__TwistKelvinletBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwistKelvinletBrushOpProps, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwistKelvinletBrushOpProps, Falloff, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwistKelvinletBrushOpProps, 0x0078);
		}

		// class UMeshAnalysisProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAnalysisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, SurfaceArea, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, Volume, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAnalysisProperties, 0x0080);
		}

		// class UMeshAttributePaintToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolBuilder, UnknownData_XOP1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintToolBuilder, 0x0080);
		}

		// class UMeshAttributePaintToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, Attributes, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, SelectedAttribute, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, UnknownData_ZWQE, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintToolProperties, AttributeName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintToolProperties, 0x0088);
		}

		// class UMeshAttributePaintEditActions : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintEditActions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintEditActions, UnknownData_GNKP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintEditActions, 0x0068);
		}

		// class UMeshAttributePaintTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshAttributePaintTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintTool, AttribProps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAttributePaintTool, UnknownData_5F8Y, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAttributePaintTool, 0x0630);
		}

		// class UMeshBoundaryToolBase : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshBoundaryToolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, UnknownData_PI8J, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, SelectionMechanic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, LoopSelectClickBehavior, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshBoundaryToolBase, UnknownData_NC4V, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshBoundaryToolBase, 0x0150);
		}

		// class UInflateBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__InflateBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInflateBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInflateBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInflateBrushOpProps, 0x0068);
		}

		// class UMeshInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorToolBuilder, 0x0028);
		}

		// class UMeshInspectorProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBowtieVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bPolygonBorders, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVSeams, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVBowties, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalSeams, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalVectors, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bTangentVectors, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_HNR6, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, NormalLength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, TangentLength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_D4MO, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorProperties, 0x0078);
		}

		// class UMeshInspectorTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, Settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, MaterialSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_C397, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, PreviewMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DrawnLineSet, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DefaultMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_E4WQ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorTool, 0x0128);
		}

		// class UNewMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__NewMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, Material, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UVScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWorldSpaceUVScale, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWireframe, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bShowExtendedOptions, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UnknownData_NDMW, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMeshMaterialProperties, 0x0070);
		}

		// class UExistingMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ExistingMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, MaterialMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, UnknownData_F6UQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerDensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, OverrideMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerMaterial, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExistingMeshMaterialProperties, 0x0078);
		}

		// class UMeshEditingViewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshEditingViewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_9T0K, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, MaterialMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_LBP4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bFlatShading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_TZ91, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, Color, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_ATGU, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, Image, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshEditingViewProperties, 0x0088);
		}

		// class UMoveBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__MoveBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveBrushOpProps, UnknownData_XFJ6, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveBrushOpProps, 0x0070);
		}

		// class UPinchBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PinchBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, bPerpDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPinchBrushOpProps, UnknownData_P2FV, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPinchBrushOpProps, 0x0070);
		}

		// class UBasePlaneBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BasePlaneBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePlaneBrushOpProps, 0x0060);
		}

		// class UPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__PlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushOpProps, UnknownData_ENUR, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneBrushOpProps, 0x0070);
		}

		// class UViewAlignedPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ViewAlignedPlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedPlaneBrushOpProps, UnknownData_IXT0, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewAlignedPlaneBrushOpProps, 0x0070);
		}

		// class UFixedPlaneBrushOpProps : public UBasePlaneBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushOpProps, UnknownData_0KDH, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushOpProps, 0x0070);
		}

		// class UStandardSculptBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__StandardSculptBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandardSculptBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStandardSculptBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStandardSculptBrushOpProps, 0x0068);
		}

		// class UViewAlignedSculptBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__ViewAlignedSculptBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedSculptBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewAlignedSculptBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewAlignedSculptBrushOpProps, 0x0068);
		}

		// class USculptMaxBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, MaxHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, bUseFixedHeight, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, UnknownData_MDX1, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, FixedHeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushOpProps, UnknownData_IO50, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushOpProps, 0x0078);
		}

		// class USculptBrushProperties : public UBrushBaseProperties
		TEST_METHOD(Class__MeshModelingTools__SculptBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Depth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bHitBackFaces, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_RYWZ, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Lazyness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bShowPerBrushProps, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_INGH, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptBrushProperties, 0x0088);
		}

		// class UKelvinBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__KelvinBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, FalloffDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, Stiffness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, Incompressiblity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKelvinBrushProperties, BrushSteps, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKelvinBrushProperties, 0x0070);
		}

		// class UWorkPlaneProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__WorkPlaneProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bPropertySetEnabled, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bShowGizmo, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, bSnapToGrid, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, UnknownData_486J, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, position, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorkPlaneProperties, Rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorkPlaneProperties, 0x0080);
		}

		// class USculptMaxBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, MaxHeight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, bFreezeCurrentHeight, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, UnknownData_UJKV, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushProperties, 0x0068);
		}

		// class UMeshSculptToolBase : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSculptToolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, GizmoProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_QE9B, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushOpPropSets, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_TI96, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, SecondaryBrushOpPropSets, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_00PX, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, ViewProperties, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, ActiveOverrideMaterial, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicator, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicatorMaterial, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, BrushIndicatorMesh, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, PlaneTransformGizmo, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, PlaneTransformProxy, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSculptToolBase, UnknownData_QOR1, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSculptToolBase, 0x09D8);
		}

		// class UMeshSelectionToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolBuilder, UnknownData_Z5BF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolBuilder, 0x0038);
		}

		// class UMeshSelectionToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolActionPropertySet, UnknownData_XM3R, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolActionPropertySet, 0x0068);
		}

		// class UMeshSelectionEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionEditActions, 0x0068);
		}

		// class UMeshSelectionMeshEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionMeshEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionMeshEditActions, 0x0068);
		}

		// class UMeshSelectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, SelectionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_OGBY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, AngleTolerance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bHitBackFaces, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bShowWireframe, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_4L8T, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, FaceColorMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_767X, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolProperties, 0x0070);
		}

		// class UMeshSelectionTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionProps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionActions, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, EditActions, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, Selection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SpawnedActors, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, UnknownData_8DGA, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionTool, 0x04A0);
		}

		// class UBaseSmoothBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__BaseSmoothBrushOpProps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSmoothBrushOpProps, 0x0060);
		}

		// class USmoothBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SmoothBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothBrushOpProps, UnknownData_9K02, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothBrushOpProps, 0x0070);
		}

		// class USecondarySmoothBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SecondarySmoothBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondarySmoothBrushOpProps, UnknownData_PJ0A, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecondarySmoothBrushOpProps, 0x0070);
		}

		// class USmoothFillBrushOpProps : public UBaseSmoothBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__SmoothFillBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, bPreserveUVFlow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothFillBrushOpProps, UnknownData_HRA1, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothFillBrushOpProps, 0x0070);
		}

		// class UFlattenBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__FlattenBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Falloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, Depth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, WhichSide, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlattenBrushOpProps, UnknownData_4A49, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlattenBrushOpProps, 0x0070);
		}

		// class UEraseBrushOpProps : public UMeshSculptBrushOpProps
		TEST_METHOD(Class__MeshModelingTools__EraseBrushOpProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEraseBrushOpProps, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEraseBrushOpProps, Falloff, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEraseBrushOpProps, 0x0068);
		}

		// class UMeshSpaceDeformerToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerToolBuilder, 0x0030);
		}

		// class USpaceDeformerOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__SpaceDeformerOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, UnknownData_Z9WI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, SpaceDeformerTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceDeformerOperatorFactory, 0x0038);
		}

		// class UMeshSpaceDeformerTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, SelectedOperationType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_B6BH, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpperBoundsInterval, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, LowerBoundsInterval, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ModifierPercent, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, bSnapToWorldGrid, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_CXXT, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, StateTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_LZN0, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, Preview, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_PWV0, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoCenter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_GNTG, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoOrientation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, IntervalGizmo, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformGizmo, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformProxy, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpIntervalSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, DownIntervalSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ForwardIntervalSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_YH5P, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerTool, 0x01C0);
		}

		// class UMeshStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Mesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, UV, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Attributes, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshStatisticsProperties, 0x0090);
		}

		// class UMeshVertexSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshVertexSculptToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexSculptToolBuilder, 0x0030);
		}

		// class UVertexBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VertexBrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, PrimaryBrushType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, PrimaryFalloffType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, bFreezeTarget, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, bSmoothErases, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVertexBrushSculptProperties, UnknownData_W3HB, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVertexBrushSculptProperties, 0x0068);
		}

		// class UMeshVertexSculptTool : public UMeshSculptToolBase
		TEST_METHOD(Class__MeshModelingTools__MeshVertexSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, SculptProperties, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, DynamicMeshComponent, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshVertexSculptTool, UnknownData_MATY, 0x09E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexSculptTool, 0x1230);
		}

		// class UMirrorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MirrorToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolBuilder, UnknownData_VBQ6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolBuilder, 0x0030);
		}

		// class UMirrorToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MirrorToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, OperationMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bCropAlongMirrorPlaneFirst, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bWeldVerticesOnMirrorPlane, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bAllowBowtieVertexCreation, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bSnapToWorldGrid, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, CtrlClickBehavior, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bButtonsOnlyChangeOrientation, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, bShowPreview, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, SaveMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolProperties, UnknownData_1XRE, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolProperties, 0x0070);
		}

		// class UMirrorOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__MirrorOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, UnknownData_ROJF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, MirrorTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorOperatorFactory, UnknownData_P13G, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorOperatorFactory, 0x0040);
		}

		// class UMirrorToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MirrorToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorToolActionPropertySet, UnknownData_I412, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorToolActionPropertySet, 0x0068);
		}

		// class UMirrorTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MirrorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_55Q3, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, ToolActions, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, MeshesToMirror, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, Previews, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_O0BQ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, PlaneMechanic, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMirrorTool, UnknownData_V6TV, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorTool, 0x0138);
		}

		// class UOffsetMeshToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, OffsetType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, UnknownData_Y93S, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, Distance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, bCreateShell, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshToolProperties, UnknownData_DB94, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshToolProperties, 0x0070);
		}

		// class UOffsetWeightMapSetProperties : public UWeightMapSetProperties
		TEST_METHOD(Class__MeshModelingTools__OffsetWeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetWeightMapSetProperties, MinDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetWeightMapSetProperties, UnknownData_X33B, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetWeightMapSetProperties, 0x0088);
		}

		// class UIterativeOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__IterativeOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, Steps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, bOffsetBoundaries, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, UnknownData_0ZW5, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, SmoothingPerStep, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, bReprojectSmooth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeOffsetProperties, UnknownData_RJKD, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIterativeOffsetProperties, 0x0070);
		}

		// class UImplicitOffsetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ImplicitOffsetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, Smoothness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, bPreserveUVs, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitOffsetProperties, UnknownData_IA9S, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImplicitOffsetProperties, 0x0068);
		}

		// class UOffsetMeshTool : public UBaseMeshProcessingTool
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, OffsetProperties, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, IterativeProperties, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, ImplicitProperties, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffsetMeshTool, WeightMapProperties, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshTool, 0x0420);
		}

		// class UOffsetMeshToolBuilder : public UBaseMeshProcessingToolBuilder
		TEST_METHOD(Class__MeshModelingTools__OffsetMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffsetMeshToolBuilder, 0x0028);
		}

		// class UPhysicsInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PhysicsInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsInspectorToolBuilder, 0x0028);
		}

		// class UPhysicsInspectorTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PhysicsInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, VizSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, ObjectData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, LineMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, PreviewElements, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsInspectorTool, UnknownData_A3QI, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsInspectorTool, 0x00D8);
		}

		// class UPlaneCutToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolBuilder, UnknownData_XLU5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolBuilder, 0x0030);
		}

		// class UAcceptOutputProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AcceptOutputProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, bExportSeparatedPiecesAsNewMeshAssets, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, UnknownData_ZX39, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAcceptOutputProperties, 0x0068);
		}

		// class UPlaneCutToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bSnapToWorldGrid, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bKeepBothHalves, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_06VW, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, SpacingBetweenHalves, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillCutHole, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bShowPreview, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillSpans, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_M3SN, 0x006B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolProperties, 0x0070);
		}

		// class UPlaneCutOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__PlaneCutOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_5N4Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, CutTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_3CQ7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutOperatorFactory, 0x0040);
		}

		// class UPlaneCutTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PlaneCutTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_JURM, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, AcceptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrigin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_V6D5, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, Previews, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, MeshesToCut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_099C, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_BZHZ, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutTool, 0x0170);
		}

		// class UPositionPlaneGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmoBuilder, 0x0028);
		}

		// class UPositionPlaneGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_E50C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallShape, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_LYN5, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmo, 0x0520);
		}

		// class UPositionPlaneOnSceneInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneOnSceneInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneOnSceneInputBehavior, UnknownData_G3EV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneOnSceneInputBehavior, 0x00B0);
		}

		// class UProjectToTargetToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectToTargetToolBuilder, UnknownData_42SY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetToolBuilder, 0x0030);
		}

		// class URemeshMeshToolProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetTriangleCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, SmoothingType, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bDiscardAttributes, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowWireframe, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowGroupColors, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_6LRN, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshIterations, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bUseTargetEdgeLength, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_O9IZ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetEdgeLength, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bReproject, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_GBB9, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolProperties, 0x0090);
		}

		// class UProjectToTargetToolProperties : public URemeshMeshToolProperties
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetToolProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetToolProperties, 0x0090);
		}

		// class URemeshMeshTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_PPA7, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, MeshStatisticsProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_404V, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshTool, 0x00E8);
		}

		// class UProjectToTargetTool : public URemeshMeshTool
		TEST_METHOD(Class__MeshModelingTools__ProjectToTargetTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectToTargetTool, UnknownData_HCL3, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectToTargetTool, 0x00F8);
		}

		// class URemeshMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolBuilder, UnknownData_3NCD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolBuilder, 0x0030);
		}

		// class URemoveOccludedTrianglesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolBuilder, UnknownData_97VO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolBuilder, 0x0030);
		}

		// class URemoveOccludedTrianglesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, OcclusionTestMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, TriangleSampling, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_DGED, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, WindingIsoValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddRandomRays, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddTriangleSamples, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, bOnlySelfOcclude, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_G1DC, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolProperties, 0x0080);
		}

		// class URemoveOccludedTrianglesAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesAdvancedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesAdvancedProperties, UnknownData_FCWC, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesAdvancedProperties, 0x0068);
		}

		// class URemoveOccludedTrianglesOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_8DRP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_MNRN, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesOperatorFactory, 0x0040);
		}

		// class URemoveOccludedTrianglesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, Previews, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, PreviewCopies, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, UnknownData_PWWB, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesTool, 0x0150);
		}

		// class URevolveBoundaryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolBuilder, UnknownData_EU1V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryToolBuilder, 0x0030);
		}

		// class URevolveBoundaryOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryOperatorFactory, UnknownData_MGJ7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryOperatorFactory, RevolveBoundaryTool, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryOperatorFactory, 0x0038);
		}

		// class URevolveBoundaryToolProperties : public URevolveProperties
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, bDisplayOriginalMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, UnknownData_MMBW, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisOrigin, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisYaw, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, AxisPitch, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, bSnapToWorldGrid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryToolProperties, UnknownData_Z19K, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryToolProperties, 0x00D0);
		}

		// class URevolveBoundaryTool : public UMeshBoundaryToolBase
		TEST_METHOD(Class__MeshModelingTools__RevolveBoundaryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, UnknownData_W5B7, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, Settings, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, MaterialProperties, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, PlaneMechanic, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, Preview, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::URevolveBoundaryTool, UnknownData_G8DX, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URevolveBoundaryTool, 0x01B0);
		}

		// class USeamSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SeamSculptToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptToolBuilder, 0x0030);
		}

		// class USeamSculptToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SeamSculptToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, bShowWireframe, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, bHitBackFaces, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptToolProperties, UnknownData_XLRQ, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptToolProperties, 0x0068);
		}

		// class USeamSculptTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__SeamSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, PreviewGeom, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeamSculptTool, UnknownData_9R9A, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeamSculptTool, 0x02E0);
		}

		// class USelfUnionMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bAttemptFixHoles, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bShowNewBoundaryEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bTrimFlaps, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, UnknownData_5K7V, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, WindingNumberThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, bOnlyUseFirstMeshMaterials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesToolProperties, UnknownData_QDRP, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesToolProperties, 0x0078);
		}

		// class USelfUnionMeshesTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, Properties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, DrawnLineSet, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUnionMeshesTool, UnknownData_A9TQ, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesTool, 0x0120);
		}

		// class USelfUnionMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SelfUnionMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUnionMeshesToolBuilder, 0x0030);
		}

		// class USetCollisionGeometryToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryToolBuilder, 0x0028);
		}

		// class USetCollisionGeometryToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, GeometryType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_DRUS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, InputMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_UKTH, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bUseWorldSpace, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bRemoveContained, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bEnableMaxCount, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_4MWY, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, MaxCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, MinThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectBoxes, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectSpheres, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bDetectCapsules, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bSimplifyHulls, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, HullTargetFaceCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bSimplifyPolygons, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_KYD8, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, HullTolerance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, SweepAxis, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_RURQ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, bAppendToExisting, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_HJTN, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, SetCollisionType, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryToolProperties, UnknownData_IEFG, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryToolProperties, 0x0090);
		}

		// class USetCollisionGeometryTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__SetCollisionGeometryTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, Settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, VizSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, CollisionProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, LineMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, PreviewGeom, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetCollisionGeometryTool, UnknownData_QBU0, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetCollisionGeometryTool, 0x01C0);
		}

		// class USmoothMeshToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolProperties, SmoothingType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolProperties, UnknownData_CCQ0, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolProperties, 0x0068);
		}

		// class UIterativeSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__IterativeSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, SmoothingPerStep, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, bSmoothBoundary, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIterativeSmoothProperties, UnknownData_HU0J, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIterativeSmoothProperties, 0x0070);
		}

		// class UDiffusionSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DiffusionSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, SmoothingPerStep, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, bPreserveUVs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiffusionSmoothProperties, UnknownData_4GQB, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiffusionSmoothProperties, 0x0070);
		}

		// class UImplicitSmoothProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ImplicitSmoothProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, SmoothSpeed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, Smoothness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, bPreserveUVs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, UnknownData_DM6O, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImplicitSmoothProperties, VolumeCorrection, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImplicitSmoothProperties, 0x0070);
		}

		// class USmoothWeightMapSetProperties : public UWeightMapSetProperties
		TEST_METHOD(Class__MeshModelingTools__SmoothWeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothWeightMapSetProperties, MinSmoothMultiplier, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothWeightMapSetProperties, UnknownData_E1CL, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothWeightMapSetProperties, 0x0088);
		}

		// class USmoothMeshTool : public UBaseMeshProcessingTool
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, SmoothProperties, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, IterativeProperties, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, DiffusionProperties, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, ImplicitProperties, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, WeightMapProperties, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_QJ90, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshTool, 0x0430);
		}

		// class USmoothMeshToolBuilder : public UBaseMeshProcessingToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolBuilder, 0x0028);
		}

		// class UTransformMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolBuilder, 0x0028);
		}

		// class UTransformMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, TransformMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bSetPivot, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bEnableSnapDragging, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, SnapDragSource, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, RotationMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, UnknownData_LVWZ, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolProperties, 0x0068);
		}

		// class UTransformMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_BXI7, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, TransformProps, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_OMQQ, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, ActiveGizmos, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_SVST, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesTool, 0x0140);
		}

		// class UUVProjectionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolBuilder, UnknownData_VELK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolBuilder, 0x0030);
		}

		// class UUVProjectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVProjectionMethod, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_RK5L, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, ProjectionPrimitiveScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, CylinderProjectToTopOrBottomAngleThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, bWorldSpaceUVScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_5DXR, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolProperties, 0x0088);
		}

		// class UUVProjectionAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionAdvancedProperties, 0x0060);
		}

		// class UUVProjectionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__UVProjectionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_64YM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, Tool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_0WN2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionOperatorFactory, 0x0040);
		}

		// class UUVProjectionTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__UVProjectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, BasicProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, AdvancedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, MaterialSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, Previews, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, CheckerMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformGizmos, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformProxies, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, UnknownData_AIC1, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionTool, 0x0220);
		}

		// class UVoxelBlendMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, BlendPower, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, BlendFalloff, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, bSolidifyInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, bRemoveInternalsAfterSolidify, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, UnknownData_5JLN, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesToolProperties, OffsetSolidifySurface, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesToolProperties, 0x0080);
		}

		// class UVoxelBlendMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelBlendMeshesTool, BlendProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesTool, 0x0110);
		}

		// class UVoxelBlendMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelBlendMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelBlendMeshesToolBuilder, 0x0030);
		}

		// class UVoxelMorphologyMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, Operation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, UnknownData_R4SU, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, Distance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, bSolidifyInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, bRemoveInternalsAfterSolidify, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, UnknownData_ACVX, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesToolProperties, OffsetSolidifySurface, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesToolProperties, 0x0080);
		}

		// class UVoxelMorphologyMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelMorphologyMeshesTool, MorphologyProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesTool, 0x0110);
		}

		// class UVoxelMorphologyMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelMorphologyMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelMorphologyMeshesToolBuilder, 0x0030);
		}

		// class UVoxelSolidifyMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, WindingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, ExtendBounds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, SurfaceSearchSteps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, bSolidAtBoundaries, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, bMakeOffsetSurfaces, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, UnknownData_B5Y4, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesToolProperties, OffsetThickness, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesToolProperties, 0x0080);
		}

		// class UVoxelSolidifyMeshesTool : public UBaseVoxelTool
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelSolidifyMeshesTool, SolidifyProperties, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesTool, 0x0110);
		}

		// class UVoxelSolidifyMeshesToolBuilder : public UBaseCreateFromSelectedToolBuilder
		TEST_METHOD(Class__MeshModelingTools__VoxelSolidifyMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelSolidifyMeshesToolBuilder, 0x0030);
		}

		// class UWeldMeshEdgesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesToolBuilder, 0x0028);
		}

		// class UWeldMeshEdgesTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, Tolerance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, bOnlyUnique, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, UnknownData_TLQX, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesTool, 0x0300);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_OZOJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_HITA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_I8MX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_7DZ5, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_ZPCS, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_OTRV, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_H8U3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_D4CT, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Dependencies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_2K49, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0080);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_6T6T, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_4JR7, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_IK5U, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Thumbnail, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// class UBodySetupCore : public UObject
		TEST_METHOD(Class__PhysicsCore__BodySetupCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, BoneName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, PhysicsType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionTraceFlag, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, CollisionReponse, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetupCore, UnknownData_78AT, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetupCore, 0x0048);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_FAPD, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_O3BW, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_0DCD, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepLinearVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepAngularVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SleepCounterThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_W3XT, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_O3Z5, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__PhysicsCore__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsSettingsCore : public UDeveloperSettings
		TEST_METHOD(Class__PhysicsCore__PhysicsSettingsCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bDefaultHasComplexCollision, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_XEY3, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_MFYA, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, UnknownData_DID3, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettingsCore, SolverOptions, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettingsCore, 0x00E0);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UBP_DamageType_CloseCombat_Electric_FullCharged_C : public UBP_DamageType_CloseCombat_Electric_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_CloseCombat_Electric_FullCharged__BP_DamageType_CloseCombat_Electric_FullCharged_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_CloseCombat_Electric_FullCharged_C, 0x005C);
		}

		// class UWB_Icon_D_Up_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_D_Up__WB_Icon_D_Up_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_D_Up_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_D_Up_C, 0x0268);
		}

		// class ABP_Grenade_AOE_Base_C : public ABP_Grenade_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_Base__BP_Grenade_AOE_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, OptionalCustomExplosionLocation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, Radius, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_4E29, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, MainEffect, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, EffectScale, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, ExplosionDelayAfterTrigger, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UseOptionalLocation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_X9S6, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, IgniteEffect, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, ExplosionSound, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, AOE_Effect, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, AOE_EffectScale, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_FCC6, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, AffectedClasses, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, ShouldAffectDeadAndUnconcious_, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_UKSA, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, HitEffectParticle, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, DrawDebugSphere, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_64YZ, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, HitEffectParticleLocation, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, HitEffectParticleScale, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UseRadialDamage_, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_TJEP, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, RadialBaseDamage, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_S58R, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, RadialDamageType, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, PulseCount, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_EED0, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, PulseTimer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, PauseBetweenPulseActions, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, UnknownData_NPJY, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_Base_C, LastSpawnedHitEffectParticle, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_Base_C, 0x0368);
		}

		// class ABP_Wave_REHR_PlayerController_C : public APlayerController
		TEST_METHOD(BlueprintGeneratedClass__BP_Wave_REHR_PlayerController__BP_Wave_REHR_PlayerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UberGraphFrame, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, W_InGameMenu, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, PlayerHUD, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, GameInstance, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, PlayerName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, SaveGame, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, ControlledCharacter, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, IsBlockMovement, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_8UA4, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, TMP_OriginalPlayername, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, PawnAdminCheatWidgetRef, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, TMP_CountEnemies, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_HQYU, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, Scoreboard, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, Leaderboard, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, OwnNewHighScore_, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_99C9, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, NewRank, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, OldRank, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, OldHighScore, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, LeaderboardWidInIngameMenu, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, KnownSteamUserData, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, MaxLeaderboardEntriesPerBoardTemp, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, GameWin_, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, GameIsOver, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_4S9C, 0x0656);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, OnGameOverStartEndGameScreen, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, HighestPlayerScoreInThisMatch, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, TeamScoreForUpload, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, FinishedBeginPlayFinePC, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, LobbyCheckAllPlayerReadyResult, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_0FAZ, 0x0672);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, LobbyWidgetRef, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, PlayerPawnsList, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, PlayersControllerList_OnlyUseableOnServer, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, SenderChatText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, SenderName, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, LobbyActive, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_QR6D, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, GotOldScore, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, GotNewScore, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, NewHighScore, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_N03R, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, CurrentWeaponReloaded, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, RadialScanActivated, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, RadialScanFullyLoaded, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, CurrentWeaponEmpty, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, DidNotFindLeaderboard, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, UnknownData_JEX8, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, BKP_LastControlledPawnBeforeUncons, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, AllCurrentPlayerCharacter, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, CurrentSpectatedPawn_OnlyLocalKnown, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, EndGamePauseTimeBeforeStartToBlendLeaderboardIn, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, IndexOfSpectatedPlayerInPlayerArray, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, CachedWeaponIDsInHud, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_REHR_PlayerController_C, OldActiveIndex, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Wave_REHR_PlayerController_C, 0x0784);
		}

		// class ABP_ProjectileEffectOnHitBase_Rocket_Homing_C : public ABP_ProjectileEffectOnHitBase_Rocket_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_Rocket_Homing__BP_ProjectileEffectOnHitBase_Rocket_Homing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, SmokeTrail, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, HomingTarget, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, DistanceToTargetToDetonateSelf, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, DistanceToTargetCheckFrequency, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, DestinationCheckTimer, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, RendevousPoint, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, RendevousPointUpdateFrequency, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, UnknownData_80BT, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, RendevousPointReachedCheckTimer, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, ReachedRendevousPointDistance, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_Rocket_Homing_C, 0x0404);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_66K9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_WOHC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulatorBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulatorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulatorBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class UW_NotificationsLogFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_NotificationsLogFrame__W_NotificationsLogFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, VerticalBox_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, Notifications, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, AddNewNotification, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, NotificationWidgets, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, NotificationAutoRemoveTimer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsLogFrame_C, IsReverse, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_NotificationsLogFrame_C, 0x02A5);
		}

		// class UBPI_BaseColor_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_BaseColor__BPI_BaseColor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_BaseColor_C, 0x0028);
		}

		// class UW_ComboboxText_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ComboboxText__W_ComboboxText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ComboboxText_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ComboboxText_C, TextBlock_40, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ComboboxText_C, ActualText, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ComboboxText_C, 0x0288);
		}

		// class UWB_PauseMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_PauseMenu__WB_PauseMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, FadeAnim, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, BackgroundImg, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Audio, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Back, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Controls, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Credits, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Gameplay, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Quit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Resume, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Settings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, Button_Video, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, InfoButton_Down, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, InfoButton_Select01, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, InfoButton_Up, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, SB_Button_Back, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Background, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Foreground, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WS_Global, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WS_Info, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WS_Tabs, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Options_Gameplay, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Options_Controls, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Options_Video, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Options_Audio, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PauseMenu_C, WB_Options_Credits, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_PauseMenu_C, 0x0330);
		}

		// class UChatText_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChatText__ChatText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatText_C, MessageWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatText_C, ActualText, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatText_C, 0x0280);
		}

		// class UW_TimerButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_TimerButton__W_TimerButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, UnknownData_W655, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, Color, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, H_Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, Time, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, DuratinTime, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, OnUnhovered, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerButton_C, IsAutoStart, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_TimerButton_C, 0x0331);
		}

		// class UWB_PatchNotes_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_PatchNotes__WB_PatchNotes_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, Image_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, WB_Foreground, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, OnClicked_Back, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PatchNotes_C, FocusTimer, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_PatchNotes_C, 0x02A8);
		}

		// class UBP_DamageType_LaserShot_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_LaserShot__BP_DamageType_LaserShot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_LaserShot_C, 0x0048);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_F879, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_PZ30, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TetherMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_BSBZ, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_UNWG, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, SelfCollisionThickness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseLegacyBackstop, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_RH54, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUsePointBasedWindModel, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_79AM, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LiftCoefficient, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGravityOverride, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_D5YS, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, GravityScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Gravity, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_1IFB, 0x00AF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x00B0);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_URFL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_JPO3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_2LZ0, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_ZEX5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0058);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_PWDB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_YSTX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_UAOZ, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_11O0, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_HD1U, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_JDXF, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_AVV5, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_Q6XY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_PN5S, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_P4E2, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_YCO5, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class UBPI_RadialScan_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_RadialScan__BPI_RadialScan_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_RadialScan_C, 0x0028);
		}

		// class ATurret_Ranged_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Turret_Ranged__Turret_Ranged_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, WarningLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, Mount, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, TrackRays, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, Turret, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, Base, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, Projectile, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, RotSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, FireRate, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, AttackRange, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, BarrelLength, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, MinLookAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, MaxLookAngle, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, DeltaTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, InRange, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, UnknownData_X19E, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, LaserLocation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, MaxLaserLength, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, Blocking, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, ConstructionVisuals, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, UseTrigger_, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, UseReTrigger_, 0x0293);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, Tag_Ranged, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, ActivateTrigger, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, UnknownData_G2UD, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Ranged_C, RetriggerTurret, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurret_Ranged_C, 0x02A4);
		}

		// class UWB_Frame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Frame__WB_Frame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, ShineLoop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, b_FrameColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, b_FrameShine, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, CP_Base, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Dn, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_3, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_5, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_6, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_7, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Image_8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, L, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, R, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_Frame_Dn, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_Frame_L, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_Frame_R, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_Frame_Up, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_FrCorner_DL, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_FrCorner_DR, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_FrCorner_UL, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, SB_FrCorner_UR, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, Up, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, FrameThickness, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, FrameColor_Normal, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, FrameColor_Hovered, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, FrameColor_Clicked, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, FrameColor_Disabled, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, ShineColor_Normal, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, ShineColor_Hovered, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, ShineColor_Clicked, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, ShineColor_Disabled, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame_C, bIsHovered, 0x03AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Frame_C, 0x03AD);
		}

		// class ABP_MyBasicInteractWidgetAddOn_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_MyBasicInteractWidgetAddOn__BP_MyBasicInteractWidgetAddOn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, Widget, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, Widget_Offset, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, Widget_Offset_Left, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, UnknownData_DT2Q, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, Target_Pawn, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, Widget_Toggle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, UnknownData_LO4O, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, Widget_Offset_up, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, ActionText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MyBasicInteractWidgetAddOn_C, ActionNameForInputKeySearch, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MyBasicInteractWidgetAddOn_C, 0x0271);
		}

		// class UW_KeysButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_KeysButton__W_KeysButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, UnknownData_9B44, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Image_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Image_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Image_4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, SizeBox_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, TextBlock_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, TextBlock_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, TextBlock_3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, TextBlock_4, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Color, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, H_Color, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, OnChangeValue, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, IsSelectKeyMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, UnknownData_7OFN, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, ChosenInputKeys, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, M_GamepadInput, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, M_KeyboardInput1, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Setting_InputKeys, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, M_KeyboardInput2, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, OnSelectInputKeyStarted, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_C, Parent_KeyFrameWidget, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_KeysButton_C, 0x0460);
		}

		// class UBPI_ToAnimBPWeaponInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ToAnimBPWeaponInterface__BPI_ToAnimBPWeaponInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ToAnimBPWeaponInterface_C, 0x0028);
		}

		// class UBPI_Spawn_AI_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Spawn_AI_Interface__BPI_Spawn_AI_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Spawn_AI_Interface_C, 0x0028);
		}

		// class UBF_Math_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BF_Math__BF_Math_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBF_Math_C, 0x0028);
		}

		// class UW_Lobby_TimerButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Lobby_TimerButton__W_Lobby_TimerButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, UnknownData_GMN2, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, Color, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, H_Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, Time, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, DuratinTime, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, OnUnhovered, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Lobby_TimerButton_C, IsServer, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Lobby_TimerButton_C, 0x0331);
		}

		// class UABP_AI_EnemyCreaturePbrRig_Base_AnimBP_child_C : public UABP_AI_EnemyCharacter_Base_AnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_AI_EnemyCreaturePbrRig_Base_AnimBP_child__ABP_AI_EnemyCreaturePbrRig_Base_AnimBP_child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_AI_EnemyCreaturePbrRig_Base_AnimBP_child_C, 0x1121);
		}

		// class UW_MainFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MainFrame__W_MainFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, Image_1022, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, Overlay_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, TextBlock_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, VerticalBox_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_ButtonQuit, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_ButtonSingleplayer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_MainFrameButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_MainFrameButtonExtras, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_MainFrameButtonLeaderboardAndStats, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_MainFrameButtonMultipl, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_MainFrameButtonRateus, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_MainFrameButtonSupport, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrame_C, W_Settings, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MainFrame_C, 0x0300);
		}

		// class UBTTask_ClearLastKnownLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_ClearLastKnownLocation__BTTask_ClearLastKnownLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearLastKnownLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearLastKnownLocation_C, TargetActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearLastKnownLocation_C, SetFocusOn_, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ClearLastKnownLocation_C, 0x00D9);
		}

		// class UBaseCreateFromSelectedToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedToolBuilder, UnknownData_49ZG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedToolBuilder, 0x0030);
		}

		// class UOnAcceptHandleSourcesProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__OnAcceptHandleSourcesProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnAcceptHandleSourcesProperties, OnToolAccept, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnAcceptHandleSourcesProperties, UnknownData_QXKU, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnAcceptHandleSourcesProperties, 0x0068);
		}

		// class UBaseCreateFromSelectedHandleSourceProperties : public UOnAcceptHandleSourcesProperties
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedHandleSourceProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, WriteOutputTo, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, UnknownData_9I2X, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, UnknownData_OP5D, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, OutputName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedHandleSourceProperties, OutputAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedHandleSourceProperties, 0x0090);
		}

		// class UTransformInputsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__TransformInputsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, bShowTransformUI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformInputsToolProperties, UnknownData_D5FC, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformInputsToolProperties, 0x0068);
		}

		// class UBaseCreateFromSelectedTool : public UMultiSelectionTool
		TEST_METHOD(Class__ModelingComponents__BaseCreateFromSelectedTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, UnknownData_XBYK, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, HandleSourcesProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformProxies, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformGizmos, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, TransformInitialScales, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCreateFromSelectedTool, UnknownData_ACCI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCreateFromSelectedTool, 0x00F0);
		}

		// class UBaseDynamicMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__BaseDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_A3A6, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_7ISA, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseDynamicMeshComponent, 0x04B0);
		}

		// class UBaseMeshProcessingToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__ModelingComponents__BaseMeshProcessingToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMeshProcessingToolBuilder, 0x0028);
		}

		// class UBaseMeshProcessingTool : public USingleSelectionTool
		TEST_METHOD(Class__ModelingComponents__BaseMeshProcessingTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, UnknownData_207R, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, Preview, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMeshProcessingTool, UnknownData_X77V, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMeshProcessingTool, 0x0400);
		}

		// class UBaseVoxelTool : public UBaseCreateFromSelectedTool
		TEST_METHOD(Class__ModelingComponents__BaseVoxelTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVoxelTool, VoxProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVoxelTool, UnknownData_UW39, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseVoxelTool, 0x0108);
		}

		// class UCollectSurfacePathMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CollectSurfacePathMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectSurfacePathMechanic, UnknownData_OD6T, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectSurfacePathMechanic, 0x0550);
		}

		// class UConstructionPlaneMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__ConstructionPlaneMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_G8BX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformGizmo, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformProxy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_BC4R, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, ClickToSetPlaneBehavior, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstructionPlaneMechanic, 0x00F0);
		}

		// class UCurveControlPointsMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CurveControlPointsMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_M4UZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, ClickBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, HoverBehavior, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_ZZQ0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewGeometryActor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, DrawnControlPoints, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, DrawnControlSegments, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewPoint, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PreviewSegment, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_WWCX, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PointTransformProxy, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, PointTransformGizmo, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveControlPointsMechanic, UnknownData_KS0Q, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveControlPointsMechanic, 0x0650);
		}

		// class UDynamicMeshReplacementChangeTarget : public UObject
		TEST_METHOD(Class__ModelingComponents__DynamicMeshReplacementChangeTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshReplacementChangeTarget, UnknownData_7KR9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshReplacementChangeTarget, 0x0058);
		}

		// class ULineSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__LineSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, LineMaterial, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, Bounds, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, bBoundsDirty, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineSetComponent, UnknownData_5UGD, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineSetComponent, 0x04D0);
		}

		// class UMeshCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshCommandChangeTarget, 0x0028);
		}

		// class UMeshOpPreviewWithBackgroundCompute : public UObject
		TEST_METHOD(Class__ModelingComponents__MeshOpPreviewWithBackgroundCompute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_6LUI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, PreviewMesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, StandardMaterials, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, OverrideMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, WorkingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_LZ38, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshOpPreviewWithBackgroundCompute, 0x0090);
		}

		// class UMeshReplacementCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshReplacementCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReplacementCommandChangeTarget, 0x0028);
		}

		// class UMeshVertexCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshVertexCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexCommandChangeTarget, 0x0028);
		}

		// class UMultiTransformer : public UObject
		TEST_METHOD(Class__ModelingComponents__MultiTransformer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_5VCI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, GizmoManager, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_5FFJ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformGizmo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformProxy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_NOZ2, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiTransformer, 0x0140);
		}

		// class UOctreeDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__OctreeDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_EV1B, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, bExplicitShowWireframe, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_WYIE, 0x04C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOctreeDynamicMeshComponent, 0x05C0);
		}

		// class UPlaneDistanceFromHitMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PlaneDistanceFromHitMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneDistanceFromHitMechanic, UnknownData_PGG4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneDistanceFromHitMechanic, 0x04B0);
		}

		// class UPointSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__PointSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, PointMaterial, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, Bounds, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, bBoundsDirty, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, UnknownData_K54M, 0x048D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointSetComponent, 0x04D0);
		}

		// class UPreviewMesh : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_XMIZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bBuildSpatialDataStructure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bDrawOnTop, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_GJF2, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, DynamicMeshComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_X4RA, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMesh, 0x00E0);
		}

		// class UPolyEditPreviewMesh : public UPreviewMesh
		TEST_METHOD(Class__ModelingComponents__PolyEditPreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditPreviewMesh, UnknownData_60DK, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditPreviewMesh, 0x04D0);
		}

		// class UPolygonSelectionMechanicProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanicProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectFaces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectEdges, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectVertices, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bPreferProjectedElement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectDownRay, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bIgnoreOcclusion, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, UnknownData_W98M, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanicProperties, 0x0068);
		}

		// class UPolygonSelectionMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_G2CC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, Properties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_1LLH, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, PreviewGeometryActor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, DrawnTriangleSetComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_MN0X, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, HighlightedFaceMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_8Z2T, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanic, 0x0670);
		}

		// class APreviewGeometryActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewGeometryActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewGeometryActor, 0x0220);
		}

		// class UPreviewGeometry : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewGeometry, ParentActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewGeometry, LineSets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewGeometry, 0x0080);
		}

		// class APreviewMeshActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewMeshActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APreviewMeshActor, 0x0220);
		}

		// class USimpleDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__SimpleDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, TangentsType, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bInvalidateProxyOnChange, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_ZD2M, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bExplicitShowWireframe, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_UCVR, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bDrawOnTop, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_WBGH, 0x0531);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleDynamicMeshComponent, 0x0600);
		}

		// class USpaceCurveDeformationMechanicPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__SpaceCurveDeformationMechanicPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, TransformMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_CVFE, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, TransformOrigin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_GGH0, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, Softness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, SoftFalloff, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanicPropertySet, UnknownData_SYJM, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceCurveDeformationMechanicPropertySet, 0x0070);
		}

		// class USpaceCurveDeformationMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpaceCurveDeformationMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_A6OA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, ClickBehavior, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, HoverBehavior, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_PGG7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, TransformProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_4DZP, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PreviewGeometryActor, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, RenderPoints, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, RenderSegments, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_SUMK, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PointTransformProxy, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, PointTransformGizmo, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceCurveDeformationMechanic, UnknownData_T4K8, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceCurveDeformationMechanic, 0x02B0);
		}

		// class USpatialCurveDistanceMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpatialCurveDistanceMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpatialCurveDistanceMechanic, UnknownData_0E7X, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatialCurveDistanceMechanic, 0x03F0);
		}

		// class UTriangleSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__TriangleSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, Bounds, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, bBoundsDirty, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriangleSetComponent, UnknownData_RI8Y, 0x0485);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriangleSetComponent, 0x0550);
		}

		// class UUVLayoutPreviewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__UVLayoutPreviewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, bVisible, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_W59O, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, ScaleFactor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, WhichSide, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_NLDH, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, bShowWireframe, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, UnknownData_QG0K, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreviewProperties, Shift, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVLayoutPreviewProperties, 0x0078);
		}

		// class UUVLayoutPreview : public UObject
		TEST_METHOD(Class__ModelingComponents__UVLayoutPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, PreviewMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, TriangleComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, bShowBackingRectangle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, UnknownData_IEWH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, BackingRectangleMaterial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVLayoutPreview, UnknownData_8K2E, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVLayoutPreview, 0x0140);
		}

		// class UVoxelProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__VoxelProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, VoxelCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, bAutoSimplify, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, bRemoveInternalSurfaces, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, UnknownData_DWGY, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, SimplifyMaxErrorFactor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoxelProperties, CubeRootMinComponentVolume, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoxelProperties, 0x0078);
		}

		// class UWeightMapSetProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__WeightMapSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, WeightMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, WeightMapsList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, bInvertWeightMap, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightMapSetProperties, UnknownData_0JMQ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightMapSetProperties, 0x0080);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0828);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0250);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_J176, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02A0);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UAdvancedSteamFriendsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSteamSessions__AdvancedSteamFriendsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSteamFriendsLibrary, 0x0028);
		}

		// class UAdvancedSteamWorkshopLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSteamSessions__AdvancedSteamWorkshopLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSteamWorkshopLibrary, 0x0028);
		}

		// class USteamRequestGroupOfficersCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSteamSessions__SteamRequestGroupOfficersCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamRequestGroupOfficersCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamRequestGroupOfficersCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamRequestGroupOfficersCallbackProxy, UnknownData_METX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamRequestGroupOfficersCallbackProxy, 0x00A0);
		}

		// class USteamWSRequestUGCDetailsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSteamSessions__SteamWSRequestUGCDetailsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamWSRequestUGCDetailsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamWSRequestUGCDetailsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamWSRequestUGCDetailsCallbackProxy, UnknownData_M151, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamWSRequestUGCDetailsCallbackProxy, 0x0088);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// class ABP_Turret_Laser_Base_C : public ABP_Turret_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Turret_Laser_Base__BP_Turret_Laser_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_0D31, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UberGraphFrame, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, MuzzleEnd, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, SK_TurretGun, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, BP_Weapon, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, AudioIdleRotation, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, LaserLight, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, WarningLight, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Laser, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, LaserHit, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, LaserSource, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Mount, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TimelineIdleRotation_Idle_7210E3DD446822833EEB8191BF201E61, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TimelineIdleRotation__Direction_7210E3DD446822833EEB8191BF201E61, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_XNJ6, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TimelineIdleRotation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TurretWeaponID, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, AutoActivateOnMapStart_, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_EBIY, 0x04C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, MaxRotSpeedWhenTargetLocked, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, DeltaTime, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, LaserLocation, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, IdleRotationDegreeClockwise, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, BarrelLength_Pitch_Corrector, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, MinLookAnglePitch, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, MaxLookAnglePicth, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, InRangeAndOnSight, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UseActivationDeactivationTriggers_, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UseReTrigger_Switch_OFF_, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_L0UF, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Tag_Laser, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ActivateTriggerState, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_UFWD, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, RetriggerTurret_Delay, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_53CZ, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, FoundTargetObjectComponent, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, FoundTargetObjectHitResult, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ShotFireHitResult, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, StartRotBaseTurret, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, StartRotBaseMount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Clamp_Yaw_Min_on_Follow_target, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Clamp_Yaw_Max_on_Follow_target, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, IdleDurationForCompleteRotateForwAndBack, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, NewPlayRateForIdleRotation, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Shell_Life_Time, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Visialize_Shells_, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, OnlyFollowLockedTargetInMaxTurretIdleRotation_, 0x064D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, MoveWhenIdle_, 0x064E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, MoveWhenTargetOnSightEvenWhenNotMovingOnIdle, 0x064F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, SimplyShootOnEveryTargetInAttackRangeWithoutUsingForwardLaserScannerCheck, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, LaserPointerOn__only_the_visual_effect, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_0G8J, 0x0652);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, RangeTimer, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TraceStartLoc_LaserShootFire, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TraceEndLoc_LaserShootFire, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UseSphereTraceToSimulateConeOfView, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_M0VN, 0x0679);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, SphereRadiusWhenUsingSphereTrace, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, FoundPossibleActorsInSphereAndTransform, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TimerForTestAllInSphereForTraceLine, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, FoundComponentsAndHitResult, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, AllSphereTraceHits, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TraceStartLoc_Sphere, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TraceEndLoc_Sphere, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, DelayEachSphereTraceEvaluation, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UsedInterpSpeed, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TurretShoudRotateBackToX_, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_2L18, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ActualRotForTurret_OnRotateBackToX, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ActualRotForMount_OnRotateBackToX, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ToleranceWhenGoBackToX, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ShootEverythingMovingInForwardTunnel, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_R4TM, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Trace_Start_Loc_For_Check_Movments, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Trace_End_Loc_For_Check_Movments, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ShootOnlyPawns_, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, UnknownData_FINE, 0x0795);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, CounterForClearMap, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, NewTimeLineTime, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, Investigator, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, TargetInLaserDetectionAngle, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Laser_Base_C, ActorLeftRange, 0x07A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Turret_Laser_Base_C, 0x07AA);
		}

		// class ABP_PhysicsExplodable_C : public ABP_PhysicsEnabledStaticMesh_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PhysicsExplodable__BP_PhysicsExplodable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UnknownData_RUOH, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, OptionalCustomExplosionLocation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, SpawnDebrisLocationBase, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, AudioComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, RadialForce, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, PiercedFireDirectionArrow, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, BP_ExplodableComponent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, PiercedFireDirectionTransform, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, BlastRadialImpulseOnExplosion, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DebugShowRadiusImpulse, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DebugShowRadiusExplodeDamage, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UnknownData_NUR1, 0x0303);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, RadialForceComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, PhysImpulseRadius, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, PhysImpulseStrength, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DoOptionalSprayShellFragmentsAsProjectiles_, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UnknownData_7LW6, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DamageToGetPierced, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DamageToTriggerExplode, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, MinHitsToExplodeRegardlessOfDamge, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DamageExplosionRadialBaseDamage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DamageExplosionRadialMinimalDamage, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DamageExplosionInnerRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DamageExplosionOuterRadius, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, PiercedStateSound, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, ExplosionEffectScale, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, TimeAfterExplosiveGotPiercedTillExplosionStarts, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DelayWhenExplodeTriggersUntilExplosionStarts, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UnknownData_JKXE, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, ExplosionDeathEffect, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DebrisMeshesSpawnOnExplode, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DebrisDefaultsSpawnImpulseCollision, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, CanCharacterStepUpDebris, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UseOptionalCustomExplosionLocation, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, IsExplodedAlready_, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UnknownData_9U7E, 0x03B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, AllSceneComponents, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, TMP_SkelMeshAndMeshComponents, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, DebugVisualizeExplosionRadius, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, UnknownData_F4P3, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsExplodable_C, VisualizeOuterExplosiveRadius, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PhysicsExplodable_C, 0x03E8);
		}

		// class UW_LeaderboardFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LeaderboardFrame__W_LeaderboardFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, FadeIn, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_EndGameGoToLobby, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_EndGameRetryStartGameAgain_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_EndGameShowStatsBackToMenu, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_EndGameSwitchToShowStats, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_MenuLeaderBoardBack, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_MenuShowStatsBackToMenu, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_MenuSwitchToLeaderboard, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Bt_MenuSwitchToShowStats, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, BtEndGameSwitchToLeaderboard_2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, CongratulationsYouWinTB, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, CongratulationsYouWinTB_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Image_Line1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Image_Line1_OnlineSumStats, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Image_Line2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Image_Line2_OnlineSumStats, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Img_Background, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, LeaderWidgetSwitcherWinLooseTitle, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, MainMenuTitle, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, MapTB, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestRank_TB, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestScore_TB, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestScoreEnd_TB, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestScoreRank_TB, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestScoreSeperator_TB, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestSizeBox, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OldBestTitle_TextBlock, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, SizeBoxCurrentPlayer, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, StatsTitleRight, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, SwitcherContentLeaderOrMatchStats, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, Tb_BoxTiitleOnlineSumStats, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, tb_BoxTitle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, TeamScoreTB, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, VerticalBoxOnlineSumStats, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_Leaderboard_ArroundRank, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_Leaderboard_CurrentPlayer, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_Leaderboard_Friends, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_Leaderboard_HighScores, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsDeath, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsDeath_OnlineSumStats, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsExplosives, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsExplosives_OnlineSumStats, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsHeadshots, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsHeadshots_OnlineSumStats, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsKillInAir, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsKillInAir_OnlineSumStats, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsKills, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsKills_OnlineSumStats, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsMatchesLost_OnlineSumStats_2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsMatchesWon_OnlineSumStats_2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsPlaytime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsPlaytime_OnlineSumStats, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsRevived, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsRevived_OnlineSumStats, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsUnconscious, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_MatchStatsUnconscious_OnlineSumStats, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_SwitchButtonDifficulties, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_SwitchButtonMap, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_SwitchButtonPlayersCount, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, W_WarningNoOnlineSubsystemFrame, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, WB_Background, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, WB_Foreground, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, WidgetSwitcherMainFrameButtonLeader, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, WidgetSwitcherMainFrameButtonShowStats, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, PlayersWin_, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, UnknownData_FX9L, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, AudioComponentWinLoose, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, _1stSoundWinLoose, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, _2ndSoundWinLoose, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, BackupTeamScoreForCountnummers, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, TeamScoreInt, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, AlphaCountNumbers, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, UnknownData_9BPB, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, OnCountingNumbersFinished, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, MainMenuNotEndGame_, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, ShowStatsInsteadLeader_, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardFrame_C, ForceShowStatsAndGoBackOnly, 0x04DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LeaderboardFrame_C, 0x04DB);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_T34V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x07B8);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_62QM, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_BY5X, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_RME6, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_P1HC, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_15CI, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_OLQK, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_OZSH, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_JWCV, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_6Z3S, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_VLCV, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_00BS, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_E44N, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterialOverride, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_K8FU, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_5EQX, 0x067D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableReplication, 0x0692);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bEnableAbandonAfterLevel, 0x0693);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ReplicationAbandonClusterLevel, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RepData, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_230D, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_U80E, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x08F0);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_HIKU, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_QARG, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_H5OJ, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_9G2W, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_YZBO, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_QK3W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, GeometrySource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_BCZ6, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_KAH4, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_FJEF, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_80HO, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_LH3N, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00E0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_294F, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_GQ1H, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_OLS3, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_JLEL, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_GCV1, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_GFV7, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_2VJF, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_ZWID, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_LO82, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_W5UH, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_SY0O, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_SE2Z, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_D0G8, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class UWB_ChapterText_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ChapterText__WB_ChapterText_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, b_Description, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, b_Headline, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, b_TypeText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, CP_Base, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, SB_Content, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, T_Description, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, T_Headline, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, T_TypeText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterText_C, VB_Content, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ChapterText_C, 0x02B0);
		}

		// class ABP_AI_SpiderTank_Enemy_C : public ABP_AI_MechaBiped_Enemy_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AI_SpiderTank_Enemy__BP_AI_SpiderTank_Enemy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpiderTank_Enemy_C, UnknownData_TCLS, 0x0B16);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpiderTank_Enemy_C, UberGraphFrame, 0x0B18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AI_SpiderTank_Enemy_C, 0x0B20);
		}

		// class UW_WarningNoOnlineSubsystemFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_WarningNoOnlineSubsystemFrame__W_WarningNoOnlineSubsystemFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningNoOnlineSubsystemFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningNoOnlineSubsystemFrame_C, SetRenderOpacityVisible, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningNoOnlineSubsystemFrame_C, Border_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningNoOnlineSubsystemFrame_C, Border_Background, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningNoOnlineSubsystemFrame_C, T_Message, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningNoOnlineSubsystemFrame_C, T_Title, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_WarningNoOnlineSubsystemFrame_C, 0x0290);
		}

		// class UW_CreditsGroup_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_CreditsGroup__W_CreditsGroup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsGroup_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsGroup_C, GroupText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsGroup_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsGroup_C, VerticalBox_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsGroup_C, GroupInformation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsGroup_C, CreditsProperties_IsSetIn_WCreditsRoll, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_CreditsGroup_C, 0x0608);
		}

		// class UBP_ExplodableComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_ExplodableComponent__BP_ExplodableComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, PunctureVentingAudioComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, PunctureSound, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, PiercedFireDirectionArrow, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, MeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageToTriggerExplode, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, CurrentDamageAmount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, IsPiercedAlready_, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_NVMF, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, MinHitsToExplodeRegardlessOfDamge, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageToTriggerGotPierced, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, IsVentingFireAlready_, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, IsExplodedAlready_, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_6XJD, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, Explosion_Angle_Variance_VFX, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DoOptionalSprayShellFragmentsAsProjectiles_, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_WP73, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, SprayShellFragmentsRandomAngle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, SprayShellFragmentsCompleted, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_80XT, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageCounterDuration, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, AngleFX, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, ForceMultiplier, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_QJZC, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, ExplodingActorAsDamageInvestigator, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, LastDamageCauserToStartDamageEffect, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, OptionalSprayShellFragmentsAsProjectiles, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageExplosionRadialBaseDamage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageExplosionRadialMinimalDamage, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageExplosionInnerRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageExplosionOuterRadius, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, ExplosionEffect, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, ExplosionEffectScale, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, TimeAfterExplosiveGotPiercedTillExplosionStarts, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, VentFireParticle, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DelayWhenExplodeTriggersUntilExplosionStarts, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_K66K, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, PiercedFired, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DestroyedExplodeFired, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DebrisMeshesSpawnOnExplode, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, CanCharacterStepUpDebris, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_211S, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DebrisSpawnBaseTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DebrisDefaultsSpawnImpulseCollision, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UseOptionalCustomExplosionLocation_, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_VASQ, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, OptionalCustomExplosionLocation, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, CountOfHits, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DamageLocation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, TMP_OnGroundResult, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DoInstantExplodeWhenHitByFireExplosiveDamage_, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, MeshVisibilityAffectsChildren, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, DebugVisualizeExplosionRadius, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, UnknownData_NQMA, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, VisualizeOuterExplosiveRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, ExplosionSound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ExplodableComponent_C, Hit_Component, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ExplodableComponent_C, 0x0248);
		}

		// class UBP_CloseCombatWeapon_C : public UBP_Weapon_C
		TEST_METHOD(BlueprintGeneratedClass__BP_CloseCombatWeapon__BP_CloseCombatWeapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UnknownData_TKJA, 0x066E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DamagePerChargeLevel, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, IsCharging, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UnknownData_8UY5, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, CurrentChargeLevel, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, ChargeDurationUntilNextLevel, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, WeaponHolsteredRef, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, WeaponInHandRef, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, RelativeSwingHitCheckOffset, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, SwingHitSphereCheckRadius, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, NormalDamageType, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, FullChargedDamageType, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, CurrentChargeEffect, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, ChargeLevelUpEffect, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DefaultChargeEffect, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, FullChargeEffect, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DefaultChargeSoundLoop, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DefaultBaseSoundLoop, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, ChargeLevelUpSFX, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, FullChargeLevelUpSFX, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, FullChargeSoundLoop, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, ChargeSoundLoops, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, AlreadyHitActors, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, ChargingRepeatTimerHandle, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, TimeOfChargeTimer, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, CurrentChargedTime, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UnknownData_7WJD, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, TMP_SkelMeshAndMeshComponents, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DissolveMeshTick, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DissolveMeshAlphaState, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DissolveDriverTimer, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, DissolveMeshSpeed, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UnknownData_BVYT, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, CurrentChargeAnimation, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, CurrentChargeAnimationStartTime, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UnknownData_0683, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, AutomaticReleaseTimer, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, IsCurrentlyFullChargeSwinging, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, UnknownData_TYKK, 0x0791);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, SwingDuration, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CloseCombatWeapon_C, SetIsSwiningingFalseTimer, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CloseCombatWeapon_C, 0x07A0);
		}

		// class UBPI_CheckFriendFoeAndAttackableInterfaces_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_CheckFriendFoeAndAttackableInterfaces__BPI_CheckFriendFoeAndAttackableInterfaces_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_CheckFriendFoeAndAttackableInterfaces_C, 0x0028);
		}

		// class UBP_ATPC_ModeScript_PawnRotation_C : public UATPCCameraModeScript_PawnUseControllerRotation
		TEST_METHOD(BlueprintGeneratedClass__BP_ATPC_ModeScript_PawnRotation__BP_ATPC_ModeScript_PawnRotation_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ATPC_ModeScript_PawnRotation_C, 0x0048);
		}

		// class UWB_ShineSmall_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ShineSmall__WB_ShineSmall_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Opacityloop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Fade, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Img, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Image_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Image_3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineSmall_C, Image_4, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ShineSmall_C, 0x02A0);
		}

		// class UWB_ShineBig_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ShineBig__WB_ShineBig_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineBig_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineBig_C, Opacityloop, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineBig_C, Fade, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineBig_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineBig_C, Brush, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ShineBig_C, 0x0288);
		}

		// class ABP_MainMenu_Pawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BP_MainMenu_Pawn__BP_MainMenu_Pawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenu_Pawn_C, DefaultSceneRoot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MainMenu_Pawn_C, 0x0288);
		}

		// class UW_CreditsArtist_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_CreditsArtist__W_CreditsArtist_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsArtist_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsArtist_C, TextBlock_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsArtist_C, ArtistInformation_IsSetIn_WCreditsRoll, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsArtist_C, CreditsProperties_IsSetIn_WCreditsRoll, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_CreditsArtist_C, 0x0548);
		}

		// class UBPI_PlayerSettingsToPawn_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerSettingsToPawn__BPI_PlayerSettingsToPawn_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerSettingsToPawn_C, 0x0028);
		}

		// class UW_ScoreboardRow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ScoreboardRow__W_ScoreboardRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, BorderPositionNumber, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, FullRowBorder, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, ImageAvatar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PingTB, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PlayerDeathsTB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PlayerKillsTB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PlayerName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PlayerPointsTB, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PositionTB, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PlayerStateRefOfThisStatsRow, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, TimerGetPing, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, position, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, IsControllerPlayer, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, UnknownData_7Y5G, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ScoreboardRow_C, PlayerScore, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ScoreboardRow_C, 0x02CC);
		}

		// class UWB_SettingsButton_Content_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_SettingsButton_Content__WB_SettingsButton_Content_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton_Content_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton_Content_C, Image_2, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_SettingsButton_Content_C, 0x0270);
		}

		// class ABP_Wave_Gamemode_C : public ATPS_Wave_GameMode
		TEST_METHOD(BlueprintGeneratedClass__BP_Wave_Gamemode__BP_Wave_Gamemode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, DefaultSceneRoot, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, tmp_OnlinePlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, OnlinePlayers, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, CurrentRound, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, TMP_CountActualAIActors, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, MaxRoundtime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, IntervallRoundtime, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, CurrentElapsedRoundtime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_ND3U, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, RoundTimerHandle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, FinishedGmBeginPlayAndGameIsStarted, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, IsGameOver_, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_DTGN, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, MaxSubtractScoreOnPlayerUnconscious, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, MaxSubtractScoreOnPlayerDeadPerPlayer, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_QZS8, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, OnGameOverWin_GModeServerOnly, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, OnGameOverLoose_GModeServerOnly, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, LastRoundNumberToWin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_8DWV, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, OnGameStarts_GModeServerOnly, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, ChanceForDroppingHealthPickup, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, ChanceForDroppingWeaponPickup, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, ChanceForDroppingGrenadePickup, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, TempWeaponIdForDrop, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_U4BZ, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UsedChanceDropHealth, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UsedChanceDropWeapon, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UsedChanceDropGrenade, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, CountCalculationSinceLastWeaponDrop, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, CountCalculationSinceLastHealthDrop, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_140F, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, PlayersPawnList, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, NextWaveRoundIsStarted_GModeServerOnly, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, ElapsedTimeInCurrentWaveRound_GModeServerOnly, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, NewRoundTextSentToPlayersFinished_GModeServerOnly, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, CountCalculationSinceLastGrenadeDrop, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, AiMinValueOfWeaponDrops, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, AiMaxValueOfWeaponDrops, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, UnknownData_LAO6, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, DropTargetTransform, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, PawnKilled, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, GrenadeDropListSettings, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_Gamemode_C, CalculatedGrenadeDropList, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Wave_Gamemode_C, 0x04A8);
		}

		// class UBPI_Lobby_PlayerController_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Lobby_PlayerController_Interface__BPI_Lobby_PlayerController_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Lobby_PlayerController_Interface_C, 0x0028);
		}

		// class UMagicLeapIdentity : public UObject
		TEST_METHOD(Class__MagicLeapIdentity__MagicLeapIdentity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapIdentity, UnknownData_AZFR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapIdentity, 0x0038);
		}

		// class ABP_ProjectileEffectOnHitBase_Rocket_AI_Robot_C : public ABP_ProjectileEffectOnHitBase_Rocket_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_Rocket_AI_Robot__BP_ProjectileEffectOnHitBase_Rocket_AI_Robot_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_Rocket_AI_Robot_C, 0x03C0);
		}

		// class ABP_Grenade_Spawn_Base_C : public ABP_Grenade_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_Spawn_Base__BP_Grenade_Spawn_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Spawn_Base_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Spawn_Base_C, ActorToSpawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Spawn_Base_C, SpawnProjectileVisuals, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_Spawn_Base_C, 0x02B8);
		}

		// class ABP_AiCrowdJumping_C : public ADetourCrowdAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_AiCrowdJumping__BP_AiCrowdJumping_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AiCrowdJumping_C, 0x0328);
		}

		// class UBP_SaveGame_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__BP_SaveGame__BP_SaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveGame_C, UnknownData_MW8V, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveGame_C, PlayerPosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveGame_C, BlocksPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveGame_C, IsHavePlayerPosition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveGame_C, UnknownData_EJUV, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveGame_C, PlayerInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SaveGame_C, 0x0090);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_LB7E, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class UW_MainFrameButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MainFrameButton__W_MainFrameButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, UnknownData_6APP, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Image_OptionalIconImage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Image_SelectArrow, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, SizeBox_OptionalIconImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, SizeBox_SelectArrow, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, TextBlock_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Text, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, H_Color, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, Description, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, ID, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, IsEnabled, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, IsBackButton, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, IsBackToMainMenuSpecialWithoutQuestioningButton, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, UnknownData_3I2X, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, OptionalIconImage, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainFrameButton_C, SetOptionalIconOn_, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MainFrameButton_C, 0x0359);
		}

		// class UWB_State_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_State__WB_State_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Last_Text_FadeOut, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Last_Text_FadeIn, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Next_Text_FadeIn, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Next_Text_FadeOut, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, B_Text_State, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ButtonLeft, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ButtonRight, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, HB_NavOverview, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Img_Left, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Img_Right, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, SB_Left, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, SB_NavOverview, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, SB_Right, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Text_State, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, OnHovered, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, bUseFocus, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UnknownData_CI4M, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ButtonIconSize, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ButtonIconColor_Clicked, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ResponsiveHovering, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UnknownData_J79D, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, OptionStates, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, MaxStateCount, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NewStateCount, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, OnStateChanged, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Font_Normal, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, FontFace_Normal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, FontSize_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, FontColor_Normal, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ButtonIconColor_Normal, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UnknownData_F3Y2, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, Font_Hovered, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, FontFace_Hovered, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, FontSize_Hovered, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, FontColor_Hovered, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, ButtonIconColor_Hovered, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UnknownData_JJ0G, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NavStateMap, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NavStateColor_Normal_Active, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NavStateColor_Hovered_Active, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UseNavOverview, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UnknownData_LJIT, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NavOverviewRoom, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NavStateColor_Normal_Inactive, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NavStateColor_Hovered_Inactive, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, bIsHovered, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, UnknownData_2POB, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_State_C, NewStateName, 0x043C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_State_C, 0x0444);
		}

		// class UW_Setting_BrightnessFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_BrightnessFrame__W_Setting_BrightnessFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, W_Back, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, W_Master, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, W_ResChang, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, W_ResDef, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, W_WarningFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, WidgetSwitcher_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, SaveSettings, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, SettingsBufer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, UnknownData_H4PS, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_BrightnessFrame_C, GameInstance, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_BrightnessFrame_C, 0x02F8);
		}

		// class UWB_Icon_A_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_A__WB_Icon_A_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_A_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_A_C, 0x0268);
		}

		// class AATPCArrowDebugActor : public AActor
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCArrowDebugActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCArrowDebugActor, SceneRootcomponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCArrowDebugActor, ArrowComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCArrowDebugActor, UnknownData_YNIF, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AATPCArrowDebugActor, 0x0238);
		}

		// class UATPCCameraBaseObject : public UObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraBaseObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraBaseObject, OwningCamera, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraBaseObject, 0x0030);
		}

		// class UATPCCameraComponent : public USceneComponent
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, OnCameraModeChangedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, DebugRules, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, UnknownData_YQ77, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, DefaultCameraModeTag, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, CameraModesAssets, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, SortedCameraModes, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, CustomCameraMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, UnknownData_GFMD, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, LocationObjectClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, FOVObjectClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, FadingObjectClass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, FollowTerrainObjectClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, CameraShakesObjectClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, LockOnTargetObjectClass, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, LocationObject, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, FOVObject, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, FadingObject, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, FollowTerrainObject, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, CameraShakesObject, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, LockOnTargetObject, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, CameraObjList, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, UnknownData_3JXA, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, EmptyCameraMode, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraComponent, CameraModeDEV, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraComponent, 0x0600);
		}

		// class UATPCCameraFadingObject : public UATPCCameraBaseObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraFadingObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraFadingObject, UnknownData_4UP6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraFadingObject, 0x00E0);
		}

		// class UATPCCameraFollowTerrainObject : public UATPCCameraBaseObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraFollowTerrainObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraFollowTerrainObject, UnknownData_EBZA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraFollowTerrainObject, 0x0070);
		}

		// class UATPCCameraFOVObject : public UATPCCameraBaseObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraFOVObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraFOVObject, 0x0030);
		}

		// class UATPCCameraLocationObject : public UATPCCameraBaseObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraLocationObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraLocationObject, UnknownData_GR4N, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraLocationObject, 0x0260);
		}

		// class UATPCCameraLockOnTargetObject : public UATPCCameraBaseObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraLockOnTargetObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraLockOnTargetObject, OnTargetChangeDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraLockOnTargetObject, UnknownData_N2BZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraLockOnTargetObject, TargetDebugActor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraLockOnTargetObject, UnknownData_OL7F, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraLockOnTargetObject, 0x0080);
		}

		// class UATPCCameraModeDataAsset : public UDataAsset
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraModeDataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeDataAsset, CameraModeTag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeDataAsset, CameraModeSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeDataAsset, CameraModeScripts, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraModeDataAsset, 0x0340);
		}

		// class UATPCCameraModeScript : public UObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraModeScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript, OwningCamera, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript, bEnableTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript, UnknownData_CCXA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript, TickGroup, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript, UnknownData_IIPD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript, UnknownData_BE25, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraModeScript, 0x0040);
		}

		// class UATPCCameraModeScript_ChangeMovementSpeed : public UATPCCameraModeScript
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraModeScript_ChangeMovementSpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_ChangeMovementSpeed, NewMaxMovementSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_ChangeMovementSpeed, bRestoreOldMovementSpeedOnExitCameraMode, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_ChangeMovementSpeed, UnknownData_8H00, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_ChangeMovementSpeed, OldMaxMovementSpeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_ChangeMovementSpeed, UnknownData_3F63, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraModeScript_ChangeMovementSpeed, 0x0050);
		}

		// class UATPCCameraModeScript_PawnUseControllerRotation : public UATPCCameraModeScript
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraModeScript_PawnUseControllerRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_PawnUseControllerRotation, OrientRotationToMovement, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_PawnUseControllerRotation, UseControllerDesiredRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_PawnUseControllerRotation, bRestoreOldValuesOnExitCameraMode, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_PawnUseControllerRotation, OldOrientRotationToMovement, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_PawnUseControllerRotation, OldUseControllerDesiredRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_PawnUseControllerRotation, UnknownData_W2MO, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraModeScript_PawnUseControllerRotation, 0x0048);
		}

		// class UATPCCameraModeScript_RotateActorToTarget : public UATPCCameraModeScript
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraModeScript_RotateActorToTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_RotateActorToTarget, RotationSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraModeScript_RotateActorToTarget, UnknownData_WRUS, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraModeScript_RotateActorToTarget, 0x0048);
		}

		// class UATPCCameraShakesObject : public UATPCCameraBaseObject
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraShakesObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCCameraShakesObject, UnknownData_FSGW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCCameraShakesObject, 0x0040);
		}

		// class AATPCCameraVolume : public AVolume
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCCameraVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCCameraVolume, CameraModeTag, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCCameraVolume, bChangeCameraModeWithInterp, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCCameraVolume, bCheckFilterActorClassWithCamera, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCCameraVolume, UnknownData_L4SU, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::AATPCCameraVolume, FilterActorClassesWithCamera, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AATPCCameraVolume, 0x0278);
		}

		// class UATPCFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCFunctionLibrary, 0x0028);
		}

		// class UATPCLockOnTargetLocationComponent : public USceneComponent
		TEST_METHOD(Class__AdvancedThirdPersonCamera__ATPCLockOnTargetLocationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UATPCLockOnTargetLocationComponent, UnknownData_AD5H, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UATPCLockOnTargetLocationComponent, 0x0200);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_I8X7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyBinding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_S59G, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00A8);
		}

		// class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__FloatChannelEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatChannelEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_SUPN, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_1I9L, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0088);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0088);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_P15F, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_4MLZ, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathTrack, UnknownData_C3SS, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0090);
		}

		// class UMovieScenePropertySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, InstantiatorSystem, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertySystem, UnknownData_8250, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_XJBD, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_60F3, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_EP6N, 0x0739);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0740);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00A8);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0228);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceTrack, UnknownData_5G56, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00B0);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_61HM, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bLooping, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_4A2Q, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0338);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_V3KG, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0090);
		}

		// class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBaseValueEvaluatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBaseValueEvaluatorSystem, 0x0040);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolTrack, UnknownData_8SFL, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00B0);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_719Q, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00B8);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_U64Q, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_PC42, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0090);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_0JNC, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bLockPreviousCamera, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_KP8I, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_U238, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, InitialCameraCutTransform, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, bHasInitialCameraCutTransform, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, UnknownData_WEHV, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0160);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_QGFO, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0090);
		}

		// class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrackInstance, UnknownData_ND57, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrackInstance, 0x00B8);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_WWXT, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_7UKT, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeSection, ShakeData, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeSection, 0x0108);
		}

		// class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, UnknownData_KHN5, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceShakeTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerSection, Channel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerSection, 0x0170);
		}

		// class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, UnknownData_XVLV, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSourceTriggerTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSourceTriggerTrack, 0x0090);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_OXV7, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0090);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0088);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_CBVZ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_DG9I, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00B8);
		}

		// class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentInvalidatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentInvalidatorSystem, 0x0040);
		}

		// class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentAttachmentSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentAttachmentSystem, UnknownData_8UFL, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentAttachmentSystem, 0x01C0);
		}

		// class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMobilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMobilitySystem, UnknownData_D3OJ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMobilitySystem, 0x0220);
		}

		// class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreAnimatedComponentTransformSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePreAnimatedComponentTransformSystem, UnknownData_5CUP, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedComponentTransformSystem, 0x01C0);
		}

		// class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentTransformSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentTransformSystem, 0x0050);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_7H8M, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00B8);
		}

		// class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformPropertySystem, 0x0050);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x00A8);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, UnknownData_B8W7, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0118);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSystem, UnknownData_RO2B, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSystem, 0x0090);
		}

		// class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePreSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostSpawnEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostSpawnEventSystem, 0x0090);
		}

		// class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePostEvalEventSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePostEvalEventSystem, 0x0090);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_S6B1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_C2KK, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_4J7T, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0098);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, UnknownData_AQS1, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0178);
		}

		// class UMovieSceneFadeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FloatCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_7URB, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00A8);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeTrack, UnknownData_6XNR, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00B0);
		}

		// class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatPropertySystem, 0x0050);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_P4YW, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0190);
		}

		// class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalBiasSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalBiasSystem, 0x0040);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerTrack, UnknownData_4BO3, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00B0);
		}

		// class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneInterrogatedPropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, UnknownData_8SIK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneInterrogatedPropertyInstantiatorSystem, 0x01E8);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_24NG, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_QBKK, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0108);
		}

		// class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySystem, UnknownData_THNE, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySystem, 0x01A8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0088);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0088);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, UnknownData_U2W4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0098);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_E2G6, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_KDE4, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0098);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A8);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, UnknownData_54WT, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00B8);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_IPC2, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0090);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_IL21, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0090);
		}

		// class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePiecewiseFloatBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePiecewiseFloatBlenderSystem, UnknownData_UC07, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePiecewiseFloatBlenderSystem, 0x0120);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A8);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_66PK, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_41IQ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00B8);
		}

		// class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyInstantiatorSystem, UnknownData_1PO8, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyInstantiatorSystem, 0x0290);
		}

		// class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneQuaternionInterpolationRotationSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneQuaternionInterpolationRotationSystem, 0x0040);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_XHLU, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartLocationOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartRotationOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchWithPrevious, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_S0FO, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedBoneName, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedLocationOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, MatchedRotationOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchTranslation, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchIncludeZHeight, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationYaw, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationPitch, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, bMatchRotationRoll, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_CP5U, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x0270);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_LE5K, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_5LLO, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, RootMotionParams, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bBlendFirstChildOfRoot, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_GHHE, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoTrack, UnknownData_2SDA, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00B0);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringTrack, UnknownData_48HS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00B0);
		}

		// class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOriginSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTransformOriginSystem, UnknownData_L4MH, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOriginSystem, 0x0078);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00A8);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_0TMF, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_UR54, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_6VQE, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00B8);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00B0);
		}

		// class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneHierarchicalEasingInstantiatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, UnknownData_5ULE, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneHierarchicalEasingInstantiatorSystem, 0x0090);
		}

		// class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieSceneTracks__WeightAndEasingEvaluatorSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeightAndEasingEvaluatorSystem, UnknownData_E2OX, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightAndEasingEvaluatorSystem, 0x0078);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class UNiagaraScriptBase : public UObject
		TEST_METHOD(Class__NiagaraShader__NiagaraScriptBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptBase, 0x0028);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_5UUB, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x02C0);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_6Z12, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class AAI_Character_Base_Enemy_Pawn_C : public AAll_Characters_Base_Class
		TEST_METHOD(BlueprintGeneratedClass__AI_Character_Base_Enemy_Pawn__AI_Character_Base_Enemy_Pawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_XISX, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UberGraphFrame, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, GunFirePivot, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BP_DissolveComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BP_StatusEffectsBaseComponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, StaticMeshSpcialEvent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AIPerception, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Rattle_Stereo, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Rattle_Jump_Stereo, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Rattle_Jump_Mono, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Jump_Voice_End, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Jump_Voice_Start, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Foot_Jump, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Footsteps, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DissolveEffect_DissolveProgress_CEDBE9BB44F59558EE0F879AE810D29C, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DissolveEffect__Direction_CEDBE9BB44F59558EE0F879AE810D29C, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_0XPR, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DissolveEffect, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, PhatBlend2_alpha_96B9E74541C02EBAEE3C458DD024A84C, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, PhatBlend2__Direction_96B9E74541C02EBAEE3C458DD024A84C, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_W9J7, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, PhatBlend2, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Footsteps_Volume, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Rattle_Volume, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Type_of_Floor, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Voice_Jump_Volume, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IsMale, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Footsteps_Play, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Rattle_Play, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_CDOV, 0x056B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, LeanAngleInterp, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SpawnLocation, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IsInCanNOTAttackState_, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IsDead, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_RFDS, 0x057E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AttackDamage, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, CurrentHealth, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BulletDirection, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Bullet_Hit_Bone, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AttackHitRangeFromPlayerToAttackStrikeBone, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Max_Health, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, CanBeKilledBySingleHeadShot_, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_R28C, 0x05A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, GotHeadShotMultiplier, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_SRHA, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AttackDamageType, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Attack_Animations_Array, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, OptionalAnimationOnSeePlayer, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Damage, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ShortlyDidPlayerSeeAnimation_, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___DoAnimationWhenFirstSeePlayer_, 0x05D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_D2HP, 0x05D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___Slower_Speed, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___Walk_Speed, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___Run_Speed, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_1BZ7, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TimerForNotSeenPlayerLongEnough, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___RadiusOfWalkRandomPointAtSpawn, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Seconds_Chasing_behind_Not_seen_anymore_Target, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoardRef, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Ai_Controller_Ref, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___Should_move_arround_on_Spawn_Location_, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_0O38, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, HeavyImpulseBone, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DamageCauserLocation, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BaseImpulseOnDeathHitWhenHeadshot, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BaseImpulseOnDeathHit, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BulletPowerImpulseCurve, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Investigator, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DamageCauser, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IsHeadShot, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ChasingTarget, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_ZM9L, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, NavigatableRadiusForSpawnManager, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, bEnemyAISetBySpawnManager, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_FAS6, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, StartAtNumberForSpawnManager, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, PathReferenceNeededForSpawnManagerPathFollow, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___SightRange, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___HearingRange, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ParentClassOfAllPlayers, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MaxImpulseLengthOverall, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AnimBPSlotFullBodyWhenNotMoving, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_RUD2, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TMP_NewAISensedFoe, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SkelletonType4HitReact, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_P4RY, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, StartBoneOfPhysSimOnHit, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, EndBoneOfPhysSimOnHit1, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, EndBoneOfPhysSimOnHit2, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ImpulseMultiplierCorrection, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BoneToGiveImpulseOnHit, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, HitBone, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ChanceForDroppingHealthPickup, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ChanceForDroppingWeaponPickup, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ChanceForDroppingGrenadePickup, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ScoreMultiplierOnGetKilledByPlayer_AsFactor, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MinValueOfWeaponDrops, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TempWeaponIdForDrop, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_SQSG, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MaxValueOfWeaponDrops, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_958P, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MyUnpossesd_Event, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoard___GotDamagedFromPossibleTarget2, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoard___Know_Target_actual_or_last_Location, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoard___TargetActor, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoard___AI_is_seeing_sense_valid_Target, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoard___LastSeenTargetLocation, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BlackBoard___AiTemporarilyLostSightOfTarget, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, KnownTargetFoes, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, Min_ValueMultiplierRangeCalcForActualTarget, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___UsedWeaponType, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_36J0, 0x0765);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___MaxDistanceToTargetAfterStopAttack, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___MinDistanceToTargetToStartAttack, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, StartWithDisabledAI, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DebugOutputOn_, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DebugOutputNavigationOn_, 0x0772);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_S2QI, 0x0773);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AiPerceptionStimulus, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DisabledAIAttacks, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_GHLX, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TimerCheckForNearestPlayer, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ExtraFootstepsSoundOverSurface, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, HitArrayRemovedDoubleActors, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TempHitActorList, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ControllerWhoKills, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AiOnDeath, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, LastSenseTag, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SoundImpactOnAttackHit, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, EasyAttackSoundWithoutAnimNotify, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, EasyAttackSoundWithoutAnimNotifyDelayBeforeSound, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DisableAIPawnMovement, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UseAiMoveToTargetDebug, 0x081D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SpawnWithAISensesOff, 0x081E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_V4XN, 0x081F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BKP_MeshCollisionProfileName, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BKP_CapsuleCollisionProfileName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SetToNotHitableByBulletStrikeAndProjectile_, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_Y17Y, 0x0831);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SeeTargetSpecialEventFinished, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SensedTargetLocButTDoNotSeePlayerEventFinished, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, GotDamagedByHiddenTargetSpecialEventFinished, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AI_Settings___TimerSecToDoAgainFirstSeePlayerAnim, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, HitWasRadialDamage, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_D7QR, 0x086D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ShotComeFrom, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_I4Q2, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TMP_SkelMeshAndMeshComponents, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, CounterIfStuck, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_T30N, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BoneNamesCountAsHeadshot, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UseAimingPitchCalcOfBaseAiAlgorithm, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_NM4G, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TempNewAimingPitchClamped, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AimPitchInterpSpeed, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, PlayerBoneAimForAimingPitch, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_FTJS, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, WeaponSkelMeshRef, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AiBehaivorTreeUsed, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TargetFoe4SyncToClients, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, AiPercAndBtAreDisabled, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_50AN, 0x08D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DamageTypeOfHit, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MindControlledBy, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MindControllDurationLeft, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, MindControllDurationComplete, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IsMindControlled, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_F97Y, 0x0941);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IngameShortEnemyName, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_CJRD, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, TMP_SourceActorOrDamageCausedActor, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, CurrentSpeedMultiplierByEffect, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ActiveWalkingSpeedWithoutEffectsAffected, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, BkpWeaponComponentShotPerSeconds, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, WeaponsAreSlowedDown, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, ShowBlood, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_0S2P, 0x09B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, DissolveDebugTest, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UseGunFirePivotInsteadWeapMeshLocAsPitchPivotCalcBase, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, IgnoreAllSetFocusOnTargetFromBehaivorTree, 0x09C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, UnknownData_9H1X, 0x09C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Character_Base_Enemy_Pawn_C, SocketOrBoneToAttachGunFirePivot, 0x09C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAI_Character_Base_Enemy_Pawn_C, 0x09CC);
		}

		// class UWB_ProMainMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ProMainMenu__WB_ProMainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, FadeVisibility, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, FadeTabToRight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, FadeTabToLeft, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, FadeGlobal, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, FadeCaptureCharacter, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Audio, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Continue, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Controls, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Credits, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Gameplay, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Home01, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Home02, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Home03, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_NewGame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Quit, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_SelectChapter, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Button_Video, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Img_Background, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Img_CaptureCharacter, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Img_Icon_LB, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, Img_Icon_RB, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, InfoButton_Select01, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, TabButton_Custom_01, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, TabButton_Custom_02, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, TabButton_Home, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, TabButton_Options, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, TabButton_Play, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Background, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Foreground, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WS_Global, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WS_Info, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WS_Tabs, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Options_Gameplay, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, CurrentTabButton, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Options_Controls, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Options_Video, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Options_Audio, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, CaptureCharacter, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, CurrentTabAnimIndex, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, UnknownData_2NAV, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_Options_Credits, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_PatchNotes, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, WB_SelectChapter, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, ClickedSound, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProMainMenu_C, HoveredSound, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ProMainMenu_C, 0x03C8);
		}

		// class UWB_Options_KeyRebinding_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Options_KeyRebinding__WB_Options_KeyRebinding_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, Button_ResetDefault, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, InfoButton_Select01, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping01, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping02, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping03, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping04, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping05, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping06, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping07, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping08, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping09, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_ActionMapping10, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping01, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping02, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping03, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping04, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping05, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping06, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping07, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping08, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping09, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, KeyButton_AxisMapping10, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, SB_Tabs, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, Scroll_KeyBindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, TextButton_Controls, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, TextButton_KeyBindings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, TextButton_MainMenu, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, TextButton_Options, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, WB_Foreground, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, OnClicked_Back, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, FocusTimer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_KeyRebinding_C, bIsMainMenu, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Options_KeyRebinding_C, 0x0381);
		}

		// class UBP_ShootCamShake_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__BP_ShootCamShake__BP_ShootCamShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShootCamShake_C, 0x0180);
		}

		// class AMainMenu_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__MainMenu__MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMainMenu_C, UberGraphFrame, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMainMenu_C, 0x0230);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_JOD9, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_TAR9, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_0WP8, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_2GSH, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_FYXP, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x0500);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_RJUY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class UMagicLeapEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapEyeTracker__MagicLeapEyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_RPSC, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_NI6Q, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_1LSI, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_UJ1H, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UABP_DefaultUe4_AI_Enemy_AnimBP_child_C : public UABP_AI_EnemyCharacter_Base_AnimBP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_DefaultUe4_AI_Enemy_AnimBP_child__ABP_DefaultUe4_AI_Enemy_AnimBP_child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_DefaultUe4_AI_Enemy_AnimBP_child_C, 0x1121);
		}

		// class UW_TimerWarningFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_TimerWarningFrame__W_TimerWarningFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrame_C, W_Cancel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrame_C, W_Save, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrame_C, OnSave, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrame_C, OnCancel, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_TimerWarningFrame_C, 0x0298);
		}

		// class ABP_TwigPeople_AI_Enemy_C : public AAI_Character_Base_Enemy_Pawn_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TwigPeople_AI_Enemy__BP_TwigPeople_AI_Enemy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, UnknownData_JBLX, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, UberGraphFrame, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, ChildActorTeleportationBP_DEPR, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, SphereColAIPredictPlayerRadius, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, SpawnedSlowDownParticleEffect, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, WhisperingLoopSound, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, TeleportedShortTimeBefore, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, UnknownData_38SE, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, ChildActorBpTeleporterReplicated, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, PlayerSlowDownEffectTime, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TwigPeople_AI_Enemy_C, PlayerSlowDownSpeedDecreaseAsFactor, 0x0A0C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TwigPeople_AI_Enemy_C, 0x0A10);
		}

		// class UW_ChooseMapWidget_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ChooseMapWidget__W_ChooseMapWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, UnknownData_L82S, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Border_Arrowleft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Button_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Button_ArrowLeft, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Button_ArrowRight, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, ComboBoxString_Map, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Image_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, SizeBox_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, TextBlock_1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, GameInstance, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, H_Color, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, Choose_a_Map, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, IsServer, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, UnknownData_DQ9C, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChooseMapWidget_C, LastSetMap, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ChooseMapWidget_C, 0x0358);
		}

		// class ABP_PlayerState_RE_Wave_C : public APlayerState
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerState_RE_Wave__BP_PlayerState_RE_Wave_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, UberGraphFrame, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, DefaultSceneRoot, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, OwnPlayernameDEPR, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerScore, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerGotDeath, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerGotUnconscious, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerKills, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerAvatarTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsAvatarUpdated, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsScoresUpdated, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsNameUpdated, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsGotUnconsciousUpdated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, SteamID_depricated_notReplicatedAnymore, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, IsReady, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, IsInDeadSpectatorMode_1, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, UnknownData_1O7F, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerKillsHeadshots, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerKillsExplosives, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerRevivedOtherPlayer, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsGotDeathUpdated, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsKillsUpdated, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsKillsHeadshotUpdated, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsKillsExplosiveUpdated, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsKillsInAirUpdated, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerStatsRevivedOtherPlayerUpdated, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerState_RE_Wave_C, PlayerKillsInAir, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerState_RE_Wave_C, 0x041C);
		}

		// class UAboveHeadPlayernameWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AboveHeadPlayernameWidget__AboveHeadPlayernameWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, BleedOutTimer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, PlayerArrow, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, PlayerNameTextBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, ReviveImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, ReviveText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, PlayerStateRef, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, PlayerReference, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, MyPlayerImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, MyPlayerCharacterImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, Green, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, Red, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, OwningPlayer, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, OwningPlayerState, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, PlayerNameColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAboveHeadPlayernameWidget_C, PlayerName, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAboveHeadPlayernameWidget_C, 0x0320);
		}

		// class UW_InGameMenu_C : public UW_MasterWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_InGameMenu__W_InGameMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_AnswerFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_InGameFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_LeaderboardFrameEndGameScreen, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_LeaderboardFrameRunningGameStats, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_BrightnessFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_ControlsFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_DisplayFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_GameplayFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_KeysFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_PlayerSettingsFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_ScreenFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_Setting_SoundFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, W_SettingsFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, WidgetSwitcher_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, CurrentActiveWidget, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, Sequncer, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, OnResume, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameMenu_C, ButtonID, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_InGameMenu_C, 0x0310);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UW_LogNotificationElement_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LogNotificationElement__W_LogNotificationElement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, TextBlock_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, TextBlock_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, VerticalBox_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, Title, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, Body, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, Color, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, RemoveNotification, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, NotificationId, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, UnknownData_URQZ, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LogNotificationElement_C, SubNotifications, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LogNotificationElement_C, 0x02E8);
		}

		// class ABP_GM_MainMenu_C : public AGameModeBase
		TEST_METHOD(BlueprintGeneratedClass__BP_GM_MainMenu__BP_GM_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GM_MainMenu_C, DefaultSceneRoot, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GM_MainMenu_C, 0x02C8);
		}

		// class UW_LobbyParent_C : public UW_MasterWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LobbyParent__W_LobbyParent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyParent_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyParent_C, W_LobbyFrame, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LobbyParent_C, 0x0280);
		}

		// class UW_MatchStatsRow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MatchStatsRow__W_MatchStatsRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MatchStatsRow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MatchStatsRow_C, StatIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MatchStatsRow_C, tbStatName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MatchStatsRow_C, tbStatValue, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MatchStatsRow_C, IconTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MatchStatsRow_C, StatsName, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MatchStatsRow_C, 0x02A0);
		}

		// class UW_SliderButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_SliderButton__W_SliderButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, UnknownData_RNCP, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Border_Arrowleft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Button_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Button_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Button_ArrowRight, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Image_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, SizeBox_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, TextBlock_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, TextBlock_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Text, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Color, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, H_Color, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Description, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, MinValue, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, MaxValue, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, Step, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, UnknownData_QE6B, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, OnChangeValue, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SliderButton_C, StartDeactivatedAndWithoutArrows, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_SliderButton_C, 0x0371);
		}

		// class UWB_Options_Controls_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Options_Controls__WB_Options_Controls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Button_KeyBindings, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Button_ResetDefault, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Image_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, InfoButton_LB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, InfoButton_RB, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Option_InvertX, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Option_InvertY, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Option_MouseSensi_01, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Option_MouseSensi_02, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Option_MouseSensi_03, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, Option_MouseSensi_04, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, SB_Tabs, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, TextButton_Controls, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, TextButton_MainMenu, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, TextButton_Options, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, WB_Foreground, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, OnClicked_Back, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, FocusTimer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, WB_Options_KeyRebinding, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Controls_C, bIsMainMenu, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Options_Controls_C, 0x0319);
		}

		// class UBPI_PlayerNameAboveWidget_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerNameAboveWidget__BPI_PlayerNameAboveWidget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerNameAboveWidget_C, 0x0028);
		}

		// class UW_LobbyPlayerRowButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LobbyPlayerRowButton__W_LobbyPlayerRowButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, UnknownData_8H6Q, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, T_Ping, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, TextBlock_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, TextBlock_3, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, Color, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, H_Color, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, OnAdminMenu, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, PlayerName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, PlayerPing, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, IsReady, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, UnknownData_ZPT9, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyPlayerRowButton_C, PlayerController, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LobbyPlayerRowButton_C, 0x0340);
		}

		// class UGeneral_Character_Pawn_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__General_Character_Pawn_Interface__General_Character_Pawn_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneral_Character_Pawn_Interface_C, 0x0028);
		}

		// class UW_SupportUs_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_SupportUs__W_SupportUs_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, RichTextBlockDE, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, RichTextBlockEN, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, TextBlock_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, VerticalBox_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Back, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_4, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_5, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_6, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_7, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_Credits_8, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, W_SwitchButtonLanguage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SupportUs_C, WidgetSwitcherTextLang, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_SupportUs_C, 0x0310);
		}

		// class ABP_PickupBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PickupBase__BP_PickupBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, WidgetChild, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, SphereTrigger, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, LocationAlpha_Alpha_E2F71C4A4481CFA932C3CAA26310EF20, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, LocationAlpha__Direction_E2F71C4A4481CFA932C3CAA26310EF20, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_1YZ4, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, LocationAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TimelineShrinkAndRemove_NewTrack_0_E4A471024A8087AC52E64FB1FD64C5D7, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TimelineShrinkAndRemove__Direction_E4A471024A8087AC52E64FB1FD64C5D7, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_LJOL, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TimelineShrinkAndRemove, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, LifeTime, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, CurrentLifetime, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TimeIntervall, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, AutoPickup, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_DDVF, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TextLocation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_1RLJ, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, ItemText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, PickupActionNameForInputKey, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_9954, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, OptionalOverwriteLifeTime, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, CallAchievemntOnPickUp, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, CallAchievemntForAllPlayers_, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, AchivementToCallOnPickup, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_H616, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, IsPickedUp, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TransistionVisualParticleEffect, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TransistionVisualStartPosition, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, UnknownData_WCK8, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TransistionVisualRef, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PickupBase_C, TransistionVisualParticleReference, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PickupBase_C, 0x02E0);
		}

		// class AHUD_ShootingGameplay_C : public AHUD
		TEST_METHOD(BlueprintGeneratedClass__HUD_ShootingGameplay__HUD_ShootingGameplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD_ShootingGameplay_C, UberGraphFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD_ShootingGameplay_C, DefaultSceneRoot, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD_ShootingGameplay_C, 0x0320);
		}

		// class UBP_Save_Gameplay_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_GamePlay_Settings__BP_Save_Gameplay_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Gameplay_Settings_C, Default_Settings_Gameplay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Gameplay_Settings_C, Settings_Gameplay, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_Gameplay_Settings_C, 0x0048);
		}

		// class UBP_Save_DisplayImportant_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_DisplayImportant_Settings__BP_Save_DisplayImportant_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_DisplayImportant_Settings_C, Default_Settings_Display, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_DisplayImportant_Settings_C, Settings_Display, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_DisplayImportant_Settings_C, 0x0080);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_GM11, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_3NVN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_GCA1, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class UBTTask_PrintStringLog_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_PrintStringLog__BTTask_PrintStringLog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PrintStringLog_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PrintStringLog_C, StringToLog, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PrintStringLog_C, 0x00C0);
		}

		// class UBTDecorator_IsRangedRifleEnemyAI_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IsRangedRifleEnemyAI__BTDecorator_IsRangedRifleEnemyAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsRangedRifleEnemyAI_C, TrueIfRangeRifleEnemy_, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsRangedRifleEnemyAI_C, 0x00A1);
		}

		// class ASmokeTrail_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SmokeTrail_BP__SmokeTrail_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeTrail_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeTrail_BP_C, Audio, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeTrail_BP_C, ParticleSystem, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASmokeTrail_BP_C, DefaultSceneRoot, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASmokeTrail_BP_C, 0x0240);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_BE7U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_GWCA, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_DA8Z, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_MEDW, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_W7OR, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_Q10G, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_FARC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_KDZT, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_JX67, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_6FCK, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_LCXP, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_YXFG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_UMTI, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_ZFZE, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_VPVT, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_YV7H, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_TGC6, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_2Y6K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_ZFKI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class UDatasmithDecalComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithDecalComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, SortOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, DecalSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDecalComponentTemplate, Material, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDecalComponentTemplate, 0x0048);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_06BH, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_1A9I, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_T0C1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_76I2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_FVT6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_3H52, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_V8TJ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_7M4X, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_ARZ4, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_NL48, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_6WX6, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, bVisible, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_XHKT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_I1UU, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00F0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_MJIN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_XI2X, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_3NP6, 0x0874);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x08A0);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_PT6N, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_VB5P, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D80);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_LNEF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x00F0);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_VJZ1, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0180);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_MHP2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00E0);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_G57N, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_16UD, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x00A8);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_6TFW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x00B0);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_G7D9, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x00D0);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_AKCR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x00A8);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_ODMX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x00A0);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_AEIX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x00A0);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_7J1J, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x00B0);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_Z4N7, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x00D0);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_FFWT, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00C0);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_22RP, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x00D8);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_JBWR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x00A0);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, bTrueStereo, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_8MYM, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_0MTQ, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00F0);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_XVVB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_TD5S, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x00B8);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_I9A8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x00A8);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_LVRS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x00B0);
		}

		// class USubmixEffectMultibandCompressorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectMultibandCompressorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, UnknownData_KR4U, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectMultibandCompressorPreset, Settings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectMultibandCompressorPreset, 0x00D0);
		}

		// class USubmixEffectStereoDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, UnknownData_INVF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectStereoDelayPreset, Settings, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectStereoDelayPreset, 0x00D8);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_2RT2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_5009, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00D8);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_XZD9, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_NE7G, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_OCXI, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_X1H6, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A80);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_ZLXL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_QGHA, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_AR7Z, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_CURH, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E00);
		}

		// class USynthComponentToneGenerator : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentToneGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Frequency, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, Volume, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentToneGenerator, UnknownData_B1FK, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentToneGenerator, 0x06E0);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_Y0SG, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x07F0);
		}

		// class USynthesisUtilitiesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__SynthesisUtilitiesBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthesisUtilitiesBlueprintFunctionLibrary, 0x0028);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_28J7, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_2G4S, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_B7KS, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class UMagicLeapARPinComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, ObjectUID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UserIndex, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, AutoPinType, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, bShouldPinActor, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_DHU1, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinDataClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, SearchPinTypes, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, SearchVolume, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinned, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinLost, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPinDataLoadAttemptCompleted, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedCFUID, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedSceneComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinData, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_JJ5L, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinComponent, 0x03B0);
		}

		// class UMagicLeapARPinFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinFunctionLibrary, 0x0028);
		}

		// class AMagicLeapARPinInfoActorBase : public AActor
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinInfoActorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, PinId, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, bVisibilityOverride, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActorBase, UnknownData_9Y80, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinInfoActorBase, 0x0238);
		}

		// class AMagicLeapARPinRenderer : public AActor
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinRenderer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, bInfoActorsVisibilityOverride, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, UnknownData_VMHO, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, AllInfoActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, UnknownData_XCMO, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinRenderer, ClassToSpawn, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinRenderer, 0x0288);
		}

		// class UMagicLeapARPinSettings : public UObject
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UpdateCheckFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, OnUpdatedEventTriggerDelta, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSettings, 0x0040);
		}

		// class UMagicLeapARPinSaveGame : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinnedID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_2Y2F, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, ComponentWorldTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, bShouldPinActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, UnknownData_K5GL, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSaveGame, 0x00B0);
		}

		// class UMagicLeapARPinContentBindings : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinContentBindings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinContentBindings, AllContentBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinContentBindings, 0x0078);
		}

		// class UMagicLeapPlanesComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryFlags, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SearchVolume, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MaxResults, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinHolePerimeter, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinPlaneArea, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryType, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_0QRM, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SimilarityThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_3P0E, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPlanesQueryResult, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPersistentPlanesQueryResult, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_G0C3, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesComponent, 0x0260);
		}

		// class UMagicLeapPlanesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesFunctionLibrary, 0x0028);
		}

		// class ATurret_Basic_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Turret_Basic__Turret_Basic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, MuzzleFlash, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, Turret, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, WarningLight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, Mount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, Base, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, Projectile, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, RotSpeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, FireRate, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, AttackRange, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, BarrelLength, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, MinLookAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, MaxLookAngle, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, DeltaTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, ConstructionVisuals, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, InRange, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, UseTrigger_, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, UseReTrigger_, 0x027F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, Tag_Basic, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, ActivateTrigger, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, UnknownData_EYA5, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_Basic_C, RetriggerTurret, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurret_Basic_C, 0x0290);
		}

		// class UBPI_Wave_Gamemode_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Wave_Gamemode_Interface__BPI_Wave_Gamemode_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Wave_Gamemode_Interface_C, 0x0028);
		}

		// class UWB_Options_Gameplay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Options_Gameplay__WB_Options_Gameplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Button_ResetDefault, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, InfoButton_LB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, InfoButton_RB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_GameplayOption_02, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_GameplayOption_03, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_GameplayOption_04, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_GameplayOption_05, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_GameplayOption_06, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_GameplayOption_07, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, Option_ShowHUD, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, SB_Tabs, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, TextButton_Gameplay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, TextButton_MainMenu, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, TextButton_Options, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, WB_Foreground, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, OnClicked_Back, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, FocusTimer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Gameplay_C, bIsMainMenu, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Options_Gameplay_C, 0x0311);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_8RG2, 0x04D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04E0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SMSM, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_QCMA, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_IIS2, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_3UHY, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_5D40, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_GPSP, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_9P6I, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CIF4, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_7JCS, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_LSTC, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4DMB, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_FE89, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CY5T, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SZT2, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_F0GK, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilWriteMask, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_M05O, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_QLAD, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_6SSO, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Z9YB, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0598);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0598);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeLODStreamingProxy : public UStreamableRenderAsset
		TEST_METHOD(Class__Landscape__LandscapeLODStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLODStreamingProxy, UnknownData_GQ3S, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLODStreamingProxy, 0x0068);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_CXPV, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_41X1, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODStreamingProxy, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_TGIL, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_MKN9, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_Z244, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0660);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_25J5, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0440);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_QLDL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_J7CD, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_LEDV, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_6L7M, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_ZOZE, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0520);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_48RV, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_PCNC, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_NDJC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_5EBH, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_3GUK, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0380);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_W0U4, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0540);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_45C5, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0500);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_J7CG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0470);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_B76G, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_53Q5, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_2CZQ, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x05B8);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_VRGC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0048);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_5V5W, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_0YNU, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_TMSI, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_5H2H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_YNO2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_31EO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_PU87, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_BZ0Q, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_XF6M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapePhysicalMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapePhysicalMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapePhysicalMaterialOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class ABP_Grenade_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_Base__BP_Grenade_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, Body, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, Root, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, ProjectileMovement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, GrenadeName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, TriggerTimerDuration, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, UnknownData_XV7P, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, GrenadeMesh, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, DestroySelfDelayAfterExplosionTrigger, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, ThrowImpulseValue, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, Friction, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, Bounciness, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, GravityScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, ShouldBounce, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, UnknownData_2DI8, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, Speed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, UnknownData_H3UP, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, GrenadeHUDIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Base_C, ExplosionCountdownTimer, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_Base_C, 0x0298);
		}

		// class UBPI_Chargeable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Chargeable__BPI_Chargeable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Chargeable_C, 0x0028);
		}

		// class UBP_PauseMenu_Functions_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_PauseMenu_Functions__BP_PauseMenu_Functions_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PauseMenu_Functions_C, 0x0028);
		}

		// class UBP_Keybinding_Functions_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_Keybinding_Functions__BP_Keybinding_Functions_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Keybinding_Functions_C, 0x0028);
		}

		// class UW_Leaderboard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Leaderboard__W_Leaderboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, Players, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, TitleTB, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, CopyOfChildrenToSort, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, SortLoopCounter, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, UnknownData_3B1R, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, CopyOfChildrenLeaderBoardRowToSort, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, NextHighLeaderFound, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, UnknownData_RXNX, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, NextlHighLeaderRowFound, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, TitleLeaderboard, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, ShouldPositionDisplayTheGlobalLeaderboardRanking_, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, UnknownData_JIJR, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Leaderboard_C, MaxCountOfPlayersForThisBoard, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Leaderboard_C, 0x02D0);
		}

		// class UW_ParentButtons_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ParentButtons__W_ParentButtons_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, OnHovered, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, OnPressed, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, IsButtonHovered, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, IsMouseHovered, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, IsPaused, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, UnknownData_LNRU, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, W_MasterWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, OnBack, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, ButtonStyleCategory, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentButtons_C, IsInNonHoverModeWritingMode, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ParentButtons_C, 0x02AA);
		}

		// class UWB_NativeButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_NativeButton__WB_NativeButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, Native_Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, PreviewBorder, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnClicked, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnHovered, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnUnhovered, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnPressed, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnReleased, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, bMouseEntered, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, UnknownData_BU3B, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnDisabled, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnClicked_Sound, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnHovered_Sound, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, ResponsiveHovering, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, UnknownData_MIHP, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnFocused, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NativeButton_C, OnUnfocused, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_NativeButton_C, 0x0318);
		}

		// class UBPI_UiUmgWidgets_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_UiUmgWidgets__BPI_UiUmgWidgets_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_UiUmgWidgets_C, 0x0028);
		}

		// class UW_Setting_GameplayFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_GameplayFrame__W_Setting_GameplayFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, W_Back, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, W_BloodSwitch, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, W_ResChang, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, W_ResDef, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, W_WarningFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, WidgetSwitcher_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, SaveSettings, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, SettingsBufer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, GameInstance, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_GameplayFrame_C, ConstructorRunAlready, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_GameplayFrame_C, 0x02F9);
		}

		// class UWB_ProgressButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ProgressButton__WB_ProgressButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, B_FillColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, b_ProgressOption, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Frame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, OptionButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_Text, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, SB_Content, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, SB_Progress, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, SB_ProgressText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, WB_Progress, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ButtonName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ProgressDefaultValue, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ProgressMinValue, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ProgressMaxValue, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UnknownData_ZTG7, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ProgressDefinition, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ButtonSize, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_OptionFont_Normal, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_OptionFontFace_Normal, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_OptionFontSize_Normal, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_TextColor_Normal, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_FrameColor_Normal, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_FillColor_Normal, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UnknownData_MNRA, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_OptionFont_Hovered, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_OptionFontFace_Hovered, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_OptionFontSize_Hovered, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_TextColor_Hovered, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_FrameColor_Hovered, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Button_FillColor_Hovered, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, IsEnabled, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UnknownData_J0JE, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ButtonSound_Clicked, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, ButtonSound_Hovered, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_Font_Normal, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_FontFace_Normal, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_FontSize_Normal, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_FontColor_Normal, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UnknownData_IKI3, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_Font_Hovered, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_FontFace_Hovered, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_FontSize_Hovered, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, Progress_FontColor_Hovered, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, bResponsiveFocus, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UnknownData_E08V, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, MultiState_TextRoom, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, MultiState_OptionRoom, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, bUseGamepadFocus, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, UnknownData_CNI0, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ProgressButton_C, OnProgressChanged, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ProgressButton_C, 0x0400);
		}

		// class UWB_TextButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_TextButton__WB_TextButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, SB_NativeButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, WB_NativeButton, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, WB_Text05, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnClicked, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnHovered, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnUnhovered, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnPressed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnReleased, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, Font_Normal, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, TypeFace_Normal, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontSize_Normal, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, UnknownData_0QZW, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, Font_Hovered, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, TypeFace_Hovered, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontSize_Hovered, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, UnknownData_3WOX, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, Font_Clicked, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, TypeFace_Clicked, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontSize_Clicked, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontColor_Clicked, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, Duration_Clicked, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, ButtonText, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontColor_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontColor_Hovered, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, IsEnabled, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, ButtonJustification, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, bDetectInput, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, UnknownData_QXTE, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, Font_Disabled, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, TypeFace_Disabled, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontSize_Disabled, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, FontColor_Disabled, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, UnknownData_HMV3, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnDisabled, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, Timer_TextSizeCheck, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnClicked_Sound, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnHovered_Sound, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, ClickableArea_Scale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, IsDesignTime, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, UnknownData_MG6R, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnFocused, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, OnUnfocused, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, ClickableSizeToContent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, bUseGamepadFocus, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TextButton_C, bResponsiveFocus, 0x03EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_TextButton_C, 0x03EB);
		}

		// class ABP_DefaultBulletProjectile_C : public ABP_Projectile_Base_extensions_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DefaultBulletProjectile__BP_DefaultBulletProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, Bullet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, ProjectileBulletFlybySound, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, Projectile, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, BulletSpeed, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, MaxLifetime, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, Damage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, SizeFactorOfParticleEffect, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, SpeedFactor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DefaultBulletProjectile_C, ShowBlood, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DefaultBulletProjectile_C, 0x0265);
		}

		// class ABP_Grenade_AOE_BodyShield_C : public ABP_Grenade_AOE_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_BodyShield__BP_Grenade_AOE_BodyShield_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_BodyShield_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_BodyShield_C, Shield_Health, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_BodyShield_C, Shield_Duration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_BodyShield_C, Shield_Type_Color, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_BodyShield_C, 0x0384);
		}

		// class ABP_ProjectileEffecOnHit_BoltShotgun_C : public ABP_ProjectileEffectOnHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffecOnHit_BoltShotgun__BP_ProjectileEffecOnHit_BoltShotgun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffecOnHit_BoltShotgun_C, 0x02D9);
		}

		// class ABP_SpectatorPawn_C : public ASpectatorPawn
		TEST_METHOD(BlueprintGeneratedClass__BP_SpectatorPawn__BP_SpectatorPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SpectatorPawn_C, UberGraphFrame, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SpectatorPawn_C, 0x02B0);
		}

		// class AAI_Base_Enemy_Controller_WithBlackBoard2_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__AI_Base_Enemy_Controller_WithBlackBoard2__AI_Base_Enemy_Controller_WithBlackBoard2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Base_Enemy_Controller_WithBlackBoard2_C, UberGraphFrame, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Base_Enemy_Controller_WithBlackBoard2_C, SelfControlledPawn, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAI_Base_Enemy_Controller_WithBlackBoard2_C, 0x0338);
		}

		// class ABP_AiTargetPoint_C : public ATargetPoint
		TEST_METHOD(BlueprintGeneratedClass__BP_AiTargetPoint__BP_AiTargetPoint_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AiTargetPoint_C, 0x0220);
		}

		// class UBP_SaveSettings_Base_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__BP_SaveSettings_Base__BP_SaveSettings_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SaveSettings_Base_C, SavedGames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SaveSettings_Base_C, 0x0038);
		}

		// class UBP_Save_QualityUe4Scalability_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_QualityUe4Scalability_Settings__BP_Save_QualityUe4Scalability_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_QualityUe4Scalability_Settings_C, Default_Settings_Quality_Scalability, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_QualityUe4Scalability_Settings_C, Settings_Quality_Scalability, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_QualityUe4Scalability_Settings_C, 0x0080);
		}

		// class UW_AnswerFrame_Button_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_AnswerFrame_Button__W_AnswerFrame_Button_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, UnknownData_9RDS, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, Color, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, H_Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_Button_C, OnUnhovered, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_AnswerFrame_Button_C, 0x0328);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_X3U4, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class UWB_Foreground_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Foreground__WB_Foreground_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, b_Particles, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, Image_2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, Image_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, RasterMask, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, WB_ShineFX, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, WB_ShineFX_C_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, WB_ShineFX_C_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, WB_ShineFX_C_3, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Foreground_C, bUseBaseColor, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Foreground_C, 0x02A9);
		}

		// class UW_ParentWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ParentWidget__W_ParentWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentWidget_C, IsActive, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentWidget_C, UnknownData_UIAV, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentWidget_C, OnPressedButtons, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ParentWidget_C, OnHoveredButtons, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ParentWidget_C, 0x0290);
		}

		// class UWB_PlayButton_Content_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_PlayButton_Content__WB_PlayButton_Content_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_Content_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_Content_C, Image_2, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_PlayButton_Content_C, 0x0270);
		}

		// class USG_AudioSettings_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__SG_AudioSettings__SG_AudioSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, MasterVolume, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, MusicVolume, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, DialogueVolume, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, SoundEffectsVolume, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, OutputProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, bMusic, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_AudioSettings_C, bSubtitles, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USG_AudioSettings_C, 0x003E);
		}

		// class UW_WeaponIconSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_WeaponIconSlot__W_WeaponIconSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, HighlightSlotAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, HotKeyOutput, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, RetainerBox_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, WeaponSlot_1_KeyIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, WeaponSlot_1_WeaponIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, WeaponSlotNumber, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, PreConstructionIsActiveWeapon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, UnknownData_ASFG, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, PreConstructionWeaponTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WeaponIconSlot_C, IsCloseCombatSlot, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_WeaponIconSlot_C, 0x02B9);
		}

		// class ABP_AI_Stationary_Point_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_AI_Stationary_Point__BP_AI_Stationary_Point_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_Stationary_Point_C, Direction, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_Stationary_Point_C, Location_Visualization, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_Stationary_Point_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AI_Stationary_Point_C, 0x0238);
		}

		// class UBTTask_ToggleFocusOnTarget_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_ToggleFocusOnTarget__BTTask_ToggleFocusOnTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ToggleFocusOnTarget_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ToggleFocusOnTarget_C, TargetActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ToggleFocusOnTarget_C, SetFocusOn_, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ToggleFocusOnTarget_C, 0x00D9);
		}

		// class UBTDecorator_IsRangedHeavyMiniGunEnemyAI_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IsRangedHeavyMiniGunEnemyAI__BTDecorator_IsRangedHeavyMiniGunEnemyAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsRangedHeavyMiniGunEnemyAI_C, TrueIfHeavyMiniGunEnemy_, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsRangedHeavyMiniGunEnemyAI_C, 0x00A1);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_8PIF, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_H93I, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_EVZ3, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_A4XP, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_CY9G, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06C0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_P6AP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class UQuartzClockHandle : public UObject
		TEST_METHOD(Class__AudioMixer__QuartzClockHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzClockHandle, UnknownData_8M5L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzClockHandle, 0x0190);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_7YYA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0130);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_H7MN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x00B0);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_P9N3, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x0110);
		}

		// class UQuartzSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__AudioMixer__QuartzSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuartzSubsystem, UnknownData_0HUC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuartzSubsystem, 0x0080);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_2TU8, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x03E0);
		}

		// class ULiveLinkMagicLeapHandTrackingSourceFactory : public ULiveLinkSourceFactory
		TEST_METHOD(Class__MagicLeapHandTracking__LiveLinkMagicLeapHandTrackingSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkMagicLeapHandTrackingSourceFactory, 0x0028);
		}

		// class UMagicLeapHandTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandTracking__MagicLeapHandTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandTrackingFunctionLibrary, 0x0028);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_Z419, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_10EK, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_4UFT, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_2BED, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_K9DP, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_KCRD, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_M5DW, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_MGLD, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_UR5R, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_F5TW, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_0G3I, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_5S6J, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_XJ8L, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0A50);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_F034, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_VDNJ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_9QPA, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_SKHC, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_7KJM, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_RMIY, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0290);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UPropertyAccess : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyAccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyAccess, 0x0028);
		}

		// class UPropertyEventBroadcaster : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventBroadcaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventBroadcaster, 0x0028);
		}

		// class UPropertyEventSubscriber : public UInterface
		TEST_METHOD(Class__PropertyAccess__PropertyEventSubscriber)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyEventSubscriber, 0x0028);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_2Y0Z, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_OJ6X, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_GU1R, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_DE65, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_LA7X, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0428);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0428);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_6IDU, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_5302, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_QJUN, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0428);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_D4BG, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_I94H, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_YMMM, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_Q9DR, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreaWarningSizeThreshold, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_OTNG, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_G98A, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_Z1D4, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_IODU, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x15BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_0M24, 0x15C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x15E0);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_RR1R, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_XDMG, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_K1AS, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_UCFO, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_S5IL, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_7MOH, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_1A65, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_09I7, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_LAPP, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_NYTN, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_XGUS, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0460);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_YM5X, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_0FFU, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_22GX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_KS82, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_S8S3, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_RKFN, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_QIG8, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_I8IM, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0440);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_8O9G, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_51SN, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0450);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_6OV9, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_BAA7, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, bMaskFillCollisionUnderneathForNavmesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_ICKP, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0270);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_II0G, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0440);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_9P3Z, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_AYFU, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_NP7A, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_2WMC, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_UGJZ, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04D8);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_XEM8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_61CV, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_HCZQ, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_YCEP, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_STIM, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_Z61B, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_5S5H, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_NJF1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_7DUI, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_VG3X, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_SXXY, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_3A7P, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_LQYC, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0270);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_7BXK, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_FTDC, 0x0463);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_XQQG, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0500);
		}

		// class UBP_DamageType_ExplosionFireRadial_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_ExplosionFireRadial__BP_DamageType_ExplosionFireRadial_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_ExplosionFireRadial_C, 0x0048);
		}

		// class UBPI_InteractionWidgetInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_InteractionWidgetInterface__BPI_InteractionWidgetInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_InteractionWidgetInterface_C, 0x0028);
		}

		// class ABP_Grenade_AOE_SpeedBoost_C : public ABP_Grenade_StatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_SpeedBoost__BP_Grenade_AOE_SpeedBoost_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_SpeedBoost_C, HittedActors, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_SpeedBoost_C, 0x0398);
		}

		// class ABP_Grenade_AOE_BodyShield_Tough_C : public ABP_Grenade_AOE_BodyShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_BodyShield_Tough__BP_Grenade_AOE_BodyShield_Tough_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_BodyShield_Tough_C, 0x0384);
		}

		// class ABP_GrenadeDeployedTurret_Base_C : public ABP_Turret_Laser_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GrenadeDeployedTurret_Base__BP_GrenadeDeployedTurret_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, UnknownData_CEYK, 0x07AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, UberGraphFrame, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, DeploymentAnimationMesh, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, CapsuleForTurretCollisionLegs3, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, CapsuleForTurretCollisionLegs2, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, CapsuleForTurretCollisionLegs1, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, AIPerceptionStimuliSource, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, DeploymentAnimationMontage, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, DeploymentFinishCheckLoop, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeDeployedTurret_Base_C, deploymentFinishedCheckFrequency, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GrenadeDeployedTurret_Base_C, 0x07F4);
		}

		// class UBP_NavArea_Jump_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_Jump__BP_NavArea_Jump_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_Jump_C, 0x0048);
		}

		// class UW_FindSessionButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_FindSessionButton__W_FindSessionButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, UnknownData_IPNY, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, T_Difficulty, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, T_Map, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, T_Ping, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, T_Players, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, T_PublicPrivate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, TextBlock_1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, Session, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, Color, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, H_Color, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionButton_C, OnJoinSession, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_FindSessionButton_C, 0x0440);
		}

		// class UW_NotificationsFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_NotificationsFrame__W_NotificationsFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, NewAnimation_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, VerticalBox_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, W_NotificationsLogFrame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, OnCloseNotifications, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, Notifications, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, AddNewNotification, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, NotificationAutoRemoveTimer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, IsLogOpened, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, IsReverse, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, UnknownData_FSG5, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationsFrame_C, NotificationTemplates, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_NotificationsFrame_C, 0x02C8);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_KYK3, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x00A0);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x04C0);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_8B1C, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_8BO8, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0228);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_QZBF, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x04B0);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0228);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_1GUG, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x04A0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_ZRHL, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_C564, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_87PJ, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_7TW4, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00A8);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0228);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_9YXT, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x0490);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0238);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_IRLC, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_FQZG, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_FS5X, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_13GF, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x04A0);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_XZQJ, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0550);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_ENJF, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_PJE4, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_21W0, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_E4C4, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_IFNZ, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0228);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_9JSI, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_CW96, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_MV4C, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x04C0);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class UBPI_PlayerControllerREWave_Intertface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerControllerREWave_Intertface__BPI_PlayerControllerREWave_Intertface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerControllerREWave_Intertface_C, 0x0028);
		}

		// class UBPI_PlayerChakaterPawnInterfaces_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerChakaterPawnInterfaces__BPI_PlayerChakaterPawnInterfaces_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerChakaterPawnInterfaces_C, 0x0028);
		}

		// class UWB_ChapterButton_Content_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ChapterButton_Content__WB_ChapterButton_Content_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_Content_C, Image_1, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ChapterButton_Content_C, 0x0268);
		}

		// class UW_PawnAdminAndCheatMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_PawnAdminAndCheatMenu__W_PawnAdminAndCheatMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, btnSetLastRoundToX, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, btSetLastRoundAndTeleport, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, CloseMenu, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, DropRandomGrenade, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, DropRandomWeapon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, DropRandomWeapon_3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, EditableTextSetLastRoundToAndTeleport, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, EditableTextSetLastRoundToX, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, EditableTextSetRoundToX, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, GrantExtremeHealth, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, HealSelf, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, KillAllEnemies, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, KillSelf, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, PlaceHolder3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, ResetLeaderboardEntryOfRunningMatch_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, ResetSteamStats_2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, ResetSteamStatsAndAchivements_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, ReviveSelf, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, SetCurrentRoundToLastRound, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, SetCurrentRoundToRound2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, SetCurrentRoundToRound5, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, SetCurrentRoundToRoundx, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, SpawnBoss, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, SwitchToSpectatorCam, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, TeleportToBeginOfLastRound, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, TraceAllEnemies, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, TriggerGameLoose, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, TriggerGameWin, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_PawnAdminAndCheatMenu_C, CloseAdminCheatMenu, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_PawnAdminAndCheatMenu_C, 0x0358);
		}

		// class ULayersBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ActorLayerUtilities__LayersBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayersBlueprintLibrary, 0x0028);
		}

		// class UBPI_DamageTypeInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_DamageTypeInterface__BPI_DamageTypeInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_DamageTypeInterface_C, 0x0028);
		}

		// class ABP_PlayerCharacter_AI_C : public ABP_PlayerCharacter_BPBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerCharacter_AI__BP_PlayerCharacter_AI_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerCharacter_AI_C, 0x0B30);
		}

		// class UW_Setting_DisplayFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_DisplayFrame__W_Setting_DisplayFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_Fov, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_Lim, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_MainFrameButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_Res, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_ResChang, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_ResDef, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_SM, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_VS, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, W_WarningFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, WidgetSwitcher_1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, SaveSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, SettingsBuffer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, UnknownData_T9E5, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, CustomListOfGameSupportedPossibleResolutions, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, UE4_ListOfGameSupportedResolutionsByMonitor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, ResultListOfResolutionsToChooseFrom, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, GameInstance, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, ConstructorRunAlready, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, FoundSupportedDisplayResolutionsByMonitor_, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, UnknownData_A9QT, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, CurrentDisplayDefaultResolutionIdOfResolutionsArray, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, FoundDefaultResolutionCurrent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, DefaultResolutionIsStillTheSameAsLastGameStart, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, SavedResolutionIsValid, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_DisplayFrame_C, DefaultResolutionIsValid, 0x037A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_DisplayFrame_C, 0x037B);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__DeveloperSettings__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_P4A9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UBP_Shield_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_Shield__BP_Shield_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, IsShieldActive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, UnknownData_178Q, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, CurrentShieldAmount, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, MaxShieldAmount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, DestroyShieldAfterDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, ShieldMeshReference, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, DestroyShieldMeshTimer, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, BootSound, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, HitSound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, BreakSound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, OffsetShieldEffectToSkin, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, UnknownData_FIFS, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, ShieldVisualAnimStateChange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, ShieldAnimState, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, UnknownData_NIBN, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shield_C, ShieldDefaultColor, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shield_C, 0x0118);
		}

		// class UW_ChatWindowLobby_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ChatWindowLobby__W_ChatWindowLobby_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChatWindowLobby_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChatWindowLobby_C, Button_Sent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChatWindowLobby_C, ChatEntrySubmitTextBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ChatWindowLobby_C, ChatLogScrollBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ChatWindowLobby_C, 0x0280);
		}

		// class UBP_DamageType_Mutant_Strike_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_Mutant_Strike__BP_DamageType_Mutant_Strike_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_Mutant_Strike_C, 0x0048);
		}

		// class ABP_Menu_PlayerController_C : public APlayerController
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_PlayerController__BP_Menu_PlayerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Menu_PlayerController_C, UberGraphFrame, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Menu_PlayerController_C, MainMenuWidgetInstance, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Menu_PlayerController_C, 0x0580);
		}

		// class AWeaponPickup_C : public ABP_PickupBase_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponPickup__WeaponPickup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, RotatingMovement, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, PointLight, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, SkeletalMesh, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, WeaponID, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, UnknownData_E4KS, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, PickupName, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, PickupSound, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWeaponPickup_C, AlreadyPickedUp, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponPickup_C, 0x0329);
		}

		// class AMagicLeapSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, SharedWorldData, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, OnNewLocalDataFromClients, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, PinSelectionConfidenceThreshold, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, UnknownData_LSKD, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameMode, ChosenOne, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameMode, 0x03D8);
		}

		// class AMagicLeapSharedWorldGameState : public AGameState
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, SharedWorldData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, AlignmentTransforms, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnSharedWorldDataUpdated, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldGameState, OnAlignmentTransformsUpdated, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldGameState, 0x02D0);
		}

		// class AMagicLeapSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapSharedWorldPlayerController, UnknownData_FZHE, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapSharedWorldPlayerController, 0x0588);
		}

		// class AMagicLeapARPinInfoActor_C : public AMagicLeapARPinInfoActorBase
		TEST_METHOD(BlueprintGeneratedClass__MagicLeapARPinInfoActor__MagicLeapARPinInfoActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Right, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Forward, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Up, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ValidRadiusVisualizer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, AxisRoot, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, VisualizerRoot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TypeValue, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TransErrValue, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotErrValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ConfidenceValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, TransErrLabel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotErrLabel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, ConfidenceLabel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, PinIDValue, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, InfoRoot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, Root, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMagicLeapARPinInfoActor_C, RotationSmoothSpeed, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMagicLeapARPinInfoActor_C, 0x02C4);
		}

		// class UWB_CreditsContainer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_CreditsContainer__WB_CreditsContainer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_CreditsContainer_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_CreditsContainer_C, OV_Content, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_CreditsContainer_C, OnCreditsFinished, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_CreditsContainer_C, CreditEntries, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_CreditsContainer_C, IsActive, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_CreditsContainer_C, 0x0291);
		}

		// class UWB_Text01_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Text01__WB_Text01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, b_Description, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, b_Headline, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, b_TypeText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, CP_Base, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, SB_Content, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, T_Description, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, T_Headline, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, T_TypeText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text01_C, VB_Content, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Text01_C, 0x02B0);
		}

		// class UBPi_ButtonSounds_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPi_ButtonSounds__BPi_ButtonSounds_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPi_ButtonSounds_C, 0x0028);
		}

		// class UBTTask_TriggerSeeTargetSpecialEvent_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_TriggerSeeTargetSpecialEvent__BTTask_TriggerSeeTargetSpecialEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TriggerSeeTargetSpecialEvent_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_TriggerSeeTargetSpecialEvent_C, 0x00B0);
		}

		// class UBTask_TryFirstSeenPlayerAnim_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_TryFirstSeenPlayerAnim__BTask_TryFirstSeenPlayerAnim_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_TryFirstSeenPlayerAnim_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_TryFirstSeenPlayerAnim_C, TargetActor, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_TryFirstSeenPlayerAnim_C, 0x00D8);
		}

		// class UBTask_SetAiKnownLastLocation_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_SetAiKnownLastLocation__BTask_SetAiKnownLastLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_SetAiKnownLastLocation_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_SetAiKnownLastLocation_C, Know_Target_actual_or_last_Location, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_SetAiKnownLastLocation_C, Set_KnowLocation_to_true_, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_SetAiKnownLastLocation_C, 0x00D9);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_RIBT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_UQT6, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaTimeStampInfo : public UObject
		TEST_METHOD(Class__MediaAssets__MediaTimeStampInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, Time, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTimeStampInfo, SequenceIndex, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTimeStampInfo, 0x0038);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_1TLH, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_ETCP, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_F9NF, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_CC7M, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_UQTO, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_DMCE, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_XN9G, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_85E2, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_4H1H, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08E0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_L6EM, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NewStyleOutput, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, OutputFormat, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentAspectRatio, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, CurrentOrientation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_33I1, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_3J1Z, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x01B0);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_FFKD, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnabledByDefault, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_65T5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_S4XE, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_SN8S, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UW_AchievementsRow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_AchievementsRow__W_AchievementsRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, AchievementName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, BorderOfIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, FullRowBorder, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, ImageIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, ImageIconTexture, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, Name, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, AchievmentUnlocked_, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, UnknownData_30V3, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsRow_C, ToolTip, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_AchievementsRow_C, 0x02B8);
		}

		// class UWB_Icon_RB_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_RB__WB_Icon_RB_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_RB_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_RB_C, 0x0268);
		}

		// class UWB_Text05_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Text05__WB_Text05_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text05_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text05_C, ButtonText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text05_C, HB_Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text05_C, EJustification, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Text05_C, 0x0279);
		}

		// class USG_InputDefaults_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__SG_InputDefaults__SG_InputDefaults_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_InputDefaults_C, ActionMappings_KeyboardMouse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_InputDefaults_C, AxisMappings_KeyboardMouse, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_InputDefaults_C, ActionMappings_Gamepad, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_InputDefaults_C, AxisMappings_Gamepad, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_InputDefaults_C, AxisMappingScales_KeyboardMouse, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_InputDefaults_C, AxisMappingScales_Gamepad, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USG_InputDefaults_C, 0x0188);
		}

		// class UWB_ChapterButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ChapterButton__WB_ChapterButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FadeFrameDynamic, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FadeFrameBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, b_ContentWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, b_FrameBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Frame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Frame_Dynamic, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Img_SettingsIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OV_Base, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OV_ContentWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SB_ContentWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SB_Frame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SB_Image, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SB_NativeButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SB_Text, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Text, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, WB_NativeButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, WB_PMM_B01_Image, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnClicked, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnHovered, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnUnhovered, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnPressed, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnReleased, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFont_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineTypeFace_Normal, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontSize_Normal, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_ZWSS, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFont_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineTypeFace_Hovered, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontSize_Hovered, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_6WYZ, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFont_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineTypeFace_Clicked, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontSize_Clicked, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_PFE5, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ButtonTypeText, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ButtonHeadline, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ButtonDescription, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontColor_Clicked, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontColor_Normal, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontColor_Hovered, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, IsEnabled, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_7WSY, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ButtonSize, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, bGamepadFocus, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, bDetectInput, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_P6LZ, 0x040E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFont_Disabled, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineTypeFace_Disabled, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontSize_Disabled, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, HeadlineFontColor_Disabled, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_ATFT, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnDisabled, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Timer_TextSizeCheck, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ContentWidget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnClicked_Sound, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnHovered_Sound, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, IsDesignTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_RONO, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameColor_Normal, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameColor_Hovered, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameColor_Clicked, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameColor_Disabled, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameShineColor_Normal, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameShineColor_Hovered, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameShineColor_Clicked, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameShineColor_Disabled, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameThickness_Normal, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Image, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageTranslation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageColor_Normal, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameBlockColor_Hovered, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageColor_Hovered, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameBlockColor_Clicked, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageColor_Clicked, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageColor_Disabled, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageSaturation_Normal, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageSaturation_Hovered, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageSaturation_Clicked, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, ImageSaturation_Disabled, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, VignetteColor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFont_Normal, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionTypeFace_Normal, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontSize_Normal, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontColor_Normal, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_6QHV, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFont_Hovered, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFont_Clicked, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFont_Disabled, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionTypeFace_Hovered, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionTypeFace_Clicked, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionTypeFace_Disabled, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontSize_Hovered, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontSize_Clicked, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontSize_Disabled, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontColor_Hovered, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontColor_Clicked, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, DescriptionFontColor_Disabled, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Scale_Hovered, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Scale_Clicked, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, NewScaleValue, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_0VG4, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnFocused, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, OnUnfocused, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, bResponsiveFocus, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_SHMO, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameThickness_Hovered, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Duration_Clicked, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, FrameThickness_Clicked, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFont_Normal, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFont_Hovered, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFont_Clicked, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFont_Disabled, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_TypeFace_Normal, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_TypeFace_Hovered, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_TypeFace_Clicked, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_TypeFace_Disabled, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_FontSize_Normal, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_FontSize_Hovered, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_FontSize_Clicked, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, Type_FontSize_Disabled, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFontColor_Normal, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFontColor_Hovered, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFontColor_Clicked, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, TypeFontColor_Disabled, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, bIsNativeHovering, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, UnknownData_HJC9, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SettingsIcon, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SettingsIconColor_Normal, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SettingsIconColor_Hovered, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SettingsIconColor_Clicked, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ChapterButton_C, SettingsIconColor_Disabled, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ChapterButton_C, 0x0738);
		}

		// class UWB_Icon_D_Down_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_D_Down__WB_Icon_D_Down_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_D_Down_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_D_Down_C, 0x0268);
		}

		// class UWB_TabButton01_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_TabButton01__WB_TabButton01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameFX_ClickedAnim, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, b_FrameFX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FillColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameFX_Clicked, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OV_Base, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OV_ContentWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, SB_ContentWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, SB_FillColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, SB_Frame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, SB_FrameFX, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, SB_NativeButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, SB_Text, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, WB_Frame02, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, WB_NativeButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, WB_Text03, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnClicked, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnHovered, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnUnhovered, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnPressed, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnReleased, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, Font_Normal, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, TypeFace_Normal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontSize_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_C9LB, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, Font_Hovered, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, TypeFace_Hovered, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontSize_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_9H22, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, Font_Clicked, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, TypeFace_Clicked, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontSize_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, Duration_Clicked, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, ButtonText, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontColor_Clicked, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontColor_Normal, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontColor_Hovered, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, IsEnabled, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, bDetectInput, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_ERYI, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, HintIcon, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, Font_Disabled, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, TypeFace_Disabled, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontSize_Disabled, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontColor_Disabled, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_SUSH, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnDisabled, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, Timer_TextSizeCheck, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, ContentWidget, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnClicked_Sound, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnHovered_Sound, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, ButtonSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, bGamepadFocus, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, IsDesignTime, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_G7WY, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameColor_Normal, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameColor_Hovered, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameColor_Clicked, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameColor_Disabled, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FillColor_Normal, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FillColor_Hovered, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FillColor_Clicked, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FillColor_Disabled, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameFX_Clicked_Color, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_GKOI, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnFocused, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, OnUnfocused, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, bResponsiveFocus, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, UnknownData_PQ9U, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontNormalCache, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, TypeFaceNormalCache, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontSizeNormalCache, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FontColorNormalCache, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FillColorNormalCache, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton01_C, FrameColorNormalCache, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_TabButton01_C, 0x0534);
		}

		// class UBP_MainMenu_Functions_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_MainMenu_Functions__BP_MainMenu_Functions_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MainMenu_Functions_C, 0x0028);
		}

		// class UWB_Options_Audio_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Options_Audio__WB_Options_Audio_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Button_ResetDefault, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, InfoButton_LB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, InfoButton_RB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_AudioProfile, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_DialogueVolume, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_EffectsVolume, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_MasterVolume, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_Music, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_MusicVolume, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, Option_Subtitles, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, SB_Tabs, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, TextButton_KeyBindings, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, TextButton_MainMenu, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, TextButton_Options, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, WB_Foreground, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, OnClicked_Back, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, FocusTimer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Audio_C, bIsMainMenu, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Options_Audio_C, 0x0311);
		}

		// class UBP_PMM_Instance_C : public UGameInstance
		TEST_METHOD(BlueprintGeneratedClass__BP_PMM_Instance__BP_PMM_Instance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, UberGraphFrame, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, bShowMouse, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, InputType, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, UnknownData_L5D0, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, UpdateInputType, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, bPauseMenuActive, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, UnknownData_VG5H, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, WB_PauseMenu, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, PlayerCharacter, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, bUseBaseColor, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, UnknownData_DHM6, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, BaseColor, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, bUseButtonSounds, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, UnknownData_4F7I, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, ButtonSound_Hovered, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, ButtonSound_Clicked, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_PMM_Instance_C, bEnableSetResolutionManually, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PMM_Instance_C, 0x0209);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_TOYK, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_O21Q, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_0CAR, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04D0);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_G2UG, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_D1I7, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_BJ4W, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_RDH3, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_HQHW, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UDeveloperSettings
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, FavoriteTagSource, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0050);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_OGGA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_1VIZ, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_34KV, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0480);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_M6LA, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_DSO9, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_4IQ3, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_B9CI, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_VUMY, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_P391, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_XEDW, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_7RN9, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_1AOB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_T1SO, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_TFCU, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_ZLH7, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_U8AL, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class UBPI_Dissolvable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Dissolvable__BPI_Dissolvable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Dissolvable_C, 0x0028);
		}

		// class UBPI_ToAnimBP_AI_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ToAnimBP_AI_Interface__BPI_ToAnimBP_AI_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ToAnimBP_AI_Interface_C, 0x0028);
		}

		// class UBPFL_EasyNotification_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BPFL_EasyNotification__BPFL_EasyNotification_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPFL_EasyNotification_C, 0x0028);
		}

		// class ABP_AI_MechaBiped_Enemy_C : public AAI_Character_Base_Enemy_Pawn_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AI_MechaBiped_Enemy__BP_AI_MechaBiped_Enemy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_ESSV, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UberGraphFrame, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SK_Missile_Type1_2, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SK_Missile_Type1_3, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SK_Missile_Type1_4, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SK_Missile_Type1_5, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SpecialEventPlane, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ExplosionLocation, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BP_ExplodableComponent, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ChildActorFlare4, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ChildActorFlare3, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ChildActorFlare2, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ChildActorFlare1, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BarrierShield, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SM_MechBiped_MissileRack_Left, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, SK_WeaponRightMiniGun, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BP_WeaponRightRockets, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BP_WeaponLeftMiniGun, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, RefillShaderAnimation_Progress_17C99ECB4F4E8D7C1B7A13AAE68A0CE4, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, RefillShaderAnimation__Direction_17C99ECB4F4E8D7C1B7A13AAE68A0CE4, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_SWZM, 0x0A5D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, RefillShaderAnimation, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ShrinkDeadMech_alpha01_71D6B0434E4EB6F8186DF38CC01FA318, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ShrinkDeadMech__Direction_71D6B0434E4EB6F8186DF38CC01FA318, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_2AOT, 0x0A6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, ShrinkDeadMech, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BKP_RelRot_MissleRack, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BKP_RelRot_MiniGun, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, StartInActivatedPosition, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, StartWithActivatedBarrierShield, 0x0A91);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, StartWithActivatedJetFlares, 0x0A92);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BarrierShieldActivated, 0x0A93);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, JetFlaresActivated, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, MechActivated, 0x0A95);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_P0KP, 0x0A96);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, DefaultBarrierShieldWorldScale, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_MOG9, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, JetFlaresChildBPs, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, JetFlareColor, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, JetFlareLightIntensMax, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, JetFlarePointLightRadius, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, JetFlareStartAlpha, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, BKP_ActorScale, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, StartMechAnim, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, IdleAnim, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, WeaponMovmentToggle, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, NextRocketSlotIndex, 0x0AE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_QZLF, 0x0AEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, RocketsSkeletalMeshArray, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, Weapon2Rockets, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, Weapon1MiniGun, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_XG8Z, 0x0B02);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, RocketMissleDelayMin, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, RocketMissleDelayMax, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, MissleRocketsUsable_, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, UnknownData_BC7N, 0x0B0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, DelayBetweenShotsMultiplierWhenWeaponSlowed, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, Use2dAimOffsetForFullBodySkelMeshAimOffset, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_MechaBiped_Enemy_C, Debug_Visualize_Explosion_Radius, 0x0B15);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AI_MechaBiped_Enemy_C, 0x0B16);
		}

		// class UW_AchievementsFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_AchievementsFrame__W_AchievementsFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, FadeIn, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, AchieveTB_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, Bt_MenuShowStatsBackToMenu, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, Img_Background, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, vbContentAchievements, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, WB_Background, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, WB_Foreground, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, PlayersWin_, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, UnknownData_F6VY, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, AudioComponentOpenAchievmentsListSound, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, _1stOpenAchievmentsListSound, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, _2ndOpenAchievmentsListSound, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, BackupTeamScoreForCountnummers, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, TeamScoreInt, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, AlphaCountNumbers, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, UnknownData_XJSI, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, OnCountingNumbersFinished, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, MainMenuNotEndGame_, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, ShowStatsInsteadLeader_, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, ForceShowStatsAndGoBackOnly, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, UnknownData_E58C, 0x0313);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, CurrentAchivementCount, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AchievementsFrame_C, CurrentHorBox, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_AchievementsFrame_C, 0x0320);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_DA91, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_Q0FF, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_BKM2, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_QRQ8, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_A5V4, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_OV4C, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_BQ7Q, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_YYMP, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_AK7J, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_GXXX, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_CAHY, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_O12H, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_Z36A, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_KQMZ, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0238);
		}

		// class UNiagaraDataInterfaceFieldSystem : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceFieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, BlueprintSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, FieldDimensions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MinBounds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, MaxBounds, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceFieldSystem, UnknownData_3PE8, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceFieldSystem, 0x0090);
		}

		// class UBP_GrenadeWeapon_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_GrenadeWeapon__BP_GrenadeWeapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, EquipedGrenadeType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, EquipedGrenadeAmount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, TrajectoryBeamUpdateFrequency, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, UpdateTrajectoryBeamTimer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, TrajectorySplineBP, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrenadeWeapon_C, IsInUse, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GrenadeWeapon_C, 0x00D9);
		}

		// class AAI_Base2_DetourCrowdAI_EnemyAi_C : public ADetourCrowdAIController
		TEST_METHOD(BlueprintGeneratedClass__AI_Base2_DetourCrowdAI_EnemyAi__AI_Base2_DetourCrowdAI_EnemyAi_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAI_Base2_DetourCrowdAI_EnemyAi_C, 0x0328);
		}

		// class UW_KeyBindingWidget_C : public UW_MasterInteractionWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_KeyBindingWidget__W_KeyBindingWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, KeyActionText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, KeyBindImage1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, KeyBindImage2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, KeyBindText1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, KeyBindText2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, TextBlockImageKey1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, TextBlockImageKey2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, Text_Size, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, UnknownData_6YSI, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, ActionText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyBindingWidget_C, ButtonText, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_KeyBindingWidget_C, 0x02E0);
		}

		// class UW_GrenadeIconSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_GrenadeIconSlot__W_GrenadeIconSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, SwitchActiveGrenadeSlot, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, HighlightSlotAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, GrenadeAmount_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, GrenadeAmount_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, HotKeyOutput, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, WeaponSlot_1_WeaponIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, WeaponSlot_1_WeaponIcon_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, WeaponSlotNumber, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, PreConstructionIsActiveWeapon, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, UnknownData_0BZR, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, PreConstructionWeaponTexture, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_GrenadeIconSlot_C, CurrentActiveSlotIsFirst, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_GrenadeIconSlot_C, 0x02C9);
		}

		// class UBP_DamageTyped_GunsPhysicalShots_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageTyped_GunsPhysicalShots__BP_DamageTyped_GunsPhysicalShots_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageTyped_GunsPhysicalShots_C, 0x0048);
		}

		// class UW_JoinSession_PopUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_JoinSession_PopUp__W_JoinSession_PopUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, T_Ping, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, T_Players, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, T_ServerName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, W_Back, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, W_JoinSession, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, OnBack, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, Session, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_JoinSession_PopUp_C, GameInstance, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_JoinSession_PopUp_C, 0x03B0);
		}

		// class UEQS_TargetFromBB_EnvQueryContext_C : public UEnvQueryContext_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__EQS_TargetFromBB_EnvQueryContext__EQS_TargetFromBB_EnvQueryContext_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQS_TargetFromBB_EnvQueryContext_C, 0x0030);
		}

		// class UW_FindSessionFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_FindSessionFrame__W_FindSessionFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, Border_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, Empty_Banner, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, Image_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, Overlay_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, ScrollBox_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, Search_Banner, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, ServersList, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, SizeBox_10, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, T_Empty, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock_3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock_4, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock_5, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock_7, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlock_Difficulty, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, TextBlockPlayers, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, Throbber_1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, W_Back, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, W_JoinSession_PopUp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, W_SwitchButtonNetwork, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, W_TimerButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, W_WarningNoOnlineSubsystemFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, WidgetSwitcher_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, WidgetSwitcher_SearchEmptyOverlay, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, SettingsBufer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, UnknownData_1WLJ, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, LastHoveredButton, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, DefaultHoveredButton, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, GameInstance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, IsUseLan, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, UnknownData_NYNF, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_FindSessionFrame_C, DefaultUseLAN, 0x039C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_FindSessionFrame_C, 0x03A0);
		}

		// class UW_ExtraFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_ExtraFrame__W_ExtraFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ExtraFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ExtraFrame_C, TextBlock_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ExtraFrame_C, VerticalBox_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ExtraFrame_C, W_Back, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_ExtraFrame_C, W_Credits, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_ExtraFrame_C, 0x02B8);
		}

		// class ABP_ProjectileEffectOnHitBase_Rocket_AI_Mech_C : public ABP_ProjectileEffectOnHitBase_Rocket_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_Rocket_AI_Mech__BP_ProjectileEffectOnHitBase_Rocket_AI_Mech_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_Rocket_AI_Mech_C, 0x03C0);
		}

		// class UBPI_Lobby_GameState_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Lobby_GameState_Interface__BPI_Lobby_GameState_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Lobby_GameState_Interface_C, 0x0028);
		}

		// class ABP_AI_SpawnLocation_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_AI_SpawnLocation__BP_AI_SpawnLocation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, OriginLocation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Preview, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnTrigger, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnAreaVisualiZation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, IsEnabled_, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SholuldAutoActivateSpawnOnBeginPlay, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_XNKH, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnRadius, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, NavigatableRadius, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_6VTG, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Spawn_Ai_Struct, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Despawn_Distance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_LZTZ, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Spawned_AI, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, BigGroup_DepricatedToRunWithoutBigGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Loops, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, CanDeSpawn, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_JYOZ, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, OriginalEnemiesSpawnAIStructBackupAfterMultiplayAiByDiffi, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, DEPRICATEDShouldAutoRespawnWhenAllDead_, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_COSC, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, TimeBeforeRespawn, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, AIOnTheHunt, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, AiIsHunting, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_78UW, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, AiOntheHuntTimer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnTimer, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, AllowSpawning, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, CanSpawn, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_YCTA, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, ClassOfPlayerLookingForOverlap, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Spawn_Delay_between_Big_Groups_per_struct, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, DEPRICATEDWaitForRespawnTillAreaIsClearOfPlayerDEPRICATED, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_8YO8, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Spawn_Delay_Between_Ai_Struct_Elements, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, ActualEnemyLevelToSpawn, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SmallerLizzardMutant, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, GreyBigMonster, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnedPawn, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, OnlyPlaceAIOnPlacesNotSeenByAPlayer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_3K9X, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, AllPlayerPawns, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, NewRandomAICountCalculationEachRespawn_, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_5REL, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Spawn_Distance, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Despawn_Distance___Spawn________, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, TimeBetweenSpawnDespawnChecks, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, NewVar_1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, AISpawnsOfOneStructIsFinished, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnLoopCounterIndex, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, SpawnStructsCount, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, RobotShooting, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, RobotRocket, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, DespawnAiWhenNoPlayerInside_, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, UnknownData_XIFY, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, TwigPeople, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, MechBipedBoss, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, TempAIToAdd_Spawn_Ai_Struct, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, FactorDiffi_Range, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, FactorDiffi_Health, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, FactorDiffi_Speed, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, FactorDiffi_Attack, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, DiffiDefault_HeadShotDead, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AI_SpawnLocation_C, Difficulty, 0x0399);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AI_SpawnLocation_C, 0x039A);
		}

		// class UBP_Save_QualityCustom_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_QualityCustom_Settings__BP_Save_QualityCustom_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_QualityCustom_Settings_C, Default_Settings_Quality_Custom, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_QualityCustom_Settings_C, Settings_Quality_Custom, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_QualityCustom_Settings_C, 0x0070);
		}

		// class UBP_Save_InputKeys_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_InputKeys_Settings__BP_Save_InputKeys_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_InputKeys_Settings_C, Default_Settings_InputKeys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_InputKeys_Settings_C, Settings_InputKeys, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_InputKeys_Settings_C, 0x0058);
		}

		// class UBP_Save_Controls_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_Controls_Settings__BP_Save_Controls_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Controls_Settings_C, Default_Settings_Controls, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Controls_Settings_C, Settings_Controls, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_Controls_Settings_C, 0x0068);
		}

		// class UBTask_SetSpeed_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_SetSpeed__BTask_SetSpeed_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_SetSpeed_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_SetSpeed_C, Speed, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_SetSpeed_C, 0x00B1);
		}

		// class USteamAuthComponentModuleInterface : public UHandlerComponentFactory
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0028);
		}

		// class USteamNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_Q2I1, 0x1B91);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1B98);
		}

		// class USteamNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_2RSK, 0x07B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x07C0);
		}

		// class UBTService_ToggleFocusBasedOnTargetDistance_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_ToggleFocusBasedOnTargetDistance__BTService_ToggleFocusBasedOnTargetDistance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ToggleFocusBasedOnTargetDistance_C, UberGraphFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ToggleFocusBasedOnTargetDistance_C, TargetActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ToggleFocusBasedOnTargetDistance_C, DistanceToFocus, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_ToggleFocusBasedOnTargetDistance_C, 0x00CC);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_8ZVC, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_656A, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0480);
		}

		// class UAudioSynesthesiaNRTSettings : public UAudioAnalyzerNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRTSettings, 0x0028);
		}

		// class UAudioSynesthesiaNRT : public UAudioAnalyzerNRT
		TEST_METHOD(Class__AudioSynesthesia__AudioSynesthesiaNRT)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSynesthesiaNRT, 0x0078);
		}

		// class UConstantQNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, StartingFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBands, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NumBandsPerOctave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, AnalysisPeriod, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, bDownmixToMono, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, FFTSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, WindowType, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, SpectrumType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, BandWidthStretch, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, CQTNormalization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, UnknownData_335M, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRTSettings, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRTSettings, 0x0048);
		}

		// class UConstantQNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__ConstantQNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstantQNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstantQNRT, 0x0080);
		}

		// class ULoudnessNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, AnalysisPeriod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MinimumFrequency, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, MaximumFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, CurveType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_CUY1, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, NoiseFloorDb, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRTSettings, UnknownData_JMOS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRTSettings, 0x0040);
		}

		// class ULoudnessNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__LoudnessNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudnessNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudnessNRT, 0x0080);
		}

		// class UOnsetNRTSettings : public UAudioSynesthesiaNRTSettings
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRTSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, bDownmixToMono, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_4DER, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, GranularityInSeconds, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, Sensitivity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MinimumFrequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, MaximumFrequency, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRTSettings, UnknownData_TQHM, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRTSettings, 0x0040);
		}

		// class UOnsetNRT : public UAudioSynesthesiaNRT
		TEST_METHOD(Class__AudioSynesthesia__OnsetNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnsetNRT, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnsetNRT, 0x0080);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_MH0Y, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_KUW0, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x02E0);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_4ZZZ, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x02D0);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_2XVR, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x02D0);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_TDLW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_XHEE, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_R75Q, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_UP1C, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0118);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_MMG1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class UW_MasterInteractionWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MasterInteractionWidget__W_MasterInteractionWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MasterInteractionWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MasterInteractionWidget_C, Interaction_Actor, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MasterInteractionWidget_C, 0x0270);
		}

		// class UBP_Weapon_C : public UWeapon_Base_Component_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Weapon__BP_Weapon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UberGraphFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, PrimaryWeaponDEPRICATED, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_5KSH, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, CharacterWeaponMesh, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Animation_Shoot, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Degrees_of_spreading, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Recoil_Min, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Recoil_Max, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, DegreesCurrent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ForTimer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SpreadingCone_Min, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SpreadingCone_Max, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Spreading_Increase, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Spreading_Decrease_Time, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_5SJQ, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Shell_Particle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, MuzzleParticle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ShootSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, CameraShakeClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Ammo_InClip, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, TMP_Ammo_InPocket, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Ammo_ClipSize, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_IH5X, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, EmptySound, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, TMP_Ammo_PocketSize, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Bullet_Min, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Bullet_Max, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, RandomNumBullets, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, StartAutoFireActuallyPossible, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ShootingMode, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_PUN1, 0x0157);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ShotsPerSecond, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_2YIT, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, CharacterCamera, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, AutoFireTimer, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Animation_Empty, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Animation_Reload, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ReloadSound, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Clip, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ClipMesh, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Sound_ClipHit, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ClipLifeTime, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ImpusleStrength, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Damage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_5HMG, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, DamageType, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, BulletTraceStartOffsetAiMuzzle, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, DropVector, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, AmmoType, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_1YBA, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ProcessingHitResult, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Projectile, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, bUnlimited_Ammo_Weapon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_G0EM, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Shell_Life_Time, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Bullet_Hit_Result_Array, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, LastHitResult, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_8OUO, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ActualHit, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Bullet_Blocking_Hit_Result, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, WeaponID, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, EmptyWeaponComponent, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_DH3K, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, DefaultWeaponPropertiesOfWeaponID, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, DisplayName, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Description, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, WeaponPrice, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, WeaponValue, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ImpulseFactorOnHitFromWeapon, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, CanBurstFire, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ReloadOneAfterTheOtherLikeShotguns, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_W1OI, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, MaxRange, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, MaxHighEffectiveRange, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, DamageOnProjectileHitInsteadSimpleTrace, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_WTAJ, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ProjectileSpeedFactor, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ProjectileSizeFactor, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ProjectileLifetimeFactor, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, RecoilIncreaseSpeed, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, OwnerHasThisWeaponActiveAssigned, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, CanAutoFire, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_546T, 0x0536);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, BulletParticleDirection, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, TraceEndHitNothing, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Map_ValueWeapons, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_2VUB, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SurfaceParticle, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SurfaceParticleScale, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_T6UR, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SurfaceDecal, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SurfaceDecalSize, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SurfaceDecalRotation, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SurfaceSound, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitLocation, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitImpactPoint, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitNormal, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitNormalXVectorRot, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitPhysMat, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitActor, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitComponent, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitBone, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitTraceStart, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitTraceEnd, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, HitFromSelfCalculated, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, BacksplatterChance, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SplaterLineTraceLengthToObject, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_W7D5, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, BacksplatterDecalMat, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Splatter_Decal_Lifetime, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Back_Wall_SplatterFXSize, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_FA6J, 0x061D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Floor_Blood_Splatter_Chance, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, Floor_SplatterFXSize, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, AutoFireIstPressed, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_A3OH, 0x0626);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ImpactParticleSizeScaleFactor, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_2TFX, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, LaserDotPointerMarkerRef, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SignatureColor1, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, WeaponCanShowLaserDotPointer, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, LaserDotPointerActivated_, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_04QE, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, PermanentLineTraceAndLaserPointerTimer, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, BulletTraceStartOffsetPlayerMuzzle, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, BulletTraceStartOffsetPlayerFACTORToCamMuzzleDist, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, WeaponMuzzleIsBlockedByVeryCloseObject, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SpaceBetweenCameraAndLaserPointLengthIsFree, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SpaceBetweenMuzzleAndLaserPointLengthIsFree, 0x0662);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, LastOrBlockingHitResult_, 0x0663);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, LaserPointerFoundBlockingHit, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, LaserPointerFoundOverlapValidSurfaceForDisplayLaser, 0x0665);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, UnknownData_RB6T, 0x0666);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, WeaponPitchModifierForOnHitParticleShot, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, ShowBlood, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Weapon_C, SkipSpawnWeaponMesh, 0x066D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Weapon_C, 0x066E);
		}

		// class UBP_StatusEffectsBaseComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_StatusEffectsBaseComponent__BP_StatusEffectsBaseComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedModifyEffectEnded, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, EndSpeedGlowEffectTimer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedChangeEffectAlphaMultiplier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, Delta_Seconds, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastTargetMesh, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastSetSpeedMultiplierByEffect, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedEffectEndedNormallyAndNowFadeOutToNormal_, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, UnknownData_D9XZ, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, Owner_Ref_Current_Speed_Modifer_Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, CurrentSpeedModiferMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, CompOwner, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedStatusModifyTimer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedStatusModfied, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastBoundCauserAi, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, TimerDelayEndEffectAiDeath, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpawnedSlowDownParticleEffect, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastSpawnedParticleType, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastEffectMaterialParamterName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, EffectEndsSoonMaterialEffectStarted, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, UnknownData_IPJV, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedEffectSettings, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastSpeedEffectSettings, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, LastEffectType, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, UnknownData_XNSP, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_StatusEffectsBaseComponent_C, SpeedModifyEffectStarted, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_StatusEffectsBaseComponent_C, 0x0168);
		}

		// class UBPI_PlayerControllerSessionsAndGlobalInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerControllerSessionsAndGlobalInterface__BPI_PlayerControllerSessionsAndGlobalInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerControllerSessionsAndGlobalInterface_C, 0x0028);
		}

		// class UWB_StateButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_StateButton__WB_StateButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, B_MultiState_FillColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, b_MultiStateOption, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_Multistate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_Frame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_TextBlock, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, OV_ContentWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, SB_Content, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, SB_ContentWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, SB_MultiState_Option, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, SB_MultiState_Text, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, WB_States, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, ButtonText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, ButtonSize, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_Font_Normal, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FontFace_Normal, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FontSize_Normal, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_TextColor_Normal, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FrameColor_Normal, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FillColor_Normal, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_8XFO, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_Font_Hovered, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FontFace_Hovered, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FontSize_Hovered, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_TextColor_Hovered, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FrameColor_Hovered, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, Button_FillColor_Hovered, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_0HEO, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_States, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, IsEnabled, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_ZCXH, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, ButtonSound_Clicked, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, ButtonSound_Hovered, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, OnStateChanged, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_Font_Normal, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_FontFace_Normal, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_FontSize_Normal, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_FontColor_Normal, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_83FR, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_Font_Hovered, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_FontFace_Hovered, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_FontSize_Hovered, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_FontColor_Hovered, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, bUseNavStateOverview, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_CO3Z, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, NavStateOverview_Room, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, NavStateOverviewColor_Normal, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, NavStateOverviewColor_Hovered, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_TAWA, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_ButtonIcon, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_ButtonColorNormal, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_ButtonColorHovered, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_ButtonColorClicked, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, bUseGamepadFocus, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, UnknownData_BTO0, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, State_Width, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, MultiState_TextRoom, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_StateButton_C, bResponsiveFocus, 0x0464);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_StateButton_C, 0x0465);
		}

		// class UWB_Request_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Request__WB_Request_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, b_RequestBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, Button_CANCEL, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, Button_OK, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, Image_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, SB_Button_CANCEL, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, Text_Head, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, Text_Question, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, WB_Foreground, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, OnClicked_Cancel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, FocusTimer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, OnClicked_Ok, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, CountDownTimer, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, CountdownTime, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, UnknownData_985F, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, HeadText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Request_C, MessageText, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Request_C, 0x0318);
		}

		// class UBP_LaserDotMarker_Component_C : public UPointLightComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_LaserDotMarker_Component__BP_LaserDotMarker_Component_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_LaserDotMarker_Component_C, UnknownData_XFVX, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LaserDotMarker_Component_C, 0x0360);
		}

		// class UW_MultiplayerFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MultiplayerFrame__W_MultiplayerFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, TextBlock_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, VerticalBox_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, W_Button, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, W_Button_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, W_MainFrameButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, GameInstance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MultiplayerFrame_C, SaveSettings, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MultiplayerFrame_C, 0x02D0);
		}

		// class UMagicLeapControllerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapController__MagicLeapControllerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapControllerFunctionLibrary, 0x0028);
		}

		// class UMagicLeapTouchpadGesturesComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapController__MagicLeapTouchpadGesturesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_8W9R, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_YWVW, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapTouchpadGesturesComponent, 0x0140);
		}

		// class UMagicLeapHandMeshingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingComponent, 0x00B0);
		}

		// class UMagicLeapHandMeshingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingFunctionLibrary, 0x0028);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, bAbsoluteScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_ED7E, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_U5C1, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_TV8U, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_IXXK, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0118);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, UnknownData_27O1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0090);
		}

		// class UW_AnswerFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_AnswerFrame__W_AnswerFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_C, TextBlock_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_C, TextBlock_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_C, W_Back, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AnswerFrame_C, OnBack, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_AnswerFrame_C, 0x0290);
		}

		// class ABP_ProjectileEffectOnHitBase_C : public ABP_Projectile_Base_extensions_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase__BP_ProjectileEffectOnHitBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ProjectileBulletFlybySound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ParticleSystem, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ProjectileMovement, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Timeline_WhenDestoryAfterHit_ShortLifetime_ParticleSize_B275828E481FAF728CE1D0BAED13187A, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Timeline_WhenDestoryAfterHit_ShortLifetime__Direction_B275828E481FAF728CE1D0BAED13187A, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, UnknownData_7CRH, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Timeline_WhenDestoryAfterHit_ShortLifetime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Timeline_WhenDestoryAfterHit_ParticleSize_053716104065369030E90AB9443D2413, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Timeline_WhenDestoryAfterHit__Direction_053716104065369030E90AB9443D2413, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, UnknownData_Q7FX, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Timeline_WhenDestoryAfterHit, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, MaxLifetime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, DamagedHitsAlready, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, MaxActorDamageHitsToDestroyProjectile, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, DamageOverwrittenByWeaponProps, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Particle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ProjectileScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, UnknownData_F8ZE, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, FlyBySound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ProjectileVolumeMultiplier, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Speed, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Gravity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ProjectileCanHitSelf, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ShouldBounce, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, UnknownData_7N5T, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, BouncinessOfProjectileWhenBounceOn, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, FrictionOfProjectileWhenBounceOn, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, TimeLineLengthDisolveProjectileNormal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, DisolveTimelineAlpha, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, TimeLineLengthDisolveProjectileShort, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, MaxLifetime_WeaponDataTableCustomizeFactor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, Speed_WeaponDataTableCustomizeFactor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, SizeScale_WeaponDataTableCustomizeFactor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, TriggerCustomHitEventInsteadOfApplyDamage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, TriggerCustomHitEventWhenCollideWithSolid, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, UnknownData_GYQG, 0x02CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ForcedSetCollisionProfileNameAfterProjectileSpawn, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, TimeFrameProjShouldIgnoreProjShooter, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_C, ShowBlood, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_C, 0x02D9);
		}

		// class ABP_FireBlocks_C : public AStaticMeshActor
		TEST_METHOD(BlueprintGeneratedClass__BP_FireBlocks__BP_FireBlocks_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FireBlocks_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FireBlocks_C, 0x0238);
		}

		// class AReviveTrigger_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ReviveTrigger__ReviveTrigger_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, Arrow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, SceneSlotForAboveHeadWidget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, WidgetChild, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, ReviveTrig, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, SkeletalMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, PlayerRefHealthZeroBoundToThis_Trigger, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, AttachedAboveHeadWidgetRef, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AReviveTrigger_C, LastAttachedAboveHeadWidgetRef, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReviveTrigger_C, 0x0270);
		}

		// class ABP_Grenade_Explosion_C : public ABP_Grenade_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_Explosion__BP_Grenade_Explosion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, OptionalCustomExplosionLocation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, BP_ExplodableComponent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, Base_Damage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, MinimalDamage, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, InnerRadius, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, OuterRadius, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, Effect, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, EffectScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, ExplosionDelayAfterTrigger, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, ExplosionDebrisMeshes, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, DebrisDefaultsSpawnImpulseCollision, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, CharacterStepOnDebrisType, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, UseOptionalLocation, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, BlastRadialImpulseOnExplosion, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, UnknownData_ZOV7, 0x032B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, RadialForceComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, PhysImpulseRadius, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, PhysImpulseStrength, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_Explosion_C, Debug_Visualize_Explosion_Radius, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_Explosion_C, 0x0341);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UW_NotificationElement_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_NotificationElement__W_NotificationElement_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, NewNotify, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, TextBlock_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, TextBlock_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, Body, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_NotificationElement_C, Color, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_NotificationElement_C, 0x02C8);
		}

		// class ABP_PC_InputDetect_C : public APlayerController
		TEST_METHOD(BlueprintGeneratedClass__BP_PC_InputDetect__BP_PC_InputDetect_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PC_InputDetect_C, UberGraphFrame, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PC_InputDetect_C, LastPressedKey, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PC_InputDetect_C, AnyKey, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PC_InputDetect_C, 0x05A8);
		}

		// class ABP_PlayerCharacter01_C : public ABP_PlayerCharacter_BPBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerCharacter01__BP_PlayerCharacter01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerCharacter01_C, 0x0B30);
		}

		// class UW_LeaderboardRow_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LeaderboardRow__W_LeaderboardRow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, BorderPositionNumber, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, FullRowBorder, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, ImageAvatar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, PlayerName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, PlayerPointsTB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, PositionTB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, PlayerStateRefOfThisStatsRow, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, TimerGetPing, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, position, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, IsControllerPlayer, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, UnknownData_U2MZ, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, PlayerScore, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, Scoreboardtype, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, UnknownData_VANJ, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, AvatarTexture, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, Name, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LeaderboardRow_C, SteamID, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LeaderboardRow_C, 0x02D8);
		}

		// class UW_Setting_QualityFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_QualityFrame__W_Setting_QualityFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, VerticalBoxLeft, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, VerticalBoxRight, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_AA, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Back, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Bloom, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_DepthOfField, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Effects, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Foll, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_GiveMeExtremSettings, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_JitterGrain, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Lensflare, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_MainFrameButton_1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_MotionBlur, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_PP, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_ResChang, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_ResDef, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_RS, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Shad, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_Textures, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_VD, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, W_WarningFrame, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, WidgetSwitcher_1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, SaveSettingsQualityUe4Scalability, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, SaveSettingsQualityCustom, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, SettingsBufferQualiScalability, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, SettingsBufferQualiCustom, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, GameInstance, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, ShowMeExtremeHighSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, ConstructorRunAlready, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, RemoveIntOfIgnoreAlreadyRun_, 0x03B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_QualityFrame_C, AddIntToIgnoreAlreadyRun_, 0x03B3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_QualityFrame_C, 0x03B4);
		}

		// class UWB_IngameTutorial_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_IngameTutorial__WB_IngameTutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, b_Shine, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, BackgroundImg, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Border_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Border_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Img_Row1_Icon1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Img_Row1_Icon2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Img_Row2_Icon1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Img_Row2_Icon2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Content, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_LineBottom, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_LineTop, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row1_Button1_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row1_Button2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row1_Icon1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row1_Icon2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row2_Button1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row2_Button2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row2_Icon1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, SB_Row2_Icon2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Text1_Row1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Text1_Row2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Text2_Row1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Text2_Row2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Text3_Row1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Text3_Row2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, VB_Content, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, W_KeyButtonSimpleDisplayRow1Button1_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, W_KeyButtonSimpleDisplayRow1Button2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, W_KeyButtonSimpleDisplayRow2Button1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, W_KeyButtonSimpleDisplayRow2Button2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, WidthHeight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, E_IngameTutorial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, TutorialFinished, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, UnknownData_L8VP, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Orig_HeightOverwriteContentBox, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Orig_PaddingLineBottomBox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_IngameTutorial_C, Orig_PaddingLineTopBox, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_IngameTutorial_C, 0x0390);
		}

		// class ABP_LaserBulletProjectile_LightMechTopGun_Blue_C : public ABP_DefaultBulletProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LaserBulletProjectile_LightMechTopGun_Blue__BP_LaserBulletProjectile_LightMechTopGun_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LaserBulletProjectile_LightMechTopGun_Blue_C, 0x0265);
		}

		// class UW_Scoreboard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Scoreboard__W_Scoreboard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, Players, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, CopyOfChildrenToSort, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, SortLoopCounter, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, UnknownData_TOWF, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, CopyOfChildrenScoreBoardRowToSort, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, NextHighScoreFound, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, UnknownData_EKG2, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Scoreboard_C, NextlHighScoreRowFound, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Scoreboard_C, 0x02A8);
		}

		// class UBP_NavArea_ContainerTop_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_ContainerTop__BP_NavArea_ContainerTop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_ContainerTop_C, 0x0048);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0128);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, UnknownData_YMVA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0090);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class UBPI_PlayerState_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerState__BPI_PlayerState_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerState_C, 0x0028);
		}

		// class UBP_Save_Language_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_Language_Settings__BP_Save_Language_Settings_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_Language_Settings_C, 0x0038);
		}

		// class UMyGlobalMacrosLibraryForObjects_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__MyGlobalMacrosLibraryForObjects__MyGlobalMacrosLibraryForObjects_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyGlobalMacrosLibraryForObjects_C, 0x0028);
		}

		// class UBTask_StartAttack_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_StartAttack__BTask_StartAttack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_StartAttack_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_StartAttack_C, 0x00B0);
		}

		// class UWB_Frame03_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Frame03__WB_Frame03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, b_FrameColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, CP_Base, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame03_C, Image_8, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Frame03_C, 0x02B0);
		}

		// class UAI_Enemy_Pawn_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__AI_Enemy_Pawn_Interface__AI_Enemy_Pawn_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAI_Enemy_Pawn_Interface_C, 0x0028);
		}

		// class UWB_Icon_B_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_B__WB_Icon_B_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_B_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_B_C, 0x0268);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_HJE0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0088);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A8);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraBoolParameterTrack, UnknownData_2F81, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraColorParameterTrack, UnknownData_VZB5, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraFloatParameterTrack, UnknownData_QPT8, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraIntegerParameterTrack, UnknownData_RAVE, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00B0);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_IWIZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_J2YY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_835P, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_JZNQ, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemTrack, UnknownData_0ZSR, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0090);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_5308, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_GWIG, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00B8);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_V2OK, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_JYHV, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_IM3X, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_IVV4, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_CSA6, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, EmitterMaterials, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_Y5JY, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_1BD2, 0x058B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05F0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_3KG4, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, Platforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, BIsEnabled, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_GTHG, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0080);
		}

		// class UNiagaraComponentRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraComponentRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, ComponentCountLimit, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_K9BJ, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, EnabledBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bAssignComponentsOnParticleID, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, bOnlyCreateComponentsOnParticleSpawn, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_5PXT, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, TemplateComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, PropertyBindings, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentRendererProperties, UnknownData_J35U, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentRendererProperties, 0x0160);
		}

		// class UNiagaraComponentSettings : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressActivationList, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, ForceAutoPooolingList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentSettings, SuppressEmitterList, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentSettings, 0x0118);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterface2DArrayTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterface2DArrayTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface2DArrayTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface2DArrayTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceArray : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_K76C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, MaxElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArray, UnknownData_X46N, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArray, 0x0050);
		}

		// class UNiagaraDataInterfaceArrayFloat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat2 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat2, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat2, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat3 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat3, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat3, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFloat4 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFloat4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayFloat4, FloatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFloat4, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayColor : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayColor, ColorData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayColor, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayQuat : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayQuat, QuatData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayQuat, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayFunctionLibrary, 0x0028);
		}

		// class UNiagaraDataInterfaceArrayInt32 : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayInt32, IntData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayInt32, 0x0060);
		}

		// class UNiagaraDataInterfaceArrayBool : public UNiagaraDataInterfaceArray
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceArrayBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceArrayBool, BoolData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceArrayBool, 0x0060);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// class UNiagaraDataInterfaceAudioPlayer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, SoundToPlay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Attenuation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, Concurrency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, ParameterNames, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bLimitPlaysPerTick, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_W8RR, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, MaxPlaysPerTick, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, bStopWhenComponentIsDestroyed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioPlayer, UnknownData_BFWT, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioPlayer, 0x0070);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, bRequireCurrentFrameData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_XUGA, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_ILD9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_XZ8K, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_L3DV, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ExposedTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0070);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0270);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_XP0B, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00F0);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_YKSM, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationFixedSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, GPUAllocationPerParticleSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, UnknownData_MREP, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// class UNiagaraDataInterfaceGBuffer : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGBuffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGBuffer, 0x0038);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_R7I1, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_TLK6, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, RenderTargetUserParameter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, OverrideBufferFormat, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_Q9QK, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, ManagedRenderTargets, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x01C0);
		}

		// class UNiagaraDataInterfaceGrid2DCollectionReader : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollectionReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, EmitterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, DIName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollectionReader, UnknownData_YBSW, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollectionReader, 0x0168);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCells, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, CellSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumCellsMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetResolutionMethod, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_8ZFC, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_EV4O, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x0100);
		}

		// class UNiagaraDataInterfaceGrid3DCollection : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, NumAttributes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_4FUT, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, RenderTargetUserParameter, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, BufferFormat, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3DCollection, UnknownData_MVYU, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3DCollection, 0x0180);
		}

		// class UNiagaraDataInterfaceLandscape : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceLandscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceLandscape, SourceLandscape, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceLandscape, 0x0040);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerCell, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_6R1G, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0108);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x00E8);
		}

		// class UNiagaraDataInterfacePlatformSet : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfacePlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePlatformSet, Platforms, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePlatformSet, 0x0068);
		}

		// class UNiagaraDataInterfaceRenderTarget2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, OverrideRenderTargetFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, UnknownData_03UK, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2D, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2D, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTarget2DArray : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, UnknownData_E2EK, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTarget2DArray, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTarget2DArray, 0x0158);
		}

		// class UNiagaraDataInterfaceRenderTargetVolume : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, Size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, OverrideRenderTargetFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, UnknownData_944W, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, RenderTargetUserParameter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRenderTargetVolume, ManagedRenderTargets, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRenderTargetVolume, 0x0158);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_JHJW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_3R7A, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_4FBW, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, bRequireCurrentFrameData, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_M7K4, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00C0);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_192C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, bUsePhysicsBodyVelocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_0D4N, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, FilteredSockets, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_VKGF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0088);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0170);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0270);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01F0);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_NZLT, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraSignificanceHandler : public UObject
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandler, 0x0028);
		}

		// class UNiagaraSignificanceHandlerDistance : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerDistance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerDistance, 0x0028);
		}

		// class UNiagaraSignificanceHandlerAge : public UNiagaraSignificanceHandler
		TEST_METHOD(Class__Niagara__NiagaraSignificanceHandlerAge)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSignificanceHandlerAge, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_EMTO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_HL2Z, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SignificanceHandler, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_2DC5, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0110);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_5P33, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_EKV0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_2EAH, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_ALK4, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_TNWZ, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_O3PH, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_PEBH, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02A0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_A6LN, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_33O1, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_ZAPC, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_UFWB, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x02D8);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_35TT, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_AONZ, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_3QU6, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_VW5V, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_PXP2, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_93WX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PivotOffsetSpace, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_PY14, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_U7GC, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_GFYV, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, RendererVisibilityTagBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_EQZA, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0678);
		}

		// class UNiagaraMessageDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraMessageDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMessageDataBase, 0x0028);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, UnknownData_ZD8H, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00C0);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, SourceMaterialCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0060);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_TSJK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_DIVI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_HDA6, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_CFMB, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_EXXT, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Settings, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Settings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_SE75, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_BXOK, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_PZKC, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_HRBJ, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U0OverrideBinding, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V0RangeOverrideBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, U1OverrideBinding, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, V1RangeOverrideBinding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_05VQ, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x07D8);
		}

		// class UNiagaraScript : public UNiagaraScriptBase
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_XCV3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_Y7WQ, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_7UDA, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x02C0);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_6CZF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, ComponentRendererWarningsPerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultRenderTargetFormat, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultGridFormat, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, UnknownData_6MAY, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00C0);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_VCE5, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0040);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_C6E3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_66G3, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SourceMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_LRA9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_1HP0, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_XR35, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_PES6, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_FPD8, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinCameraDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxCameraDistance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_QYF0, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, RendererVisibilityTagBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialParameterBindings, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_FCWY, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x07A0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bRequireCurrentFrameData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_7HS5, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_4KTS, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_0ZET, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_0B5O, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_3J1P, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_944O, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_NFDD, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// class ULowEntryBitDataEntry : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryBitDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, Type, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, ByteValue, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, UnknownData_JGWL, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, IntegerValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, LongBytesValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, FloatValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, UnknownData_D9J8, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, DoubleBytesValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, BooleanValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, UnknownData_K65U, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, StringUtf8Value, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, ByteArrayValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, IntegerArrayValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, LongBytesArrayValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, FloatArrayValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, DoubleBytesArrayValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, BooleanArrayValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataEntry, StringUtf8ArrayValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryBitDataEntry, 0x00D0);
		}

		// class ULowEntryBitDataReader : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryBitDataReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, Bytes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, CurrentByte, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, UnknownData_LYGZ, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, CurrentBytePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataReader, UnknownData_JH2U, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryBitDataReader, 0x0048);
		}

		// class ULowEntryBitDataWriter : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryBitDataWriter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, Bytes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, CurrentByte, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, UnknownData_XDT4, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryBitDataWriter, CurrentBytePosition, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryBitDataWriter, 0x0040);
		}

		// class ULowEntryByteArray : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteArray, ByteArray, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteArray, 0x0038);
		}

		// class ULowEntryByteDataEntry : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, Type, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, ByteValue, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, UnknownData_TNB9, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, IntegerValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, LongBytesValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, FloatValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, UnknownData_5D2R, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, DoubleBytesValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, BooleanValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, UnknownData_L8BC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, StringUtf8Value, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, ByteArrayValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, IntegerArrayValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, LongBytesArrayValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, FloatArrayValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, DoubleBytesArrayValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, BooleanArrayValue, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataEntry, StringUtf8ArrayValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteDataEntry, 0x00D0);
		}

		// class ULowEntryByteDataReader : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteDataReader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataReader, Bytes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataReader, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataReader, UnknownData_FJFL, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteDataReader, 0x0040);
		}

		// class ULowEntryByteDataWriter : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryByteDataWriter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryByteDataWriter, Bytes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryByteDataWriter, 0x0038);
		}

		// class ULowEntryDouble : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryDouble)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryDouble, Bytes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryDouble, 0x0038);
		}

		// class ULowEntryExecutionQueue : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryExecutionQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryExecutionQueue, Count, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryExecutionQueue, Next, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryExecutionQueue, UnknownData_4J48, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryExecutionQueue, 0x0030);
		}

		// class ULowEntryExtendedStandardLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryExtendedStandardLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryExtendedStandardLibrary, 0x0028);
		}

		// class ULowEntryLatentActionBoolean : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionBoolean)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, Result, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, UnknownData_E7BU, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionBoolean, KeepAliveCount, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionBoolean, 0x0030);
		}

		// class ULowEntryLatentActionFloat : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, UnknownData_HI17, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, Result, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, KeepAliveCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionFloat, UnknownData_T9SC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionFloat, 0x0038);
		}

		// class ULowEntryLatentActionInteger : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, UnknownData_M723, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, Result, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, KeepAliveCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionInteger, UnknownData_J1V2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionInteger, 0x0038);
		}

		// class ULowEntryLatentActionNone : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionNone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionNone, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionNone, UnknownData_EV0T, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionNone, KeepAliveCount, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionNone, 0x0030);
		}

		// class ULowEntryLatentActionObject : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, UnknownData_TS0D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, Result, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, KeepAliveCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionObject, UnknownData_NJAY, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionObject, 0x0040);
		}

		// class ULowEntryLatentActionString : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLatentActionString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, UnknownData_HCR9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, Result, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, KeepAliveCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLatentActionString, UnknownData_WOWP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLatentActionString, 0x0048);
		}

		// class ULowEntryLong : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryLong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryLong, Bytes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryLong, 0x0038);
		}

		// class ULowEntryParsedHashcash : public UObject
		TEST_METHOD(Class__LowEntryExtendedStandardLibrary__LowEntryParsedHashcash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Valid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, UnknownData_THI7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Resource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Date, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, Bits, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULowEntryParsedHashcash, UnknownData_0ZET, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULowEntryParsedHashcash, 0x0050);
		}

		// class UMyPluginObject : public UObject
		TEST_METHOD(Class__UObjectPlugin__MyPluginObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyPluginObject, MyStruct, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyPluginObject, 0x0038);
		}

		// class UMotoSynthPreset : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthPreset, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthPreset, 0x0090);
		}

		// class UMotoSynthSource : public UObject
		TEST_METHOD(Class__MotoSynth__MotoSynthSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, bConvertTo8Bit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_GB8T, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, DownSampleFactor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, RPMCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceDataPCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, SourceSampleRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_FXA0, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, GrainTable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotoSynthSource, UnknownData_APM5, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotoSynthSource, 0x00F8);
		}

		// class USynthComponentMoto : public USynthComponent
		TEST_METHOD(Class__MotoSynth__SynthComponentMoto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, MotoSynthPreset, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, RPM, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMoto, UnknownData_EGDQ, 0x06CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMoto, 0x0780);
		}

		// class UBP_GameInstance_RE_C : public UGameInstance_RE_Base
		TEST_METHOD(BlueprintGeneratedClass__BP_GameInstance_RE__BP_GameInstance_RE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UberGraphFrame, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnKeysBindingChanded, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnFindSessionCompleted, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnChangePlayerName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, MaxPlayersCurrentOrLastHostedMatch, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_0X1Y, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsBase, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsInputKeys, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ServerAnswers, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LoadedSlot, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, Maps_ForMultiplayerWaveGame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, Maps_DEMO_ForMultiplayerWaveGame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, Maps_DEV_Append_ForMultiplayerWaveGame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, MaxPlayersCurrentOrLastPlayedMatch, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LastStartedMatchWasSingleplayer, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_BR8J, 0x030D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SelectedMapKey_Local, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, WeaponIdRowNameMap, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, AllWeaponsDataAsArray, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LoadingScreenWidgetRef, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, DefaultLoadingScreenFadeInTimer, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, DefaultLoadingScreenFadeOutTimer, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, TEMPCurrentFadeLoadingScreenTimer, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_STHD, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, GameStarts, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ShowLoadingScreen, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, CamIsFadeToBlack, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_DR9V, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, MouseSensitivity, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, MouseUpDownInvert_, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_00GM, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, Leaderboard, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, MaxLeaderboardEntriesPerBoardTemp, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_FQND, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ActiveLeaderboardWidge, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, KnownSteamUserData, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, IsDemoBuild, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, TargetBuildConfiguration, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_DNF7, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, CurrentOrLastPlayedMap, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, DifficultyCurrentOrLastHostedMatch, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, DifficultyCurrentOrLastPlayedMatch, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_C8BD, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, DEPR_CurrentMultiplayerSessionResult, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, CurrentOrLastHostedGameMode, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_98LI, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LastCreatedSessionPropsExtraSettingsArray, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LastCreatedUseLan, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_2KQI, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LastCreatedServerSettingsStruct, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, LastCreatedConnectionsCount, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_T7J5, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SelectedMapChanged, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerGotUnconscious, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerGotDeath, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerKills, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerKillsHeadshots, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerKillsExplosives, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerKillsInAir, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerRevivedOtherPlayer, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ElapsedRoundtime, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ElapsedMatchtime, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_OKBE, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, AchievementWidgetRef, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsPlayerGotUnconscious, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineSubsystemAchievement, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_Q6FA, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SteamStatsWidgetRef, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, RequestSteamStatsCallbackFiredFine, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, CallbackResult, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, QueueAchievementsSetToPassed, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ActiveAchievementsAndOrdering, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, AchievementsWhichAreUnlockedPassed, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsPlayerGotDeath, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsPlayerKills, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsPlayerKillsHeadshots, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsPlayerKillsExplosives, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsPlayerRevivedOtherPlayer, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsMatchPlaytime, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsMatchesWon, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, OnlineStatsMatchesLost, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, GamepadAxisSensitivityMultiplier, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, GamePadUpDownInvert_, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_OBNH, 0x06BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsDisplayImportant, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsControls, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsBrightness, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsGameplay, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsLanguage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsPlayer, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsQualityCustom, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsQualityUe4Scalability, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SavedSettingsSound, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsBase, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsInputKeys, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsControls, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsDisplayImportant, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsBrightness, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsGameplay, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsLanguage, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsPlayer, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsQualityCustom, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsQualityUe4Scalability, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, NameSavedSettingsSound, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, SelectedCustomFOV, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, ShowBlood, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, UnknownData_9PX7, 0x07BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GameInstance_RE_C, PlayerSettingsSaveFileLoaded, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GameInstance_RE_C, 0x07D0);
		}

		// class UWB_LootNotificator_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_LootNotificator__WB_LootNotificator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, Fading, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, Overlay_Content, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, S_Top, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, SB_Content1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, SB_Content2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, SB_Content3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, SB_Content4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, SB_Content5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, SB_Content6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, TB_Title, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, VB_Content, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, CurrentDisplayTimeOfLastEntry, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, CanRemove, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, UnknownData_D99F, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, ArrayLootNotifies, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, ArrayLootCount, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, UnknownData_7SW7, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, Title, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, AudioQueue, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, AudioQueueCopy, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotificator_C, VolumeAddition, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_LootNotificator_C, 0x031C);
		}

		// class UABP_Spider_REFS_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Spider_REFS__ABP_Spider_REFS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, UnknownData_A6XU, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_14, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_13, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_12, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_11, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_10, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_9, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_8, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_7, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_6, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_5, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_4, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_3, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult_2, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_TransitionResult, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_10, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_8, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_9, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_7, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_8, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_6, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_7, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_5, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_6, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_4, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_5, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_3, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_4, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult_2, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_3, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateResult, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_StateMachine, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SaveCachedPose_3, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer_2, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_LayeredBoneBlend, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_UseCachedPose_2, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SaveCachedPose_2, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_UseCachedPose, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SequencePlayer, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_SaveCachedPose, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, AnimGraphNode_Slot, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Is_starting, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Can_Walk, 0x11B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, UnknownData_1Z0Y, 0x11BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Speed, 0x11BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Can_Tleft, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Can_TRight, 0x11C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, UnknownData_1VAR, 0x11C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Beat, 0x11C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, IsInAir_, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, UnknownData_6RTW, 0x11C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Spider_REFS_C, Attack, 0x11CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Spider_REFS_C, 0x11D0);
		}

		// class ATurret_ReTriggerSwitchOff_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Turret_ReTriggerSwitchOff__Turret_ReTriggerSwitchOff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, LaserLight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, LaserHit, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, LaserSource, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, Laser, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, Base, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, Tag_Trigger, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, DeltaTime, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, LaserLocation, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, KillLaser, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, UnknownData_PKDJ, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, LaserColorActive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, LaserColorInactive, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, ResetTriggerDelay, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, MaxLaserLength, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATurret_ReTriggerSwitchOff_C, InRange, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATurret_ReTriggerSwitchOff_C, 0x029D);
		}

		// class UW_BoolButton_FullLine_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_BoolButton_FullLine__W_BoolButton_FullLine_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, UnknownData_AVLE, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Button_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Button_3, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Image_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, SizeBox_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, TextBlock_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, TextBlock_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Text, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Color, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, H_Color, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, Description, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, ID, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BoolButton_FullLine_C, OnChangeValue, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_BoolButton_FullLine_C, 0x0368);
		}

		// class UBTask_MoveToActorOrToSpot_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_MoveToActorOrToSpot__BTask_MoveToActorOrToSpot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, TargetLocationOrTargetActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, UnknownData_C4FO, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, AI_Pawn, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, StopOnOverlap, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, UnknownData_NSKB, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, AcceptanceRadiusIfNotFromAIPawn, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, LastSeenRadiusVar, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, UseCustomBbKeyInsteadReadLastKnownLocationOrTargetActorFromBB, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, UnknownData_ZGFU, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, OptionalCustomBlackBoardKeyTargetOrLocation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, ActualTargetActorLoc, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, UnknownData_VC5S, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, TimerKeepShootingRange, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, AIMoveToRef, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, AIController, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_MoveToActorOrToSpot_C, TmpCalcedTargetLocation, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_MoveToActorOrToSpot_C, 0x012C);
		}

		// class UW_CreditsRole_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_CreditsRole__W_CreditsRole_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, HorizontalBox_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, TextBlock_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, VerticalBox_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, VerticalBox_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, RoleInformation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRole_C, CreditsPropertie_IsSetIn_WCreditsRoll, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_CreditsRole_C, 0x0578);
		}

		// class UAnimSequenceLevelSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__AnimSequenceLevelSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, SkelTrackGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceLevelSequenceLink, PathToLevelSequence, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceLevelSequenceLink, 0x0050);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_1TDI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_HEAO, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_3SD3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, AssetUserData, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x01C8);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_6UOT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_3C08, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_WX4Q, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_2J7F, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_OWFZ, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_98JB, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02A0);
		}

		// class ULevelSequenceAnimSequenceLink : public UAssetUserData
		TEST_METHOD(Class__LevelSequence__LevelSequenceAnimSequenceLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceAnimSequenceLink, AnimSequenceLinks, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceAnimSequenceLink, 0x0038);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0320);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_WDAE, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0798);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_HDYK, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_8B5X, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class UMagicLeapLightingTrackingComponent : public UActorComponent
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightingTrackingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseGlobalAmbience, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseColorTemp, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UnknownData_9YLF, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightingTrackingComponent, 0x00C0);
		}

		// class UMagicLeapLightEstimationFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightEstimationFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightEstimationFunctionLibrary, 0x0028);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_SB7H, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06A0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_XXC5, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_2HYD, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_JBPL, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_HUT0, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_I1R2, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_4Y4C, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8TD4, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_ZY3D, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_GP07, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_P1PP, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_T4VX, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_T2QZ, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8VYG, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WP1Y, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8ST4, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilWriteMask, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VZIG, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_516T, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_2FO5, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WSTE, 0x03A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x03A8);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_NDGI, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x03B8);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x03C8);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_9Y4D, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_0X9Y, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_VK8G, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04E0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_PT88, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_F9TS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_6F6J, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_6XLG, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_96XY, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class UBPI_ToWeaponInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ToWeaponInterface__BPI_ToWeaponInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ToWeaponInterface_C, 0x0028);
		}

		// class UBP_DamageType_CloseCombat_Base_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_CloseCombat_Base__BP_DamageType_CloseCombat_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DamageType_CloseCombat_Base_C, HitEffect, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DamageType_CloseCombat_Base_C, HitSoundEffect, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DamageType_CloseCombat_Base_C, HitEffectScale, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_CloseCombat_Base_C, 0x005C);
		}

		// class ABP_ElExp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_ElExp__BP_ElExp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, ElExpSphereCollision, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, SphereEffect, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, EMP_FX_Alpha_Drive_Scale_17DFF52A4B47C96445A7238EED4EB632, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, EMP_FX_Alpha_Drive_Alpha_17DFF52A4B47C96445A7238EED4EB632, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, EMP_FX_Alpha_Drive__Direction_17DFF52A4B47C96445A7238EED4EB632, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, UnknownData_579P, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, EMP_FX_Alpha_Drive, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, LoopParticleFX, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, UnknownData_M5QK, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, AlreadyHitActors, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, ImpulseStrengthMagnitude, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, ImpulseUpwardsMagnitude, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, IgniteEffects, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, Base_Damage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, Minimum_Damage, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, Damage_Inner_Radius, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, Damage_Outer_Radius, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, Damage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElExp_C, DamageFalloff, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ElExp_C, 0x02E0);
		}

		// class UABP_Mecha_Biped_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_Mecha_Biped_AnimBP__ABP_Mecha_Biped_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, UnknownData_SWX4, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_BlendSpacePlayer, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_StateResult, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_StateMachine, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace_2, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_Slot, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_SaveCachedPose, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_UseCachedPose_2, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_BlendListByBool, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AnimGraphNode_UseCachedPose, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, MovementSpeed, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, UnknownData_WDV0, 0x0A74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, WalkRunAimedBlendSpace, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AimOffsetBlendSpace, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, MovementDirection, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, UnknownData_FH0F, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, PawnRef, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, bInAir, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, UnknownData_ZK0S, 0x0A99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AimingPitch, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, AimingYaw, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, SkeletonIndex, 0x0AA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_Mecha_Biped_AnimBP_C, UseAimingYaw2dAimOffset, 0x0AA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_Mecha_Biped_AnimBP_C, 0x0AA9);
		}

		// class UABP_AI_EnemyCharacter_Base_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_AI_EnemyCharacter_Base_AnimBP__ABP_AI_EnemyCharacter_Base_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, UnknownData_0R3U, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_BlendListByBool_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_LayeredBoneBlend_2, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_BlendListByBool, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_ComponentToLocalSpace, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_UseCachedPose_6, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_SaveCachedPose_3, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_LocalToComponentSpace, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_UseCachedPose_5, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_Slot, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_UseCachedPose_4, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_UseCachedPose_3, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_UseCachedPose_2, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_SaveCachedPose_2, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_BlendListByEnum, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_LayeredBoneBlend, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_UseCachedPose, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_SaveCachedPose, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_TransitionResult_6, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_TransitionResult_5, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_TransitionResult_4, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_TransitionResult_3, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_TransitionResult_2, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_TransitionResult, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_StateResult_5, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_SequencePlayer_3, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_StateResult_4, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_SequencePlayer_2, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_StateResult_3, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_SequencePlayer, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_StateResult_2, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_BlendSpacePlayer, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_StateResult, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_StateMachine, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimGraphNode_Root, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AimLeanPitch, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AimLeanYaw, 0x10E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, IsAttacking, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, IsDead, 0x10E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, UnknownData_L3L3, 0x10EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, Speed, 0x10EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, PitchNotInUse, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, UnknownData_B8Y9, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, IdleRunMovementBlendspace, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, Skeleton, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, bInAir, 0x1101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, UnknownData_K1CH, 0x1102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimJumpStart, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimJumpLoop, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, AnimJumpEnd, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, bDancing, 0x1120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_AI_EnemyCharacter_Base_AnimBP_C, 0x1121);
		}

		// class AAI_Robot_Enemy_Rocket_C : public AAI_Robot_Enemy_Pawn_C
		TEST_METHOD(BlueprintGeneratedClass__AI_Robot_Enemy_Rocket__AI_Robot_Enemy_Rocket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Rocket_C, Cloak, 0x0A70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAI_Robot_Enemy_Rocket_C, 0x0A78);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x0108);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x0108);
		}

		// class USequenceCameraShakeCameraStandIn : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeCameraStandIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_2MIB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, FieldOfView, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeCameraStandIn, UnknownData_373H, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeCameraStandIn, 0x0070);
		}

		// class USequenceCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Sequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, PlayRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Scale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendInTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, BlendOutTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, RandomSegmentDuration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, bRandomSegment, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_53OI, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, Player, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, CameraStandIn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShake, UnknownData_YEPV, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShake, 0x00D0);
		}

		// class USequenceCameraShakeSequencePlayer : public UObject
		TEST_METHOD(Class__TemplateSequence__SequenceCameraShakeSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_Y3TQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, BoundObjectOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, Sequence, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, RootTemplateInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USequenceCameraShakeSequencePlayer, UnknownData_ED3J, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceCameraShakeSequencePlayer, 0x05D8);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_HYCV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_IF12, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_05QL, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_P7O7, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0688);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSection, UnknownData_XZF9, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0168);
		}

		// class UTemplateSequenceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceSystem, UnknownData_Y6UE, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSystem, 0x00B0);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0088);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_1LMU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_GDAN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_53HV, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class UAudioAnalyzerAsset : public UObject
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerAsset, 0x0028);
		}

		// class UAudioAnalyzerNRTSettings : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRTSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRTSettings, 0x0028);
		}

		// class UAudioAnalyzerNRT : public UAudioAnalyzerAsset
		TEST_METHOD(Class__AudioAnalyzer__AudioAnalyzerNRT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, Sound, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, DurationInSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioAnalyzerNRT, UnknownData_V2YR, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioAnalyzerNRT, 0x0078);
		}

		// class ABP_PlayerController_MainMenu_C : public ABP_PC_InputDetect_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerController_MainMenu__BP_PlayerController_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerController_MainMenu_C, UberGraphFrame, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerController_MainMenu_C, 0x05B0);
		}

		// class UBPI_ProjectileInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ProjectileInterface__BPI_ProjectileInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ProjectileInterface_C, 0x0028);
		}

		// class UWB_Progress_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Progress__WB_Progress_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Last_Text_FadeOut, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Last_Text_FadeIn, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Next_Text_FadeIn, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Next_Text_FadeOut, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ButtonLeft, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ButtonRight, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ProgressSlider, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ProgressText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, SB_Left, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, SB_Right, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, OnHovered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, bUseFocus, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_ESOG, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ButtonIconSize, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ButtonIconColor_Clicked, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ResponsiveHovering, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_FHOR, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, OptionStates, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, MaxStateCount, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NewStateCount, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Font_Normal, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, FontFace_Normal, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, FontSize_Normal, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, FontColor_Normal, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ButtonIconColor_Normal, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_Q734, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Font_Hovered, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, FontFace_Hovered, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, FontSize_Hovered, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, FontColor_Hovered, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ButtonIconColor_Hovered, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_G8F5, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NavStateMap, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NavStateColor_Normal_Active, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NavStateColor_Hovered_Active, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UseNavOverview, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_L5P9, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NavOverviewRoom, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NavStateColor_Normal_Inactive, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NavStateColor_Hovered_Inactive, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, bIsHovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_ZQ6E, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, NewStateName, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, UnknownData_H8K4, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, OnProgressChanged, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ProgressMinValue, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ProgressMaxValue, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ProgressDefinition, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, ProgressGamepadStepSize, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Progress_C, Value, 0x0444);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Progress_C, 0x0448);
		}

		// class UBPI_Explodable_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Explodable__BPI_Explodable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Explodable_C, 0x0028);
		}

		// class UWB_ShineFX_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ShineFX__WB_ShineFX_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, ShineBG_Particle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, FadeIn_Content, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, FadeIn_BG, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, ShineBG2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, ShineBG1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, b_BigShines_Color, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, b_ShineBG_Color, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, b_Shines_Color, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, b_SmallShines_Color, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, HB_BigShines, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, HB_SmallShines, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, Img_ShineBG1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, Img_ShineBG2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, LastIndex, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, ShineFX_BG_Color, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, ShineFX_ShineColor_Small, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ShineFX_C, ShineFX_ShineColor_Big, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ShineFX_C, 0x0304);
		}

		// class ABP_LaserBulletProjectile2_Child_C : public ABP_DefaultBulletProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LaserBulletProjectile2_Child__BP_LaserBulletProjectile2_Child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LaserBulletProjectile2_Child_C, 0x0265);
		}

		// class UBP_DamageType_IceFrostDamage_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_IceFrostDamage__BP_DamageType_IceFrostDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_IceFrostDamage_C, 0x0048);
		}

		// class UW_HorizontalBox_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_HorizontalBox__W_HorizontalBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HorizontalBox_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HorizontalBox_C, HorizontalBox_1, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_HorizontalBox_C, 0x0270);
		}

		// class ULuminARSessionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionFunctionLibrary, 0x0028);
		}

		// class ULuminARFrameFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARFrameFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARFrameFunctionLibrary, 0x0028);
		}

		// class ULuminARImageTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARImageTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARImageTrackingFunctionLibrary, 0x0028);
		}

		// class ALuminAROrigin : public AAROriginActor
		TEST_METHOD(Class__MagicLeapAR__LuminAROrigin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, MRMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, PlaneSurfaceMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, WireframeMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALuminAROrigin, UnknownData_1CBV, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALuminAROrigin, 0x02E0);
		}

		// class ULuminARSessionConfig : public UARSessionConfig
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlanesQuery, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MaxPlaneQueryResults, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MinPlaneArea, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bArbitraryOrientationPlaneDetection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_CHAC, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneSearchExtents, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneQueryFlags, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDiscardZeroExtentPlanes, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDefaultUseUnreliablePose, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_10U5, 0x019A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionConfig, 0x01A0);
		}

		// class ULuminARLightEstimate : public UARBasicLightEstimate
		TEST_METHOD(Class__MagicLeapAR__LuminARLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARLightEstimate, AmbientIntensityNits, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARLightEstimate, 0x0050);
		}

		// class ULuminARCandidateImage : public UARCandidateImage
		TEST_METHOD(Class__MagicLeapAR__LuminARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bUseUnreliablePose, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bImageIsStationary, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, AxisOrientation, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, UnknownData_J5CK, 0x005B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARCandidateImage, 0x0060);
		}

		// class UWB_Image_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Image__WB_Image_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, b_Image, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, b_Vignette, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, CP_Base, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Dn, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Img_base, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, L, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, R, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Up, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, CurrentBrush, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, CurrentTranslation, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, ImageColor_Normal, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, ImageColor_Hovered, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, ImageColor_Clicked, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, ImageColor_Disabled, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, NativeSize, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Saturation_Normal, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Saturation_Hovered, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Saturation_Clicked, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, Saturation_Disabled, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Image_C, VignetteColor, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Image_C, 0x0320);
		}

		// class UW_TimerWarningFrameButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_TimerWarningFrameButton__W_TimerWarningFrameButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, UnknownData_ZY97, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, Color, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, H_Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, Time, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, IsButtonWithTimer, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, UnknownData_XB8D, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, DuratinTime, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, UnknownData_8T38, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TimerWarningFrameButton_C, OnUnhovered, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_TimerWarningFrameButton_C, 0x0338);
		}

		// class UBPI_ToAnimBP_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ToAnimBP_Interface__BPI_ToAnimBP_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ToAnimBP_Interface_C, 0x0028);
		}

		// class ABP_ProjectileEffectOnHitBase_BoltLongRange_C : public ABP_ProjectileEffectOnHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_BoltLongRange__BP_ProjectileEffectOnHitBase_BoltLongRange_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_BoltLongRange_C, 0x02D9);
		}

		// class ABP_Grenade_Spawn_Turret_C : public ABP_Grenade_Spawn_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_Spawn_Turret__BP_Grenade_Spawn_Turret_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_Spawn_Turret_C, 0x02B8);
		}

		// class ABP_Grenade_AOE_BodyShield_Long_C : public ABP_Grenade_AOE_BodyShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_BodyShield_Long__BP_Grenade_AOE_BodyShield_Long_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_BodyShield_Long_C, 0x0384);
		}

		// class UWB_Options_Credits_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Options_Credits__WB_Options_Credits_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, OV_Container, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, WB_Foreground, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, OnClicked_Back, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, FocusTimer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Credits_C, WB_CreditsContainer, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Options_Credits_C, 0x02B0);
		}

		// class UBPI_RunningMatchLibraryActorInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_RunningMatchLibraryActorInterface__BPI_RunningMatchLibraryActorInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_RunningMatchLibraryActorInterface_C, 0x0028);
		}

		// class UWB_KeybindingButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_KeybindingButton__WB_KeybindingButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, B_KeyRebinding_FillColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Button_KeyRebinding, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingKey1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingKey2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_Frame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_Text, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, OV_ContentWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, SB_Content, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, SB_ContentWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, SB_KeyRebinding_Text, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeymappingName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, NoKeySpecifiedText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeySelectionText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, ButtonSize, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, IsEnabled, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, bUseGamepadFocus, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, UnknownData_V5ZM, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, ButtonSound_Hovered, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, ButtonSound_Clicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_OptionFont_Normal, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_OptionFontFace_Normal, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_OptionFontSize_Normal, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_TextColor_Normal, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_FrameColor_Normal, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_FillColor_Normal, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, UnknownData_7MGC, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_OptionFont_Hovered, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_OptionFontFace_Hovered, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_OptionFontSize_Hovered, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_TextColor_Hovered, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_FrameColor_Hovered, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebinding_FillColor_Hovered, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, UnknownData_T9TN, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_Font_Normal, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FontFace_Normal, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FontSize_Normal, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_TextColor_Normal, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FrameColor_Normal, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FillColor_Normal, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, UnknownData_7TAT, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_Font_Hovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FontFaceHovered, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FontSizeHovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_TextColorHovered, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FrameColorHovered, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeybindingButton_FillColorHovered, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_L_Enabled, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_L_AllowGamepadKeys, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_R_Enabled, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_R_AllowGamepadKeys, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, On_Selected_Key_Left, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, On_Selected_Key_Right, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_L_AllowModifierKeys, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_R_AllowModifierKeys, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, UnknownData_XSC0, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_L_EscapeKeys, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Key_R_EscapeKeys, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, On_Key_Emptied_Left, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, On_Key_Emptied_Right, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, KeyRebindingButtonWidth, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, Keybinding_TextRoom, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_KeybindingButton_C, bResponsiveFocus, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_KeybindingButton_C, 0x04B1);
		}

		// class USG_ControlSettings_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__SG_ControlSettings__SG_ControlSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_ControlSettings_C, Sensitivity01, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_ControlSettings_C, Sensitivity02, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_ControlSettings_C, Sensitivity03, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_ControlSettings_C, Sensitivity04, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_ControlSettings_C, Invert_X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_ControlSettings_C, Invert_Y, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USG_ControlSettings_C, 0x003A);
		}

		// class UWB_HomeButton_Small_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_HomeButton_Small__WB_HomeButton_Small_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FadeFrameDynamic, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FadeFrameBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, b_ContentWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, b_FrameBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Frame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Frame_Dynamic, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OV_Base, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OV_ContentWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, SB_ContentWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, SB_Frame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, SB_Image, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, SB_NativeButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, SB_Text, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Text, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, WB_NativeButton, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, WB_PMM_B01_Image, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnClicked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnHovered, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnUnhovered, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnPressed, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnReleased, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFont_Normal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineTypeFace_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontSize_Normal, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_18I3, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFont_Hovered, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineTypeFace_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontSize_Hovered, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_SB4W, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFont_Clicked, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineTypeFace_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontSize_Clicked, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_XE2R, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ButtonTypeText, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ButtonHeadline, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ButtonDescription, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontColor_Clicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontColor_Normal, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontColor_Hovered, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, IsEnabled, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_OYMI, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ButtonSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, bGamepadFocus, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, bDetectInput, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_MONE, 0x0406);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFont_Disabled, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineTypeFace_Disabled, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontSize_Disabled, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, HeadlineFontColor_Disabled, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_RFN6, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnDisabled, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Timer_TextSizeCheck, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ContentWidget, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnClicked_Sound, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnHovered_Sound, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, IsDesignTime, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_FKF1, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameColor_Normal, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameColor_Hovered, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameColor_Clicked, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameColor_Disabled, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameShineColor_Normal, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameShineColor_Hovered, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameShineColor_Clicked, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameShineColor_Disabled, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameThickness_Normal, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Image, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageTranslation, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageColor_Normal, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameBlockColor_Hovered, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageColor_Hovered, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameBlockColor_Clicked, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageColor_Clicked, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageColor_Disabled, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageSaturation_Normal, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageSaturation_Hovered, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageSaturation_Clicked, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, ImageSaturation_Disabled, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, VignetteColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFont_Normal, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionTypeFace_Normal, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontSize_Normal, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontColor_Normal, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_3UDQ, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFont_Hovered, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFont_Clicked, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFont_Disabled, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionTypeFace_Hovered, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionTypeFace_Clicked, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionTypeFace_Disabled, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontSize_Hovered, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontSize_Clicked, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontSize_Disabled, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontColor_Hovered, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontColor_Clicked, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, DescriptionFontColor_Disabled, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Scale_Hovered, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Scale_Clicked, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, NewScaleValue, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_T73D, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnFocused, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, OnUnfocused, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, bResponsiveFocus, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, UnknownData_00DO, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameThickness_Hovered, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Duration_Clicked, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, FrameThickness_Clicked, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFont_Normal, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFont_Hovered, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFont_Clicked, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFont_Disabled, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_TypeFace_Normal, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_TypeFace_Hovered, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_TypeFace_Clicked, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_TypeFace_Disabled, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_FontSize_Normal, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_FontSize_Hovered, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_FontSize_Clicked, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, Type_FontSize_Disabled, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFontColor_Normal, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFontColor_Hovered, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFontColor_Clicked, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, TypeFontColor_Disabled, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Small_C, bIsNativeHovering, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_HomeButton_Small_C, 0x06E1);
		}

		// class UBTTask_TriggerGotDamagedByHiddenTargetSpecialEvent_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_TriggerGotDamagedByHiddenTargetSpecialEvent__BTTask_TriggerGotDamagedByHiddenTargetSpecialEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TriggerGotDamagedByHiddenTargetSpecialEvent_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_TriggerGotDamagedByHiddenTargetSpecialEvent_C, 0x00B0);
		}

		// class UBTService_UpdateLastSeenTargetLocOfAcutualTarget_C : public UBTService_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTService_UpdateLastSeenTargetLocOfAcutualTarget__BTService_UpdateLastSeenTargetLocOfAcutualTarget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_UpdateLastSeenTargetLocOfAcutualTarget_C, UberGraphFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_UpdateLastSeenTargetLocOfAcutualTarget_C, 0x00A0);
		}

		// class UBTDecorator_IsMeleeCloseCombatEnemyAI_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_IsMeleeCloseCombatEnemyAI__BTDecorator_IsMeleeCloseCombatEnemyAI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsMeleeCloseCombatEnemyAI_C, TrueIfMeleeCloseCombatEnemy_, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsMeleeCloseCombatEnemyAI_C, 0x00A1);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_80CV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_M6VB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_47JZ, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_GRES, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_GXW7, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_IWUO, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_JEI5, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_WYKH, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_DAMZ, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F8);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_DM02, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_156J, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x021A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_Q7F6, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_2HMO, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_VWPU, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_DVBZ, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_CWXA, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_ZB36, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_QBRC, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0440);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_C4VM, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_7W8K, 0x0461);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0468);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_EUE4, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_RR5R, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_DQHL, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_T5CV, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_XNNO, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_W8H3, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0440);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, PoolPrimeSize, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_2ABD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_X5BU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_OARG, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_6FYB, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_1NBT, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_PYA3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_Z19N, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_VFSN, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_W8E4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_L48I, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_X5G1, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_CYFW, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_223N, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_21U8, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1AF0);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_7A99, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_RCXZ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_DUXB, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_LUTV, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_IWO8, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_K57I, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_R1OK, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_0X0Q, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_WKLV, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_O8DV, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_M10P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_2DS1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_MEJL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnPawnControllerChangedDelegates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_MFAA, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x01A8);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_5X02, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_ECPJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_SXZL, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_J71R, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_F7IO, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_FV90, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_S4EO, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ModulationSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AssetUserData, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x01B8);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_0TUB, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_NFO1, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_HYEG, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_O7CI, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_4CJG, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0370);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_C93K, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x03C0);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_X1QM, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0048);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_VMO8, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0060);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0080);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_SFCC, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_RMJF, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_GA82, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_S6VN, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_KQRX, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_PATR, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_6TAD, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_EE3Q, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_7TZF, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCountPreJump, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_7JJF, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_2A1C, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04B8);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_H9RH, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_D2GI, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_VYXG, 0x0534);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0540);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_IVA0, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VertexOffsetUsage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_R2F8, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_TP24, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_XLFC, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_DF0S, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_UV38, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_PQ0B, 0x05FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_QECK, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_F1HP, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_3FSV, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0690);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_SLHF, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_MMBG, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_RA6P, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x08A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_YAQV, 0x08A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x08A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_GYAZ, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_99AW, 0x08AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_A452, 0x08B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x08B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_G3PM, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bWaitForParallelClothTask, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_2W5R, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_7UZY, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_2NK8, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XLM5, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_NVNM, 0x0A0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_Q5S6, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_M17U, 0x0B40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0ED0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_L2VI, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_3ABF, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_EY2C, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x02B8);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_WQKN, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_DHR6, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04D0);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_R1V6, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_8L1G, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_WUWG, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_U70C, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_1D0V, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0580);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_JQ2Q, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_IM5F, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_U25Q, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_5GFK, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_4HYG, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0668);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_SQF2, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_T37B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_FAZD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_5CV8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_8UX8, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_012M, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_WW1E, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0360);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0368);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_QQ2W, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_WKKE, 0x021B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_3GIX, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_1AIW, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_S3H3, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x0676);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_S1U2, 0x0677);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ModulationRouting, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlayStateChanged, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_VA6O, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioVirtualizationChanged, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_JKG2, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_IE6Y, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NMMK, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_I7R0, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_LXJ5, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_LPFQ, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0860);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_FGJ8, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_UWTV, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_O55S, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_AQOX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_EUIF, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_R7VV, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_K4Q8, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_0AD4, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_IV11, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_G99I, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_VYX0, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_GU4N, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2BNK, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_AJTM, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_JMXG, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0PQF, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_5STA, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_XIHL, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_5ZEP, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_6X6D, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ZS1Y, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_T4NY, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C8SR, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_HFA8, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0570);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UCameraShakeBase : public UObject
		TEST_METHOD(Class__Engine__CameraShakeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, bSingleInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_1KBK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, ShakeScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, CameraManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeBase, UnknownData_QPMI, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeBase, 0x0098);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_AB24, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_AHFJ, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_7R2R, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_UWWV, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_DPL8, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LK2C, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5FJL, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_21W3, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_J0JH, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_RFAB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x038A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_S4P8, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_1E85, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_R1R7, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_N19T, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_9V2J, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerCorrectionRootMotion, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_IEJI, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_3YCQ, 0x0ADC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0B00);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_PCWC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0068);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0068);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0068);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_G6HA, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_U2RR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_S3X9, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0060);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_4A5P, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Downscale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, DownscaleOptions, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_2YUV, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_JAOZ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00D8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_HJFK, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0130);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_PQGV, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_IWG8, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02E0);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_D7PK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_9QFJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_TG59, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_GMBE, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_FPIN, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_G0WH, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedPreEndOfFrameSync, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_XMCE, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_D9UQ, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_BXAN, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0788);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_A26B, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_ATQ2, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_7I0W, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_0YZI, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_37WG, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0150);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_D05V, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_32YT, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_V95C, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_4UQZ, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0100);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_LXDN, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0108);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, UnknownData_TGNW, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0118);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_Y4HV, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DeepShadowLayerDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_R29Z, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x022C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_J2ET, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_2BB1, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_GSG7, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_9Z4T, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_896K, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Z5K9, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_N13T, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_P347, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_706J, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x032C);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x0340);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_CSH5, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_J7ZN, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_82TC, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_FZ7K, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_Y589, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_R0IJ, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class ULODSyncComponent : public UActorComponent
		TEST_METHOD(Class__Engine__LODSyncComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, NumLODs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ForcedLOD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, ComponentsToSync, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CustomLODMapping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentLOD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, CurrentNumLODs, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, DriveComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODSyncComponent, SubComponents, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncComponent, 0x0140);
		}

		// class ULODSyncInterface : public UInterface
		TEST_METHOD(Class__Engine__LODSyncInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODSyncInterface, 0x0028);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_KC89, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_EYOY, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_OIQS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_FBZJ, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_R4F7, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_YS04, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_G12V, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_8FTU, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_6GCY, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_638L, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_V4WB, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_X2DZ, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_H79H, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_S75S, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_NGWK, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_HEE5, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_9QKG, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_9NFD, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x07A0);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_9RHP, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_00Z5, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_KE71, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07C0);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_6090, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_Y619, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_Z9M1, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_ZOOU, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_VUGZ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_VYG2, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_GCDZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_R9WZ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_E42I, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7O87, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_OHBO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_NV5W, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_M5CG, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_0JIF, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_NH3W, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_5WK0, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_2YQ1, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_282H, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_ZIOH, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_SFGU, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_HRMV, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_6P94, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_VX5Z, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_VMC1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_7LWZ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_FD4O, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_D5RR, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_5BWH, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_BIPO, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_JY3M, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_YVFE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_DCVN, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_GWKH, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_SROD, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_W8SA, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_8R9T, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_AXYM, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_6XRI, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_RJAU, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_7ZKA, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_9X8D, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_7X3V, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_6BMH, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_FU2I, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_5MDD, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_DNMN, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_LG1J, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_M65Y, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_P6XC, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_FHF6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_SOKM, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_6004, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_5GWG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_OXKW, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_LV11, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_5TIA, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_FX2I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_7ZCX, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_GGUY, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_C9QV, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_P7OG, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_FVT1, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_2HW7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_AIDK, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_YBZB, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_RPPJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_BC3D, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_U058, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_69HU, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_1GCR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_C1T6, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_UO77, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_9Q2L, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_KUPT, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_XLWE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_NFS1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_FV1O, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_7W5X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_RE1C, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_GNHF, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_O5QA, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_296U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_H77G, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_QTBZ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_IXN9, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_FQV5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_0GPW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_2RA4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_0P3J, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_0YG8, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_K5PL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_QF88, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_QMEH, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_MD6Z, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_R31M, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UPhysicsSettings : public UPhysicsSettingsCore
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_HY5A, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_ZQL9, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_NU6G, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_JFHG, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinDeltaVelocityForHitEvents, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_672E, 0x019F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x01A0);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_QDYZ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_NINN, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_QG60, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_CFHA, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_XLKF, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_FZG3, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_NUE6, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_5LDT, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_2UMG, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02B0);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_9F5Y, 0x02E6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x03A0);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MobileReflectionCompression, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_I7LQ, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, bModifyMaxValueRGBM, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_FCCI, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MaxValueRGBM, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_MLTK, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CachedEncodedHDRCubemap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_17DD, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0270);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_BBN8, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_KSTS, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0290);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_TUMB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_BVML, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_8BIA, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_E18O, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_NT5F, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_3L3Q, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x26A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x26A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_6XY3, 0x26BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, OnAudioFadeChangeEvent, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_34WY, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_XZJI, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2778);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_VU1C, 0x2782);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2784);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2788);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x278C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2794);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_1ME6, 0x279C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x27A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_0869, 0x27A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x27B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_6TRD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_PUNP, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_S0FQ, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_QG0U, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_EOQK, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_IXV5, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_5WBQ, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_007Y, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_2KBO, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_87K9, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_P9YB, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_LK76, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_GMUB, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_V0V9, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_GXXC, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_0FY4, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x035C);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_9WRK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_RBNZ, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07F0);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_Y1RL, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_1BYQ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_NWQI, 0x075D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0760);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_B4FT, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_B9JD, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07C0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_F0V8, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_0KQT, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_HVRV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_0ECE, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_9MSE, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_D7QI, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_B6W4, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_0FT5, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_YM7M, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_4HNA, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneCustomAttributesNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, BoneNamesWithCustomAttributes, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AttributeBlendModes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultAttributeBlendMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_4HK8, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x00D0);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_DMJ3, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_LC2L, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_3ALZ, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_RJU2, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, PropertyAccessLibrary, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x05B0);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_K32I, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0460);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_JX8G, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_KU5Q, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_KHH4, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_747B, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_ZLEK, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_XC5S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_CTOC, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_UOWN, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_3ERB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_NNL1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_GEZZ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_DODL, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_LWG1, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_X8GF, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_N941, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_MKPS, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_NPHS, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_MGPY, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_PDU0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_X1RQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_FCRN, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_UYH1, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_F74L, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_57P7, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_EJKB, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_LQFJ, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_TCUR, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PropertyAccessLibrary, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0330);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_442I, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_0WR9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_ONIW, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_K3CU, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_NES4, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioBus : public UObject
		TEST_METHOD(Class__Engine__AudioBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, AudioBusChannels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, bIsAutomatic, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioBus, UnknownData_27QV, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioBus, 0x0030);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_929Y, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_CTJJ, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_YN4U, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_AQ2C, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_HHUM, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_HSMM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_X758, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_O7IP, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_UIPZ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_BVVF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_JMMX, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_ATUC, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0078);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_IRSV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_5EWH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_3YVN, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_EEY5, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_CC9N, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_L0L0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_DHG3, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_WYA0, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_SEJE, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_25EW, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_F2FU, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalOutputs, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A8);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_1VX5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_JM28, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_8M65, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_ZPC9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_F4WX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_BTA4, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_3TRJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_0ELD, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_UM9H, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_NI85, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_PXOR, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UBodySetup : public UBodySetupCore
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_LD3K, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_MS3C, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_BMV9, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_BR1W, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x02A0);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_H18X, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x02B8);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_CXBD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_3V1O, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bOverrideLODStreamingSettings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_7UL0, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_349I, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00D0);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_QZ9Q, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_E8YD, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_ZFK9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_LHNK, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_2GIT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_BPZE, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_LN89, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_UKMO, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_RPEZ, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_6H4S, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_E0DA, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_922A, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_N9E8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_LZES, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_V7VU, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_FOM0, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_PI95, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_JZNT, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_20HQ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_IYJT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_QUWL, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_MZUA, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_5PTG, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_8MIO, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_XBM9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_ERQM, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_9HAF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_YQWS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_1KAG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_XCDV, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_2BN0, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_Y8A3, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_FHVQ, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_S2JN, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_A1X3, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BakedPerBoneCustomAttributeData, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01B0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_J98R, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_H8TH, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x02D0);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_FWS6, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_JWWF, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_Q747, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowLength, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_WQQF, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0460);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_JBDY, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_O666, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bHasCompletedInitialScan, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_OJL2, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0458);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_S3HF, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_EERF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_4M4D, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_JOTI, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_8B7H, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_M9MP, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_97SF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_BXIN, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_DP5H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_MG1J, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_HGXH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_D0ZK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_W261, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_T369, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixSendSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, SubmixOverrideSettings, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02C8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_J83L, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MapsToPIETest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, PIETestDuration, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, UnknownData_CGRZ, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0340);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_TZ6C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_CIIR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_0009, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0070);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_MXJG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_CHUC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x0108);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_AJQ6, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_RJCU, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_21NT, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_AMAQ, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_3V0N, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_LQEC, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_QH44, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_HPU1, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_IIXF, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_0H7H, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0480);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_1308, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_MH8A, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_X3MQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_GWK1, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_SDAM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_0X1T, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_6GL2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_D027, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_TI48, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_YIAV, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_EHXM, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_B9JC, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_MIJV, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_3N6B, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_1DBL, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_SOKM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_LMSK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_IBXR, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_WGRR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_GTUY, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_56CX, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_C81C, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_87M4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0278);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_HBBM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_DIN1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_5HL8, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05C0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_9CL3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_KVRP, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_X9G6, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_K96F, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_S678, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_E142, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_NKV0, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UMatineeCameraShake : public UCameraShakeBase
		TEST_METHOD(Class__Engine__MatineeCameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_MGT1, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillationBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RotOscillation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, LocOscillation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, FOVOscillation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimPlayRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendInTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimBlendOutTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, RandomAnimSegmentDuration, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_ECUL, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, Anim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_KU5T, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, OscillatorTimeRemaining, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, AnimInst, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeCameraShake, UnknownData_NODH, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeCameraShake, 0x0180);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_1GEZ, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_5FBD, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_LHI8, 0x0211);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0220);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_JN4I, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_ISQA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_A0DA, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_3M1I, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00E0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_PV57, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0108);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_BNUZ, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0128);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_398U, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0458);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_TLHV, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0460);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_YW7I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_SAM5, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_CKUT, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EAH3, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ID8O, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_5QAM, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_K706, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_4FC5, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_3UUB, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_WM1X, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_TD6G, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_GYFE, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EKMH, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_EUDB, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_D1KV, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_JPB7, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_HZ0T, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_QGH5, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_MK42, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_U4FV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0490);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_QS74, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_CFND, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_B88Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_8VY8, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0088);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_VY4X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_8RD7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_IM3G, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_710V, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_5ZXF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_83QM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_L0OU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_4VSQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_S0Z0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_4TXQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_FQ2V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_FVO8, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_5SDX, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UMaterialExpressionStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_M7JL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, UnknownData_U4AX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstY, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStep, ConstX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStep, 0x0070);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_XS85, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_Q1XP, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_WW3H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_JU20, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_PDE9, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_9MWK, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_IWTP, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0048);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0080);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_B869, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_CUXW, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0080);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_VK8R, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0088);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0080);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_3DL1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_A0C9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_CKIT, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_O86E, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_FNGA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_DOFG, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_1PYT, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_3L1K, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_Z5W8, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_9AMX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_54M3, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_6ZHN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_4KFJ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_P90Q, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_AWBB, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_SGTU, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0398);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_DQL9, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoundsCopyComponent : public UActorComponent
		TEST_METHOD(Class__Engine__BoundsCopyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, BoundsSourceActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForSourceBounds, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bKeepOwnBoundsScale, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bUseCollidingComponentsForOwnBounds, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_3JJO, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, PostTransform, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyXBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyYBounds, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, bCopyZBounds, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoundsCopyComponent, UnknownData_YXTE, 0x0113);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoundsCopyComponent, 0x0120);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_8REF, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0470);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_39SB, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_4PWZ, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0290);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_9ZOC, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_BQBU, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_NVOG, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_F540, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0450);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_PJ5H, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_EL6I, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_ZMZU, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_XXMC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_FNID, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_57SH, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_F4IR, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_P7T9, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_WTPT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_69MT, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_BLPL, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_DSEO, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_F3CR, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_LYZR, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0400);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_O5JU, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_CG6Y, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_TH4P, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_DZY9, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_5KB4, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DesignScreenSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_NGPK, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_YXJD, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0270);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_G0HL, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_HJQ5, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_M72Z, 0x0451);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0470);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_RHVM, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UViewportStatsSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ViewportStatsSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewportStatsSubsystem, UnknownData_H31F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewportStatsSubsystem, 0x0050);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class UVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__VirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, Settings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bContinuousUpdate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, bSinglePhysicalSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexture2D, UnknownData_WB1I, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture2D, 0x0110);
		}

		// class UVirtualTextureBuilder : public UObject
		TEST_METHOD(Class__Engine__VirtualTextureBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTextureBuilder, BuildHash, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTextureBuilder, 0x0038);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_HRVK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_KY8D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_2RF6, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CCKN, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_R30M, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Q1B5, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_08NG, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MLXX, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_EQJD, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_C7JA, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_86D2, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_XADO, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_YSYI, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_QVXT, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WDN3, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_E9U1, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PWJB, 0x095D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_TXK3, 0x0961);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MIIU, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_XJH0, 0x098C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_58S4, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WOHS, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_4T8A, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_PLOD, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_M19B, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_1ZQV, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_7GA5, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_JUMC, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_M6IL, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_PWMP, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_S5P9, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_8U7D, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_BDIQ, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_XFGR, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_M9S3, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_ICT4, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_J7XC, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_22HQ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_4FTV, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_9QVK, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_1N77, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_J4PR, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0480);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_3DAI, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_ISOF, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0230);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1AF8);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UActorComponentInstanceDataTransientOuter : public UObject
		TEST_METHOD(Class__Engine__ActorComponentInstanceDataTransientOuter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentInstanceDataTransientOuter, 0x0028);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_2ETV, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_VH2R, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_M7VU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_1ABC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_SE3G, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00B0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_47NV, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00D8);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_20R9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_MMNB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_0C4A, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_I45H, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_MD6M, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0360);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_5W8F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_R0EA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_O0I3, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_FKJ6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_MKIL, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_6G92, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_DRV2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_S9GZ, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_3ED7, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_QZRW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_HMWA, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_3B57, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_SI5G, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_5DYK, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_J9C8, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_U4OF, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_3EU3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_2O48, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_SHZZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_1FXF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_FMO7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_KCGG, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_029U, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_6VFA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_QK61, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_YXPM, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_N3R5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_Y87O, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_IHCT, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_DA21, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_P31D, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_3EDJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_VY9K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_ZVGZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_SW7Q, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairAttributes, UnknownData_REL4, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// class UMaterialExpressionHairColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Melanin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_5LV1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, Redness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_GVWL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, DyeColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionHairColor, UnknownData_F8P5, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairColor, 0x0080);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_KHZ9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_7TF1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_4QOG, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_P8NW, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_PMR3, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionInverseLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_AB9S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_TLCA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_CXF1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, ConstValue, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, bClampResult, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionInverseLinearInterpolate, UnknownData_GKPK, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionInverseLinearInterpolate, 0x0090);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_67T8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_8UAP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_7OMI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_H953, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_QW5I, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_HHQV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_S0DY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_MQYP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_01HA, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_F1NR, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_6S10, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_F5UY, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_ZFUJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_8116, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_Z1W0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_NBT0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_Q7RL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_HW0H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_C8EV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_VXNS, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0090);
		}

		// class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkinningVertexOffsets)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkinningVertexOffsets, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_7V7G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_XGKB, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_NE32, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_DN4A, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_QSL7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_MLCP, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_4IWV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_NGEX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_E50U, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_IRL3, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_9IBA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_3L1V, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_FJ15, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_7T0D, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_J1EO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_TYYH, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_9FYI, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_WK29, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_HS7D, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0060);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_KCWT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_RBPD, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_OI0U, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_EXKQ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0060);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_EV6S, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_Y7PY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_7FFE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_FWG6, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_A5JR, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_TTN1, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_TVPM, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_P9RO, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_W8OR, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_ZMNO, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_MHDX, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_FLZ0, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_USPE, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0230);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceWidth, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_Q8IS, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1JW1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_N5YD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MF6N, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ECWC, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PX3Z, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_W470, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FUGA, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FK5Q, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_19WM, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LXE4, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_XKCA, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PMWS, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6NY3, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FT66, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_M5V2, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_YX7C, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JPWE, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PJ02, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_T8BL, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_26L3, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8YE2, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_WCLH, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_DZ9P, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_CLG9, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MA0A, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0RCW, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_W6JG, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnlimitedBonInfluencesThreshold, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobilePlanarReflectionMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bStreamSkeletalMeshLODs, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bDiscardSkeletalMeshOptionalLODs, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_RUEP, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationColorMaterialPath, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationCustomMaterialPath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VisualizeCalibrationGrayscaleMaterialPath, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0140);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_U249, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplayNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ReplayNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplayNetConnection, UnknownData_TFPH, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplayNetConnection, 0x22F0);
		}

		// class UReplaySubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__Engine__ReplaySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReplaySubsystem, UnknownData_DOBZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplaySubsystem, 0x0038);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_JKZH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_1B92, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassEarlyReflections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_GLCQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, bBypassLateReflections, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, UnknownData_VSFZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_PIU1, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_N2Y0, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0170);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_1MG9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_PQBY, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_KH5Q, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_JZ23, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_IS39, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0298);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_EP5X, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_PDTA, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_AO9N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_CNCS, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_YO26, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_JEKB, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_IXY5, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepthWithoutWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_HEMI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_DOX6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, ConstInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, FallbackDepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepthWithoutWater, UnknownData_8PQB, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepthWithoutWater, 0x0068);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_ENOT, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_ORJX, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_6PQ8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_9KKO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_EWE5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UMaterialExpressionSmoothStep : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSmoothStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_8AKH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Max, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_OJQC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, Value, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, UnknownData_PMH9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSmoothStep, ConstValue, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSmoothStep, 0x0088);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_CDKC, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1AF0);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_9TH4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_I2X7, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_1GD9, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_RIPN, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0220);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_BM2Z, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_Z2MY, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_6CU3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_PN97, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_4BMA, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_NJ6F, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_TXQ1, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_XGCA, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0118);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_F7KQ, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_Z0M2, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0240);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_BF9L, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_SYB2, 0x1AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1B60);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_79VL, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_R7HO, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_I8DI, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_I2GS, 0x0A21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_7VTI, 0x0A38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x12C0);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_7NXC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_7UTQ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_RSAT, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_LSN7, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A8);
		}

		// class UDeviceProfileFragment : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileFragment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileFragment, UnknownData_O0M6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileFragment, 0x0038);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_091S, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_OXOH, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x01D0);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_14T1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_GSQY, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_KXPS, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_3U1T, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_77OL, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_ZULC, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_3X8T, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_B43I, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_ZQIM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_9VGF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_2KFA, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_RME3, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_FZSX, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0460);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_XLDQ, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0460);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0460);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_3D9G, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_SR7T, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_T6WQ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_3G2N, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_MPTL, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_LGPV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_RB3R, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_T1R0, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_FG5U, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_UT1H, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_7RAO, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_TLEW, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_1G5K, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_7EHM, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_VCYE, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_WX20, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_EJ60, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02A0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_XXFF, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_L4B7, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_KVUF, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_P6O7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_2F43, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_Q72H, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_7BQ5, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_RDUL, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_OKDK, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_9H8Z, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_5TYX, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_TYR2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_7KMC, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_V0XT, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_JE85, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_MDE1, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_8ZRL, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_B0C9, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_RMEO, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_71JH, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x059A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_9XHW, 0x059B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_HW03, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06A0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_B8TK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_B4JR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_M48X, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_PUPH, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_INUJ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_VJVR, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_416Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_6RTM, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_EMRO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_UT9B, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_HLPX, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_2WDT, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_T88C, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_0YBK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_CO22, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_207E, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_I3GF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_BZ4U, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_CFF3, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_K7A7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_TXHC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_8NTV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_YOOK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_PF07, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_WJ2N, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0068);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_PV3A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_PV0Z, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_8NYJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_YU52, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_RSRE, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_OYAU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_D7AM, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_9GBA, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_FWR8, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00A8);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_UN02, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_MXDC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_C78K, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_4DRV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_BZ47, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_MFDA, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_16IS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_X0NU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_TO9Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_KHSG, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_1052, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_M1AW, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_WTLK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bAdaptive, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_BSFM, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_XIP1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TraceSampleCountScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPerspectiveStartDepth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_Y02M, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_NS4T, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02D0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_56PT, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_88FV, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_2QWL, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionStrength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionExtent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionMapResolutionScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CloudAmbientOcclusionApertureScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_TRKH, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_DXRT, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0410);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_B40J, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_TIJI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_Q6FY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_H9NQ, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UBoneReferenceSkeletonProvider : public UInterface
		TEST_METHOD(Class__Engine__BoneReferenceSkeletonProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneReferenceSkeletonProvider, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_7402, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_3KVP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_TN92, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_TN3A, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_HRWP, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_AR1J, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCloudSampleAttribute)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCloudSampleAttribute, 0x0040);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_LUSL, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_Z2TN, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_CQ53, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_ZKRJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_YREM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_XY67, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_U5O6, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_BYZ5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_A1NA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_875V, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_QFYG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_LWAF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_TD0S, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_3T4P, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BUUE, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_842D, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_1MKT, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_OGCY, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_R7R3, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_64EK, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_OHZE, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IN97, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_1PHX, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_WMWV, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_NUO9, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MQ0M, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ABB6, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BBTG, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PKZ1, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FX4O, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MM28, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9OBE, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_6AIM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_X4Q0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_0AW9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_Y1NV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_96VG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_WH0K, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_M0K3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_SXBI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_QCC8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_GZRP, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_PZVQ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_S8KZ, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_9SHQ, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_3HXN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_X3XK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionCapturePassSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_0FV5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, Reflection, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionCapturePassSwitch, UnknownData_J8PE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionCapturePassSwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_2X80, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_UI6R, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_KF3J, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_D58D, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_CT2M, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_9EKY, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_GNY5, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_O8FP, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_KZBP, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_PVOM, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_0MUD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_YSRH, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_CH2H, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0308);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_79E5, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_KJV3, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_MHKQ, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_EY0V, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_LD5Y, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_5ALV, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_KEWQ, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_8AGL, 0x0581);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0590);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_IIO0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_B61R, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_LM1E, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, CookedQualityLevelIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeQualityLevel, UnknownData_S8A6, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_X138, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_ZYBD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_ILDE, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_PUDR, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0088);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_ZV7A, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, AudioBus, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_ZTGD, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0388);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_7IVE, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, GainMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_JV3A, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, WetLevel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, DryLevel, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_U2CE, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_ASDZ, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_1LIZ, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_2XB1, 0x055E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_IJO7, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0570);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_8CLN, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_BAHD, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_UZAQ, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_C63W, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_S8RH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_LQLK, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_G459, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0150);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_H69U, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_V9TK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_LUCI, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_SWX5, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_RVHZ, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_DOIK, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_2HP3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_ADBQ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_EA42, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_BJKC, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowSourceAngleFactor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_UYA9, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunDiskColorScale, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_9YWM, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowStrength, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnAtmosphereStrength, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowOnSurfaceStrength, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowDepthBias, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowExtent, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowMapResolutionScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudShadowRaySampleCountScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CloudScatteredLuminanceScale, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_RKJO, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_RFGA, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03F0);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_SMMG, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_UCC4, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0130);
		}

		// class UVolumetricCloudComponent : public USceneComponent
		TEST_METHOD(Class__Engine__VolumetricCloudComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_8PNF, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, LayerHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingStartMaxDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, TracingMaxDistance, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, PlanetRadius, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, GroundAlbedo, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, Material, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_5DNE, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, SkyLightCloudBottomOcclusion, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ViewSampleCountScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ReflectionSampleCountScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowViewSampleCountScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowReflectionSampleCountScale, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, ShadowTracingDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricCloudComponent, UnknownData_3CYF, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricCloudComponent, 0x0240);
		}

		// class AVolumetricCloud : public AInfo
		TEST_METHOD(Class__Engine__VolumetricCloud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricCloud, VolumetricCloudComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricCloud, 0x0228);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RSSP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_LQGU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_ZT4P, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RCWU, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_7EGJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_S6VM, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_ZBDB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODEngineSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__Engine__HLODEngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODEngineSubsystem, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, HLODActors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0088);
		}

		// class UHLODProxyDesc : public UObject
		TEST_METHOD(Class__Engine__HLODProxyDesc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxyDesc, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_G5YS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_747L, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_QQ2N, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_RJGD, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultPlayerInputClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultInputComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0140);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0450);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_ZGCW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_VXBL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_X4IT, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_2HGI, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_N44H, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0070);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_V6G0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_JM2V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_2UQ6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_49RA, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_QPNI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_J4EV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_SJRQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_DCUY, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_IWAO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_TS0N, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_WZWH, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_AZZ7, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_QB0M, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_9UZZ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_64R2, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_O0JH, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_A3OW, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_D9BS, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_PHZ4, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_TN6Z, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_JVH2, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0490);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_VVHA, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressX, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressY, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, AddressZ, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_QF22, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0138);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_HP51, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_MQ4Y, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00F0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0108);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTarget2DArray : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, Slices, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2DArray, UnknownData_GVWD, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2DArray, 0x0100);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_N04V, 0x00F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F8);
		}

		// class UTextureRenderTargetVolume : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, SizeZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, ClearColor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, OverrideFormat, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetVolume, UnknownData_RUJO, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetVolume, 0x0100);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_SISX, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_5N5F, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_UBI5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_4PB2, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_PY5F, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_L5OH, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_00VO, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_VWND, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_D7OP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_7FCD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialInput, 0x0040);
		}

		// class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVolumetricAdvancedMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_KNC6, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_EDO2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_29DJ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_DYQU, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_AOPM, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_MLAO, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_X7AH, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseG2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstPhaseBlend, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, PerSamplePhaseEvaluation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_I094, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringApproximationOctaveCount, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringContribution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringOcclusion, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, ConstMultiScatteringEccentricity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGroundContribution, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bGrayScaleMaterial, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, bRayMarchVolumeShadow, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, UnknownData_2GGG, 0x00EF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVolumetricAdvancedMaterialOutput, 0x00F0);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_RQWX, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_82LY, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_OHEP, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_R4OS, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x03B0);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_1QHC, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_C5L1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_RHQG, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_UT6M, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0110);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_QNML, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bAdaptive, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bContinuousUpdate, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_GCPP, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, LODGroup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_ULJJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_ZNNB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_ULYS, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsAlignActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSetBoundsButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bSnapBoundsToLandscape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_9ZO9, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableScalability, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_XSEZ, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, ScalabilityGroup, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bHidePrimitives, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_PPZU, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamingTexture, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, StreamLowMips, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildStreamingMipsButton, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bEnableCompressCrunch, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bBuildDebugStreamingMips, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_V2HW, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0270);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ProjectionType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_O0AI, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_F4T0, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_ZK8J, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_KVUE, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_3OH4, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_E7Y7, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_JW51, 0x088D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_M442, 0x0891);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B0);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_DW48, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_MF5F, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E0);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_GYJM, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_U4P4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_4V0G, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_VNSR, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_CD9T, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_82N5, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0108);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_QFFY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class UMagicLeapPrivilegesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPrivileges__MagicLeapPrivilegesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPrivilegesFunctionLibrary, 0x0028);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_HEK1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_1QN1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_084B, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_SEX0, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_IM18, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_VJ51, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_NCCM, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_W33D, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionInfoUpdated, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0190);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_W68P, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_MR8H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_NOGX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_AG6H, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_RUS7, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_V9I3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_7L0H, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_9VNT, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_0402, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_L3WH, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_CQ8Y, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_0MZ1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_TBMS, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PointOfViewBackwardOffset, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, NearClippingRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_A7PI, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAddBlackboardSelfKey, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_5ROB, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_WB19, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_3LKX, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_IE56, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_WLMF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_NN73, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_EYX1, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_KIJS, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0108);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_CAVJ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_ONH7, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_JL99, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0298);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_5H83, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_B285, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_PTOW, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_2P8J, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_W5X9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_9OZI, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_PKAZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_CD5Y, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_E45L, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_PU5L, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_34B7, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_5CFE, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_PPNE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_YFBN, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_FG9C, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_UV2L, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_EO7X, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_ZLKS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_7UT5, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_WCKH, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_YY11, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_GUFE, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_ZCSE, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_MCDD, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_ZQNH, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_8BOR, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_3HX2, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_SRIN, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_QONQ, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_Y0GH, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_83OP, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_E0WG, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_1AUU, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_DZYS, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_SY23, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_J07P, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_C8SE, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_U282, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_3A3J, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_RJJQ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_QX90, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_OAL5, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_D9S0, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0250);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_QSMJ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_DU0R, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_3XTD, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_7Z4L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_5D7J, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_G1L3, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_YPKR, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_BRR1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_9YAT, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_GUSP, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_MPT7, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_IQN6, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_E71P, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_YYTA, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_35U0, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_GRTC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_URB6, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_47NA, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_NFJ3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_JGH1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_NLRU, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_R5ZT, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_A61B, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_VD5I, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_NQRH, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_22CA, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_XNXK, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_RA0W, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_MPJO, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_ZRCN, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_8WXF, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_EGHE, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_LOJT, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_Y7HJ, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_7A7S, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_G3P6, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_W3IQ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_8IR9, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_1LYG, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_4F7Q, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_5O69, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_4VS5, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_AIME, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_XC96, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_IU34, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_WO22, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_LJD3, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_TD31, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_8124, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0480);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_A8AB, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_LY58, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_LWNE, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_PMDZ, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_TNZ6, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_KMVY, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0280);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_D95K, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_2API, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_KVPJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_UTXC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_HFSQ, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_EH3Q, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_7J0T, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_EAK0, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_8JF8, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_70EV, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_1MML, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_FVXR, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0028);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_YFZ3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_6GL8, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_5MF7, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_W01Y, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class ABP_Teleportation_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Teleportation__BP_Teleportation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Spawn_Timeline_Spawn_F8B1AA384D338D4BD0359DB9EE0611F5, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Spawn_Timeline__Direction_F8B1AA384D338D4BD0359DB9EE0611F5, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UnknownData_N0J2, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Spawn_Timeline, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, DissolveMesh_Timeline_Dissolve_CE89E46F45D267A4C38F0194F4569CDE, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, DissolveMesh_Timeline__Direction_CE89E46F45D267A4C38F0194F4569CDE, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UnknownData_4BWV, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, DissolveMesh_Timeline, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, TeleportingTarget, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, MeshesReferences, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, bMakeNotHitableWhenInTeleportDissolve_, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UnknownData_4IUC, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Destination, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Effect, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, TeleportToRelatedTargetInsteadDestinationLocation_, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UnknownData_JVMR, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, OptionalRelatedTargetToTeleportTo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, RelatedTargetSpawnLocationEvaluation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UnknownData_Y3SD, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, EqsRadiusOfCircleToTest, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, bEffectFollowActor_, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, bKeepSameRotation_, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, bRotateToRelatedTarget, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, UnknownData_WV70, 0x029B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, NewRotation, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, DelayBetweenDissolveAndSpawnEffectsToHaveClientsInSync, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Color, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, ColorBoost, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, SpeedFactorCircleParticle, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, SpeedFactorDissolveAndSpawnEffects, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Height, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Effect_Size, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, Circle_Thickness, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, EffectRotation, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, DissoveEffect_Choice, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, SpawnEffect_Choice, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, TeleportFinished, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, EffectActive_, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, SelfDestroyAfterActorOneTeleport_, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Teleportation_C, BKP_CanNotAttackInitState, 0x0302);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Teleportation_C, 0x0303);
		}

		// class ABP_RocketFlare_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_RocketFlare__BP_RocketFlare_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareSound, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, PointLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, SM_RocketFlare, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareOn_alpha_58E1240B4161EC40719DFDBC61C10E06, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareOn__Direction_58E1240B4161EC40719DFDBC61C10E06, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, UnknownData_7FOR, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareOn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareOff_alpha_38C825FF4706CC4C301CBAB140D1E25B, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareOff__Direction_38C825FF4706CC4C301CBAB140D1E25B, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, UnknownData_PMLE, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareOff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, RocketFlare_LightIntensity_Max, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, CurrentAlpha_RocketFlare_SizeAndIntensityAlpha, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, PointLight_Radius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, UnknownData_AWR0, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, DynamicMat_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, DynamicMat_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, DynamicMat_3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, DynamicMat_4, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, FlareColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, BKP_Original_Scale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, MaxAlpha_RocketFlare_SizeAndIntensity, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, JetFlareActiveNow, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, JetFlareShutdownNow, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RocketFlare_C, JetFlareActive_, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RocketFlare_C, 0x02D1);
		}

		// class UBP_NavArea_HighJump_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_HighJump__BP_NavArea_HighJump_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_HighJump_C, 0x0048);
		}

		// class UBTTask_TriggerSensedTargetLocButDoNotSeePlayerSpecialEvent_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_TriggerSensedTargetLocButDoNotSeePlayerSpecialEvent__BTTask_TriggerSensedTargetLocButDoNotSeePlayerSpecialEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_TriggerSensedTargetLocButDoNotSeePlayerSpecialEvent_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_TriggerSensedTargetLocButDoNotSeePlayerSpecialEvent_C, 0x00B0);
		}

		// class UBPI_StatusEffects_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_StatusEffects__BPI_StatusEffects_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_StatusEffects_C, 0x0028);
		}

		// class UW_InGameFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_InGameFrame__W_InGameFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, Overlay_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_AnswerFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_Button_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_Button_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_MainFrameButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_Resume, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_ShowStats, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_SliderButtonMaxPlayers, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_SwitchButtonDifficulties, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_SwitchServerName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_InGameFrame_C, W_WarningFrame, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_InGameFrame_C, 0x0300);
		}

		// class UBP_NavArea_PhysicMovableMeshObstacle_C : public UNavArea
		TEST_METHOD(BlueprintGeneratedClass__BP_NavArea_PhysicMovableMeshObstacle__BP_NavArea_PhysicMovableMeshObstacle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavArea_PhysicMovableMeshObstacle_C, 0x0048);
		}

		// class ABP_RadialScanActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_RadialScanActor__BP_RadialScanActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, SV_DistortionSphere, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, Billboard, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, Decal, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, MaterialInstance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, RadialSettingsScanActor, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, TargetActor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, TargetComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, SphereScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, Distance, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, StartTime, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, HasBegun, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, UnknownData_2HD6, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, Velocity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RadialScanActor_C, UseVisualsForLocalControlledPlayer, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RadialScanActor_C, 0x02AD);
		}

		// class ABP_ProjectileEffectOnHitBase_Rocket_MedPower_C : public ABP_ProjectileEffectOnHitBase_Rocket_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_Rocket_MedPower__BP_ProjectileEffectOnHitBase_Rocket_MedPower_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_Rocket_MedPower_C, 0x03C0);
		}

		// class UBPI_ToPawnWeaponInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ToPawnWeaponInterface__BPI_ToPawnWeaponInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ToPawnWeaponInterface_C, 0x0028);
		}

		// class UBP_DamageType_CloseCombat_Electric_C : public UBP_DamageType_CloseCombat_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_CloseCombat_Electric__BP_DamageType_CloseCombat_Electric_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_CloseCombat_Electric_C, 0x005C);
		}

		// class UABP_MannequinThirdPerson_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_MannequinThirdPerson_AnimBP__ABP_MannequinThirdPerson_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, UnknownData_NYEF, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_10, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_9, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_8, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_7, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_6, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_5, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_4, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult_2, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TransitionResult, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_RandomPlayer, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateResult_6, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendSpacePlayer_2, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateResult_5, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_7, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateResult_4, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_6, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateResult_3, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_5, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateResult_2, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendSpacePlayer, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateResult, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_StateMachine, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SaveCachedPose_6, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LayeredBoneBlend_6, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_Slot_3, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LocalToComponentSpace_4, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_4, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_4, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SaveCachedPose_5, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_23, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_22, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_21, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LayeredBoneBlend_5, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_3, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendListByEnum_3, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SaveCachedPose_4, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_20, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_19, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_18, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendListByBool_3, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_17, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_RotationOffsetBlendSpace, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_Slot_2, 0x1528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LayeredBoneBlend_4, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendListByBool_2, 0x1630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SaveCachedPose_3, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_16, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_15, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_14, 0x1878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_13, 0x18A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_12, 0x18C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LayeredBoneBlend_3, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer_2, 0x19B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendListByEnum_2, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_11, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SaveCachedPose_2, 0x1B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_10, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_9, 0x1C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendListByBool, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_8, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LayeredBoneBlend_2, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_7, 0x1E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TwoBoneIK_4, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_Slot, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LayeredBoneBlend, 0x2088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SequencePlayer, 0x2148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LocalToComponentSpace_3, 0x21C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, UnknownData_KB26, 0x21E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TwoBoneIK_3, 0x21F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_3, 0x23D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_BlendListByEnum, 0x23F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_SaveCachedPose, 0x24A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_6, 0x25F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_5, 0x2620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x2648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_ComponentToLocalSpace, 0x2668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_4, 0x2688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_3, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, UnknownData_O71R, 0x26D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TwoBoneIK_2, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_TwoBoneIK, 0x28C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose_2, 0x2AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LocalToComponentSpace_2, 0x2AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_UseCachedPose, 0x2AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AnimGraphNode_LocalToComponentSpace, 0x2B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, bInAir, 0x2B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, UnknownData_Q7WB, 0x2B31);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, MovementSpeed, 0x2B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, WeaponPawnAnimationList, 0x2B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, ReloadFinished, 0x2BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, PawnRef, 0x2BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, MovementDirection, 0x2BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, AimingPitch, 0x2BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, ActualAimingState, 0x2BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, StateOfAction, 0x2BC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, bLeftHandIK, 0x2BCA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, bShooting, 0x2BCB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, UnknownData_VT7W, 0x2BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, Current_Animation, 0x2BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, DancingAnimations, 0x2BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_MannequinThirdPerson_AnimBP_C, bDancing, 0x2BE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_MannequinThirdPerson_AnimBP_C, 0x2BE9);
		}

		// class ABP_Grenade_StatusEffectBase_C : public ABP_Grenade_AOE_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_StatusEffectBase__BP_Grenade_StatusEffectBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_StatusEffectBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_StatusEffectBase_C, SpeedChangeDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_StatusEffectBase_C, SpeedChangeFactor, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_StatusEffectBase_C, Status_Effect_Type, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_StatusEffectBase_C, UnknownData_6B9W, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_StatusEffectBase_C, HiStatusEffectRef, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_StatusEffectBase_C, 0x0388);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_YTZC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class UBP_RadialScanComponent_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_RadialScanComponent__BP_RadialScanComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, UnknownData_LO3D, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, LastRadialScanActor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, RadialSettingsComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, IntensityPostProcFillAndOutlineEffect, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, SecondsForDriveUpPostProcIntensity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, IntensitiyProIntervall, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, UnknownData_FVU1, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, TimerDriveEffectIntensityUpDown, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, CountOfRadarSonarWaves, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, DelayInSecondsBetweenEachRadarWave, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, HoldEffectTimeInSecondsAfterLastRadarWave, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, UnknownData_L21G, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, ActorsCollectByRadialScan, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, IntensityIsZero, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, AllRadialScanActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, RenderCustomDepthStenilValueForPostProc, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, CanScan, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, UnknownData_MF8G, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, MaxScannerEnergy, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, ScanEnergyCurrent, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, DurationNeededForEnergyToScanOnce, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, IntervallTimerOfRegenerateEnergy, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, EnergyNeededPerScan, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, AmountAddEnergyPerIntervall, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, ScanRegenerationTimer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, TakenDamageToEnergyFactor, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, UnknownData_0YUT, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, RechargeEnergyVisualEffect, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_RadialScanComponent_C, RechargeEnergySoundEffect, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RadialScanComponent_C, 0x0358);
		}

		// class UBP_DamageType_SelfKillGenericDamage_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_SelfKillGenericDamage__BP_DamageType_SelfKillGenericDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_SelfKillGenericDamage_C, 0x0048);
		}

		// class UBP_DamageType_PlasmaBolt_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_PlasmaBolt__BP_DamageType_PlasmaBolt_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_PlasmaBolt_C, 0x0048);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_ZHPF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_V0M8, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class ABP_GrenadePickup_C : public ABP_PickupBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GrenadePickup__BP_GrenadePickup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, Body, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, RotatingMovement, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, PointLight, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, PickupName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, PickupSound, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, AlreadyPickedUp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, UnknownData_MR0V, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, GrenadeClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadePickup_C, CollectAmount, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GrenadePickup_C, 0x0334);
		}

		// class AHealthPickup_C : public ABP_PickupBase_C
		TEST_METHOD(BlueprintGeneratedClass__HealthPickup__HealthPickup_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, StaticMesh2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, StaticMesh, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, RotatingMovement, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, PointsRewardedDepricated, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, HealthRewarded, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHealthPickup_C, PickupSound, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHealthPickup_C, 0x0310);
		}

		// class UBPI_MenusLeaderboardInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_MenusLeaderboardInterface__BPI_MenusLeaderboardInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_MenusLeaderboardInterface_C, 0x0028);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_AXLP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_YQI5, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UWB_Text02_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Text02__WB_Text02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, b_AdditionalInfo, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, b_Description, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, b_Headline, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, b_TypeText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, Border_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, CP_Base, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, Icon_Players, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, OV_AdditionalInfo, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, SB_AdditionalInfo, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, SB_Content, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, T_Description, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, T_Headline, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, T_TypeText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, Text_Players, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text02_C, VB_Content, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Text02_C, 0x02E0);
		}

		// class UWB_Icon_LB_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_LB__WB_Icon_LB_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_LB_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_LB_C, 0x0268);
		}

		// class UBP_Savegame_Functions_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_Savegame_Functions__BP_Savegame_Functions_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Savegame_Functions_C, 0x0028);
		}

		// class USG_VideoSettings_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__SG_VideoSettings__SG_VideoSettings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, ScreenResolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, EWindowMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, UnknownData_RZY8, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, ResolutionScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, DynamicResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, UnknownData_AALV, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, FrameRateLimit, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, VerticalSync, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, UnknownData_K69L, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, TextureQuality, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, ShadowQuality, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, VisualEffectsQuality, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, AAQuality, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, FoliageQuality, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, ViewDistanceQuality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USG_VideoSettings_C, PostProcessQuality, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USG_VideoSettings_C, 0x0060);
		}

		// class UExplosionShake_C : public UMatineeCameraShake
		TEST_METHOD(BlueprintGeneratedClass__ExplosionShake__ExplosionShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplosionShake_C, 0x0180);
		}

		// class UWB_Frame02_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Frame02__WB_Frame02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, FrameFX_Opacity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, b_FrameColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, CP_Base, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, Image_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, FrameColor_Normal, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, FrameColor_Hovered, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, FrameColor_Clicked, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Frame02_C, FrameColor_Disabled, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Frame02_C, 0x02D0);
		}

		// class AGroomActor : public AActor
		TEST_METHOD(Class__HairStrandsCore__GroomActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGroomActor, GroomComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGroomActor, 0x0228);
		}

		// class UGroomAsset : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_MTVO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsRendering, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsPhysics, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsInterpolation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsLOD, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsCards, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsMeshes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairGroupsMaterials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_1UOW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, EnableGlobalInterpolation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, HairInterpolationType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, LODSelectionType, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_IZSH, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, MinLOD, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, DisableBelowMinLodStripping, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_2KQI, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, EffectiveLODBias, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, AssetUserData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAsset, UnknownData_NYB1, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomAsset, 0x00F8);
		}

		// class UGroomAssetImportData : public UAssetImportData
		TEST_METHOD(Class__HairStrandsCore__GroomAssetImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomAssetImportData, ImportOptions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomAssetImportData, 0x0030);
		}

		// class UGroomBindingAsset : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomBindingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, Groom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, SourceSkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, TargetSkeletalMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, NumInterpolationPoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, MatchingSection, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, GroupInfos, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomBindingAsset, UnknownData_9HF9, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomBindingAsset, 0x00A0);
		}

		// class UGroomBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HairStrandsCore__GroomBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomBlueprintLibrary, 0x0028);
		}

		// class UGroomComponent : public UMeshComponent
		TEST_METHOD(Class__HairStrandsCore__GroomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_IO64, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, GroomAsset, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, NiagaraComponents, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, SourceSkeletalMesh, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, BindingAsset, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, PhysicsAsset, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Strands_DebugMaterial, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Strands_DefaultMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Cards_DefaultMaterial, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, Meshes_DefaultMaterial, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, AngularSpringsSystem, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, CosseratRodsSystem, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, AttachmentName, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_GWYA, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, GroomGroupsDesc, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomComponent, UnknownData_L4RO, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomComponent, 0x0580);
		}

		// class UGroomCreateBindingOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateBindingOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, SourceSkeletalMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, TargetSkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, NumInterpolationPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateBindingOptions, MatchingSection, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateBindingOptions, 0x0040);
		}

		// class UGroomCreateFollicleMaskOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateFollicleMaskOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, Resolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, RootRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateFollicleMaskOptions, Grooms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateFollicleMaskOptions, 0x0040);
		}

		// class UGroomCreateStrandsTexturesOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomCreateStrandsTexturesOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, Resolution, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, TraceType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_1CXR, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, TraceDistance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, MeshType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_FN07, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, StaticMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, SkeletalMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, LODIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, SectionIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UVChannelIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, UnknownData_7BFD, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomCreateStrandsTexturesOptions, GroupIndex, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomCreateStrandsTexturesOptions, 0x0068);
		}

		// class UGroomImportOptions : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomImportOptions, ConversionSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomImportOptions, InterpolationSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomImportOptions, 0x0050);
		}

		// class UGroomHairGroupsPreview : public UObject
		TEST_METHOD(Class__HairStrandsCore__GroomHairGroupsPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGroomHairGroupsPreview, Groups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGroomHairGroupsPreview, 0x0038);
		}

		// class UNiagaraDataInterfaceHairStrands : public UNiagaraDataInterface
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfaceHairStrands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, DefaultSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceHairStrands, UnknownData_Y32K, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceHairStrands, 0x0050);
		}

		// class UNiagaraDataInterfacePhysicsAsset : public UNiagaraDataInterface
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfacePhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, DefaultSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, SourceActor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfacePhysicsAsset, UnknownData_KK85, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePhysicsAsset, 0x0068);
		}

		// class UNiagaraDataInterfaceVelocityGrid : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfaceVelocityGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVelocityGrid, GridSize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVelocityGrid, UnknownData_NT4T, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVelocityGrid, 0x00E8);
		}

		// class UNiagaraDataInterfacePressureGrid : public UNiagaraDataInterfaceVelocityGrid
		TEST_METHOD(Class__HairStrandsCore__NiagaraDataInterfacePressureGrid)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfacePressureGrid, 0x00E8);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_SFYX, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_JVWV, 0x1B44);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1B90);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_IHF0, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_WV80, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_N8BN, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_MKP3, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_55ZD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_SE11, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_9LFJ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_6YUV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_2UX4, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_RINO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_4IJG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_T7JB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_UJ3B, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_72Q2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_0W8W, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_WQ04, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_U15W, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_OBQ7, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_F88J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_9WCF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_UCKB, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_B0Q8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_YJMB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_26Q7, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_6VLZ, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_G602, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_52LX, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_IOV8, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_J5P2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_OFNG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_FN5F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_EGLO, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_X6BK, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_5E2S, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_B2HU, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_8JJS, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_SRTH, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_L12C, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_VN0K, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_XP6H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_G90I, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_J601, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_H7PN, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_OCUR, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_XC7S, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_XR5A, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_BZQ6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_VFAG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_LYA9, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0720);
		}

		// class USteamCoreSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__SteamCore__SteamCoreSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSubsystem, UnknownData_X6VF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreSubsystem, 0x0048);
		}

		// class UAppList : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__AppList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppList, SteamAppInstalled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppList, SteamAppUninstalled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppList, UnknownData_9JLF, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppList, 0x00A8);
		}

		// class UApps : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Apps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApps, DLCInstalled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApps, FileDetailsResultDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApps, UnknownData_GWXQ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApps, 0x00A8);
		}

		// class USteamCoreAsyncAction : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__SteamCore__SteamCoreAsyncAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAsyncAction, 0x0030);
		}

		// class USteamCoreAppsAsyncActionGetFileDetails : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreAppsAsyncActionGetFileDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreAppsAsyncActionGetFileDetails, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetFileDetails, 0x0040);
		}

		// class ASteamCoreGameMode : public AGameMode
		TEST_METHOD(Class__SteamCore__SteamCoreGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASteamCoreGameMode, 0x0308);
		}

		// class USteamCore : public UObject
		TEST_METHOD(Class__SteamCore__SteamCore)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCore, 0x0028);
		}

		// class USteamCoreSettings : public UDeveloperSettings
		TEST_METHOD(Class__SteamCore__SteamCoreSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, DisabledSubsystems, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, bDebugging, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, UnknownData_8B1C, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, AsyncTaskTimeout, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, bEnabled, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, bRelaunchInSteam, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, bVACEnabled, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, bAllowP2PPacketRelay, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, P2PConnectionTimeout, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, SteamAppID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, SteamDevAppId, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, Port, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, GameServerQueryPort, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, UnknownData_874T, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSettings, GameVersion, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreSettings, 0x0070);
		}

		// class UFriends : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Friends)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, AvatarImageLoaded, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, FriendRichPresenceUpdate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameConnectedChatJoin, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameConnectedChatLeave, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameConnectedClanChatMsg, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameConnectedFriendChatMsg, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameLobbyJoinRequested, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameOverlayActivated, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameRichPresenceJoinRequested, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, GameServerChangeRequested, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, PersonaStateChange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, SetPersonaNameResponse, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, JoinClanChatRoomCompletionResult, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, ClanOfficerListResponse, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, DownloadClanActivityCountsResult, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriends, UnknownData_JHYD, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriends, 0x0318);
		}

		// class USteamCoreFriendsAsyncActionSetPersonaName : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionSetPersonaName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionSetPersonaName, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionSetPersonaName, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionDownloadClanActivityCounts : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionDownloadClanActivityCounts)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionDownloadClanActivityCounts, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionDownloadClanActivityCounts, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionRequestClanOfficerList : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionRequestClanOfficerList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionRequestClanOfficerList, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionRequestClanOfficerList, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionJoinClanChatRoom : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionJoinClanChatRoom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionJoinClanChatRoom, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionJoinClanChatRoom, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionEnumerateFollowingList : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionEnumerateFollowingList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionEnumerateFollowingList, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionEnumerateFollowingList, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionIsFollowing : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionIsFollowing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionIsFollowing, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionIsFollowing, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionGetFollowerCount : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionGetFollowerCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionGetFollowerCount, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionGetFollowerCount, 0x0040);
		}

		// class USteamCoreFriendsAsyncActionRequestUserInformation : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFriendsAsyncActionRequestUserInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionRequestUserInformation, OnCallback, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFriendsAsyncActionRequestUserInformation, UnknownData_J6PZ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFriendsAsyncActionRequestUserInformation, 0x0070);
		}

		// class UGameSearch : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__GameSearch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, SearchForGameProgressDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, SearchForGameResultDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, RequestPlayersForGameProgressDelegate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, RequestPlayersForGameResultDelegate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, RequestPlayersForGameFinalResultDelegate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, SubmitPlayerResultResultDelegate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, EndGameResultDelegate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSearch, UnknownData_ONRB, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSearch, 0x0198);
		}

		// class UGameServer : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__GameServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServer, GSPolicyResponse, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServer, GSClientGroupStatus, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServer, GSValidateAuthTicketResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServer, GSClientApprove, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServer, GSClientDeny, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServer, UnknownData_3P3R, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameServer, 0x0138);
		}

		// class UGameServerStats : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__GameServerStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServerStats, GSStatsUnloaded, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameServerStats, UnknownData_F1SB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameServerStats, 0x0078);
		}

		// class UInput : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Input)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInput, 0x0048);
		}

		// class UInventory : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Inventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, SteamInventoryResultReady, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, SteamInventoryDefinitionUpdate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, SteamInventoryFullUpdate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, SteamInventoryStartPurchaseResult, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, SteamInventoryRequestPricesResultDelegate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, SteamInventoryEligiblePromoItemDefIDs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory, UnknownData_759U, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory, 0x0168);
		}

		// class USteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreInventoryAsyncActionRequestEligiblePromoItemDefinitionsIDs, 0x0040);
		}

		// class USteamCoreInventoryAsyncActionRequestPricesResult : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreInventoryAsyncActionRequestPricesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreInventoryAsyncActionRequestPricesResult, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreInventoryAsyncActionRequestPricesResult, 0x0040);
		}

		// class USteamCoreInventoryAsyncActionStartPurchaseResult : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreInventoryAsyncActionStartPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreInventoryAsyncActionStartPurchaseResult, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreInventoryAsyncActionStartPurchaseResult, 0x0040);
		}

		// class UMatchmaking : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Matchmaking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, FavoritesListAccountsUpdated, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, FavoritesListChanged, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyChatMsg, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyChatUpdate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyDataUpdate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyEnter, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyGameCreated, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyInvite, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, LobbyKicked, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchmaking, UnknownData_V2JP, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchmaking, 0x01F8);
		}

		// class USteamCoreMatchmakingAsyncActionCreateLobby : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreMatchmakingAsyncActionCreateLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreMatchmakingAsyncActionCreateLobby, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreMatchmakingAsyncActionCreateLobby, 0x0040);
		}

		// class USteamCoreMatchmakingAsyncActionRequestLobbyList : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreMatchmakingAsyncActionRequestLobbyList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreMatchmakingAsyncActionRequestLobbyList, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreMatchmakingAsyncActionRequestLobbyList, 0x0040);
		}

		// class USteamCoreMatchmakingAsyncActionJoinLobby : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreMatchmakingAsyncActionJoinLobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreMatchmakingAsyncActionJoinLobby, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreMatchmakingAsyncActionJoinLobby, 0x0040);
		}

		// class USteamCoreCreateSession : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreCreateSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreCreateSession, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreCreateSession, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreCreateSession, UnknownData_6E2E, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreCreateSession, 0x0138);
		}

		// class USteamCoreFindSession : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreFindSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFindSession, OnCallback, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreFindSession, UnknownData_3WLB, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreFindSession, 0x00D0);
		}

		// class USteamCoreDestroySession : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreDestroySession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreDestroySession, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreDestroySession, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreDestroySession, UnknownData_GJRV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreDestroySession, 0x0070);
		}

		// class UMatchmakingServers : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__MatchmakingServers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchmakingServers, 0x0048);
		}

		// class USteamCoreMatchmakingServersAsyncActionPingServer : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreMatchmakingServersAsyncActionPingServer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreMatchmakingServersAsyncActionPingServer, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreMatchmakingServersAsyncActionPingServer, 0x0040);
		}

		// class USteamCoreMatchmakingServersAsyncActionRequestServerList : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreMatchmakingServersAsyncActionRequestServerList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreMatchmakingServersAsyncActionRequestServerList, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreMatchmakingServersAsyncActionRequestServerList, 0x0040);
		}

		// class USteamCoreMatchmakingServersAsyncActionServerRules : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreMatchmakingServersAsyncActionServerRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreMatchmakingServersAsyncActionServerRules, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreMatchmakingServersAsyncActionServerRules, 0x0040);
		}

		// class UServerFilter : public UObject
		TEST_METHOD(Class__SteamCore__ServerFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerFilter, UnknownData_DLQD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerFilter, 0x0038);
		}

		// class UMusic : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Music)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMusic, PlaybackStatusHasChanged, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMusic, VolumeHasChanged, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMusic, UnknownData_35FW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMusic, 0x00A8);
		}

		// class UNetworking : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Networking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworking, OnP2PSessionRequestDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworking, OnP2PSessionConnectFailDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworking, UnknownData_5QMG, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworking, 0x00A8);
		}

		// class UNetworkingUtils : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__NetworkingUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkingUtils, 0x0048);
		}

		// class UParentalSettings : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__ParentalSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParentalSettings, 0x0048);
		}

		// class USteamParties : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__SteamParties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, JoinPartyDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, CreateBeaconDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, ReservationNotificationDelegate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, ChangeNumOpenSlotsDelegate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, AvailableBeaconLocationsDelegate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, ActiveBeaconsDelegate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamParties, UnknownData_UDKR, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamParties, 0x0168);
		}

		// class USteamCoreSteamPartiesAsyncActionJoinParty : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreSteamPartiesAsyncActionJoinParty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSteamPartiesAsyncActionJoinParty, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreSteamPartiesAsyncActionJoinParty, 0x0040);
		}

		// class USteamCoreSteamPartiesAsyncActionCreateBeacon : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreSteamPartiesAsyncActionCreateBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSteamPartiesAsyncActionCreateBeacon, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreSteamPartiesAsyncActionCreateBeacon, 0x0040);
		}

		// class USteamCoreSteamPartiesAsyncActionChangeNumOpenSlots : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreSteamPartiesAsyncActionChangeNumOpenSlots)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreSteamPartiesAsyncActionChangeNumOpenSlots, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreSteamPartiesAsyncActionChangeNumOpenSlots, 0x0040);
		}

		// class URemotePlay : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__RemotePlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemotePlay, SteamRemotePlaySessionConnected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemotePlay, SteamRemotePlaySessionDisconnected, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemotePlay, UnknownData_7EAL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemotePlay, 0x00A8);
		}

		// class URemoteStorage : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__RemoteStorage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteStorage, RemoteStorageUnsubscribePublishedFileResult, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteStorage, RemoteStorageSubscribePublishedFileResult, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteStorage, RemoteStoragePublishedFileUnsubscribed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteStorage, RemoteStoragePublishedFileSubscribed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteStorage, UnknownData_3PB8, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoteStorage, 0x0108);
		}

		// class UScreenshots : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Screenshots)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenshots, ScreenshotReady, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenshots, ScreenshotRequested, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenshots, UnknownData_ISCV, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreenshots, 0x00A8);
		}

		// class UUGC : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__UGC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUGC, ItemInstalled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUGC, DownloadItemResult, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUGC, UnknownData_NPG5, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUGC, 0x00A8);
		}

		// class USteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionStopPlaytimeTrackingForAllItems, 0x0040);
		}

		// class USteamCoreUGCAsyncActionStopPlaytimeTracking : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionStopPlaytimeTracking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionStopPlaytimeTracking, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionStopPlaytimeTracking, 0x0040);
		}

		// class USteamCoreUGCAsyncActionStartPlaytimeTracking : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionStartPlaytimeTracking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionStartPlaytimeTracking, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionStartPlaytimeTracking, 0x0040);
		}

		// class USteamCoreUGCAsyncActionUnsubscribeItem : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionUnsubscribeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionUnsubscribeItem, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionUnsubscribeItem, 0x0040);
		}

		// class USteamCoreUGCAsyncActionSubscribeItem : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionSubscribeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionSubscribeItem, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionSubscribeItem, 0x0040);
		}

		// class USteamCoreUGCAsyncActionRemoveItemFromFavorites : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionRemoveItemFromFavorites)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionRemoveItemFromFavorites, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionRemoveItemFromFavorites, 0x0040);
		}

		// class USteamCoreUGCAsyncActionAddItemToFavorites : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionAddItemToFavorites)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionAddItemToFavorites, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionAddItemToFavorites, 0x0040);
		}

		// class USteamCoreUGCAsyncActionGetUserItemVote : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionGetUserItemVote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionGetUserItemVote, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionGetUserItemVote, 0x0040);
		}

		// class USteamCoreUGCAsyncActionSetUserItemVote : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionSetUserItemVote)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionSetUserItemVote, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionSetUserItemVote, 0x0040);
		}

		// class USteamCoreUGCAsyncActionSubmitItemUpdate : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionSubmitItemUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionSubmitItemUpdate, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionSubmitItemUpdate, 0x0040);
		}

		// class USteamCoreUGCAsyncActionCreateItem : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionCreateItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionCreateItem, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionCreateItem, 0x0040);
		}

		// class USteamCoreUGCAsyncActionSendQueryUGCRequest : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionSendQueryUGCRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionSendQueryUGCRequest, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionSendQueryUGCRequest, 0x0040);
		}

		// class USteamCoreUGCAsyncActionAddAppDependency : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionAddAppDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionAddAppDependency, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionAddAppDependency, 0x0040);
		}

		// class USteamCoreUGCAsyncActionRemoveAppDependency : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionRemoveAppDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionRemoveAppDependency, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionRemoveAppDependency, 0x0040);
		}

		// class USteamCoreUGCAsyncActionAddUGCDependency : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionAddUGCDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionAddUGCDependency, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionAddUGCDependency, 0x0040);
		}

		// class USteamCoreUGCAsyncActionRemoveUGCDependency : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionRemoveUGCDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionRemoveUGCDependency, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionRemoveUGCDependency, 0x0040);
		}

		// class USteamCoreUGCAsyncActionDeleteItem : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionDeleteItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionDeleteItem, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionDeleteItem, 0x0040);
		}

		// class USteamCoreUGCAsyncActionGetAppDependencies : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionGetAppDependencies)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionGetAppDependencies, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionGetAppDependencies, 0x0040);
		}

		// class USteamCoreUGCAsyncActionDownloadItem : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUGCAsyncActionDownloadItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUGCAsyncActionDownloadItem, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUGCAsyncActionDownloadItem, 0x0040);
		}

		// class UUser : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__User)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, ClientGameServerDeny, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, GameWebCallback, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, GetAuthSessionTicketResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, IPCFailure, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, LicensesUpdated, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, MicroTxnAuthorizationResponse, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, SteamServerConnectFailure, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, SteamServersConnected, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, SteamServersDisconnected, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, ValidateAuthTicketResponse, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, EncryptedAppTicketResponse, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUser, UnknownData_3HPF, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUser, 0x0258);
		}

		// class USteamCoreUserAsyncActionRequestEncryptedAppTicket : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserAsyncActionRequestEncryptedAppTicket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserAsyncActionRequestEncryptedAppTicket, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserAsyncActionRequestEncryptedAppTicket, 0x0040);
		}

		// class USteamCoreUserAsyncActionRequestStoreAuthURL : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserAsyncActionRequestStoreAuthURL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserAsyncActionRequestStoreAuthURL, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserAsyncActionRequestStoreAuthURL, 0x0040);
		}

		// class UUserStats : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__UserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserStats, UserAchievementIconFetched, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserStats, UserAchievementStored, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserStats, UserStatsReceived, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserStats, UserStatsStored, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserStats, UserStatsUnloaded, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserStats, UnknownData_ZSVR, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserStats, 0x0138);
		}

		// class USteamCoreUserStatsAsyncActionFindLeaderboard : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionFindLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionFindLeaderboard, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionFindLeaderboard, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionDownloadLeaderboardEntries : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionDownloadLeaderboardEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionDownloadLeaderboardEntries, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionDownloadLeaderboardEntries, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionDownloadRequestGlobalStats : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionDownloadRequestGlobalStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionDownloadRequestGlobalStats, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionDownloadRequestGlobalStats, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionRequestGlobalAchievementPercentages, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionGetNumberOfCurrentPlayers, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionUploadLeaderboardScore : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionUploadLeaderboardScore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionUploadLeaderboardScore, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionUploadLeaderboardScore, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionFindOrCreateLeaderboard : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionFindOrCreateLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionFindOrCreateLeaderboard, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionFindOrCreateLeaderboard, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionRequestUserStats : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionRequestUserStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionRequestUserStats, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionRequestUserStats, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionDownloadLeaderboardEntriesForUsers, 0x0040);
		}

		// class USteamCoreUserStatsAsyncActionAttachLeaderboardUGC : public USteamCoreAsyncAction
		TEST_METHOD(Class__SteamCore__SteamCoreUserStatsAsyncActionAttachLeaderboardUGC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreUserStatsAsyncActionAttachLeaderboardUGC, OnCallback, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreUserStatsAsyncActionAttachLeaderboardUGC, 0x0040);
		}

		// class USteamCoreVoice : public USoundWaveProcedural
		TEST_METHOD(Class__SteamCore__SteamCoreVoice)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreVoice, 0x03C0);
		}

		// class USteamUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SteamCore__SteamUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamUtilities, 0x0028);
		}

		// class UUtils : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Utils)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUtils, CheckFileSignature, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUtils, GamepadTextInputDismissed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUtils, IPCountry, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUtils, LowBatteryPower, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUtils, SteamShutdown, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUtils, UnknownData_FZXB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUtils, 0x0138);
		}

		// class UVideo : public USteamCoreSubsystem
		TEST_METHOD(Class__SteamCore__Video)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideo, GetOPFSettingsResult, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideo, GetVideoURLResult, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideo, UnknownData_306M, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideo, 0x00A8);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_QRM0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_JMVI, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UMagicLeapAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAudio__MagicLeapAudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapAudioFunctionLibrary, 0x0028);
		}

		// class ABP_PlayerCameraManager_C : public APlayerCameraManager
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerCameraManager__BP_PlayerCameraManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerCameraManager_C, 0x27B0);
		}

		// class UBI_PlayerController_HUD_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BI_PlayerController_HUD__BI_PlayerController_HUD_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBI_PlayerController_HUD_C, 0x0028);
		}

		// class UBTTask_ClearActualTargetPawn_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_ClearActualTargetPawn__BTTask_ClearActualTargetPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearActualTargetPawn_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearActualTargetPawn_C, TargetActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearActualTargetPawn_C, SetFocusOn_, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ClearActualTargetPawn_C, 0x00D9);
		}

		// class UBTask_SimpleFinishFine_DoNothing_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_SimpleFinishFine_DoNothing__BTask_SimpleFinishFine_DoNothing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_SimpleFinishFine_DoNothing_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_SimpleFinishFine_DoNothing_C, 0x00B0);
		}

		// class ABP_RendevousPoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_RendevousPoint__BP_RendevousPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RendevousPoint_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_RendevousPoint_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_RendevousPoint_C, 0x0230);
		}

		// class UW_CreateSessionFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_CreateSessionFrame__W_CreateSessionFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, Overlay_4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, T_Empty, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, TextBlock_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, Throbber_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_Back, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_ChooseMapWidget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_MainFrameButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_SliderButtonMaxPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_SwitchButtonDifficulties, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_SwitchButtonFriendOrEverybody, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_SwitchButtonNetwork, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_TextInsertEditable, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, W_WarningNoOnlineSubsystemFrame, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, LastHoveredButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, DefaultHoveredButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, GameInstance, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, IsUseLan, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, UnknownData_NZVW, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, MaxPlayers, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, DefaultMaxPlayers, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreateSessionFrame_C, DefaultUseLAN, 0x0324);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_CreateSessionFrame_C, 0x0328);
		}

		// class UWB_Text03_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Text03__WB_Text03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, ButtonText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, HB_Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, OV_IconLeft, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, OV_IconRight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, SB_Icon_Left, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text03_C, SB_Icon_Right, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Text03_C, 0x0298);
		}

		// class UWB_FillColor_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_FillColor__WB_FillColor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, CP_Base, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, Img_Color, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, Img_Highlight_3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, Img_Highlight1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, FillColor_Normal, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, FillColor_Hovered, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, FillColor_Clicked, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FillColor_C, FillColor_Disabled, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_FillColor_C, 0x02C8);
		}

		// class UW_BasicInteractionWidgetShowKeysBinding_C : public UW_MasterInteractionWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_BasicInteractionWidgetShowKeysBinding__W_BasicInteractionWidgetShowKeysBinding_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, KeyBindsBorder, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, KeyBindsGrid, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, TB_Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, Colums, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, Key_Bind_Text_Size, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, ActionNameForInputKeySearch, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, UnknownData_VA1H, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_BasicInteractionWidgetShowKeysBinding_C, ActionText, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_BasicInteractionWidgetShowKeysBinding_C, 0x02B8);
		}

		// class UWB_SelectChapter_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_SelectChapter__WB_SelectChapter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_11, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_12, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_13, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_14, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_15, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_16, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_17, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_18, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_19, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_01, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_02, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_03, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_04, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_05, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_06, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_07, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_08, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Button_Chapter_09, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, Image_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, SB_Tabs, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, TextButton_MainMenu, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, TextButton_Play, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, TextButton_SelectChapter, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, WB_Foreground, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, OnClicked_Back, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SelectChapter_C, FocusTimer, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_SelectChapter_C, 0x0350);
		}

		// class UWB_PlayButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_PlayButton__WB_PlayButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FadeFrameDynamic, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FadeFrameBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, b_ContentWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, b_FrameBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Frame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Frame_Dynamic, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OV_Base, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OV_ContentWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, SB_ContentWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, SB_Frame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, SB_Image, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, SB_NativeButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, SB_Text, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, WB_NativeButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, WB_PMM_B01_Image, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, WB_PMM_B02_Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnClicked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnHovered, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnUnhovered, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnPressed, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnReleased, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFont_Normal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineTypeFace_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontSize_Normal, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_PJEL, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFont_Hovered, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineTypeFace_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontSize_Hovered, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_S2P0, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFont_Clicked, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineTypeFace_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontSize_Clicked, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_KY7S, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ButtonTypeText, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ButtonHeadline, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ButtonDescription, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontColor_Clicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontColor_Normal, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontColor_Hovered, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Text_Players, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Icon_Players, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, IsEnabled, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_SA0N, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ButtonSize, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, bGamepadFocus, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, bDetectInput, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_60AZ, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFont_Disabled, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineTypeFace_Disabled, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontSize_Disabled, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, HeadlineFontColor_Disabled, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_U95L, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnDisabled, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Timer_TextSizeCheck, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ContentWidget, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnClicked_Sound, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnHovered_Sound, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, IsDesignTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_KUYE, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameColor_Normal, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameColor_Hovered, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameColor_Clicked, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameColor_Disabled, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameShineColor_Normal, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameShineColor_Hovered, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameShineColor_Clicked, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameShineColor_Disabled, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameThickness_Normal, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Image, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageTranslation, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageColor_Normal, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameBlockColor_Hovered, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageColor_Hovered, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameBlockColor_Clicked, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageColor_Clicked, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageColor_Disabled, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageSaturation_Normal, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageSaturation_Hovered, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageSaturation_Clicked, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, ImageSaturation_Disabled, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, VignetteColor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFont_Normal, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionTypeFace_Normal, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontSize_Normal, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontColor_Normal, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_5SFA, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFont_Hovered, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFont_Clicked, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFont_Disabled, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionTypeFace_Hovered, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionTypeFace_Clicked, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionTypeFace_Disabled, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontSize_Hovered, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontSize_Clicked, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontSize_Disabled, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontColor_Hovered, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontColor_Clicked, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, DescriptionFontColor_Disabled, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Scale_Hovered, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Scale_Clicked, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, NewScaleValue, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_NKBM, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnFocused, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, OnUnfocused, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, bResponsiveFocus, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_MWL9, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameThickness_Hovered, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Duration_Clicked, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, FrameThickness_Clicked, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFont_Normal, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFont_Hovered, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFont_Clicked, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFont_Disabled, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_TypeFace_Normal, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_TypeFace_Hovered, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_TypeFace_Clicked, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_TypeFace_Disabled, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_FontSize_Normal, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_FontSize_Hovered, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_FontSize_Clicked, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, Type_FontSize_Disabled, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFontColor_Normal, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFontColor_Hovered, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFontColor_Clicked, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, TypeFontColor_Disabled, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, bIsNativeHovering, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, UnknownData_9TZZ, 0x0701);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, AdditionalInfoColor_Normal, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, AdditionalInfoColor_Hovered, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, AdditionalInfoColor_Clicked, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_PlayButton_C, AdditionalInfoColor_Disabled, 0x0734);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_PlayButton_C, 0x0744);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_TDAZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_YV3S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_9TC1, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_DZ69, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_C2BG, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_BRJBABGHL1, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_4BSGONZHAE, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_EDNDBF9ZZW, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_7HRC, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_Y2QU, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_B1BY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_M2KX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_7ZMM, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_UM5J, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_CKVZ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_8CRQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_UY6U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_MIX5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_62R0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_FL7L, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_LAJE, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_GP9Y, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_BPXP, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_MWY9, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_3EFB, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_BE88, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_2NKE, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_ZIS6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_ER7B, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_ENOH, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_X0HP, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_4AM6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class ULiveLinkSourceFactory : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceFactory, 0x0028);
		}

		// class ULiveLinkRole : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkRole, 0x0028);
		}

		// class ULiveLinkBasicRole : public ULiveLinkRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkBasicRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkBasicRole, 0x0028);
		}

		// class ULiveLinkAnimationRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkAnimationRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkAnimationRole, 0x0028);
		}

		// class ULiveLinkTransformRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkTransformRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkTransformRole, 0x0028);
		}

		// class ULiveLinkCameraRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCameraRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCameraRole, 0x0028);
		}

		// class ULiveLinkController : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkController, 0x0028);
		}

		// class ULiveLinkSourceSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Mode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, UnknownData_RE5R, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, BufferSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, ConnectionString, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Factory, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceSettings, 0x00A0);
		}

		// class ULiveLinkCurveRemapSettings : public ULiveLinkSourceSettings
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCurveRemapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkCurveRemapSettings, CurveConversionSettings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCurveRemapSettings, 0x00F0);
		}

		// class ULiveLinkFrameInterpolationProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameInterpolationProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameInterpolationProcessor, 0x0028);
		}

		// class ULiveLinkFramePreProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFramePreProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFramePreProcessor, 0x0028);
		}

		// class ULiveLinkFrameTranslator : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameTranslator, 0x0028);
		}

		// class ULiveLinkLightRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkLightRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkLightRole, 0x0028);
		}

		// class ULiveLinkSubjectSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSubjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, PreProcessors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, InterpolationProcessor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Translators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Role, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, FrameRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, bRebroadcastSubject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, UnknownData_T4W7, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSubjectSettings, 0x0068);
		}

		// class ULiveLinkVirtualSubject : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkVirtualSubject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_PTZ8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Role, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Subjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, FrameTranslators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_2BP5, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkVirtualSubject, 0x00D8);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_NXYL, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_2NGL, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_ZNO4, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_UTZS, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, Properties, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_I6AK, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_48JI, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_JQEW, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_F9UT, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_THQ2, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_M3AO, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_N1D7, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x0318);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_A5GN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UW_SingleplayerFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_SingleplayerFrame__W_SingleplayerFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, TextBlock_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, VerticalBox_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, W_Button_StartSinglePlayer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, W_ChooseMapWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, W_MainFrameButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, W_SwitchButtonDifficulties, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, GameInstance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SingleplayerFrame_C, SaveSettings, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_SingleplayerFrame_C, 0x02D8);
		}

		// class UW_TextInsertEditable_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_TextInsertEditable__W_TextInsertEditable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, UnknownData_TCBU, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, Border_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, Image_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, InsertAndEditableTextBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, SizeBox_5, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, TextBlock_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, NameOfOption, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, HintTextOfEditableField, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, SetTextTemplateInsteadHintText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, Color, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_TextInsertEditable_C, H_Color, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_TextInsertEditable_C, 0x0350);
		}

		// class ABP_ProjectileEffectOnHitBase_Rocket_C : public ABP_ProjectileEffectOnHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_Rocket__BP_ProjectileEffectOnHitBase_Rocket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UnknownData_XZW9, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, BP_ExplodableComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, Missile, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, RadialForceComponent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, BlastRadialImpulseOnExplosion, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UnknownData_JFWB, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, PhysImpulseRadius, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, PhysImpulseStrength, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DamageToTriggerExplode, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DamageToGetPierced, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DamageExplosionOuterRadius, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DamageExplosionInnerRadius, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DamageExplosionRadialMinimalDamage, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DamageExplosionRadialBaseDamage, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, TimeAfterExplosiveGotPiercedTillExplosionStarts, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DelayWhenExplodeTriggersUntilExplosionStarts, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, ExplosionEffectScale, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UseOptionalCustomExplosionLocation, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DoOptionalSprayShellFragmentsAsProjectiles_, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UnknownData_9WH6, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, PiercedStateSound, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, ExplosionDeathEffect, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DebrisMeshesSpawnOnExplode, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, DebrisDefaultsSpawnImpulseCollision, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, CanCharacterStepUpDebris, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UnknownData_2P0S, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, NewVar_3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, MinHitsToExplodeRegardlessOfDamge, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, Debug_Visualize_Explosion_Radius, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, UnknownData_G6QC, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, InstigatedByTemp, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_Rocket_C, 0x03C0);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UAudioCapture : public UAudioGenerator
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_3EGK, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B0);
		}

		// class UAudioCaptureFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0028);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_IDJG, 0x06C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0780);
		}

		// class AAll_Characters_Base_Class : public ACharacter
		TEST_METHOD(Class__RegainEarth_FS__All_Characters_Base_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAll_Characters_Base_Class, UnknownData_VY3I, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAll_Characters_Base_Class, StateOfWalkSpeedt, 0x04BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAll_Characters_Base_Class, StateOfCharacterGender, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAll_Characters_Base_Class, UnknownData_ZJ87, 0x04C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAll_Characters_Base_Class, 0x04C8);
		}

		// class UBPFunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__RegainEarth_FS__BPFunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPFunctionLibrary_C, 0x0028);
		}

		// class UGameInstance_RE_Base : public UGameInstance
		TEST_METHOD(Class__RegainEarth_FS__GameInstance_RE_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance_RE_Base, 0x01A8);
		}

		// class UMyGetFriendsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__RegainEarth_FS__MyGetFriendsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyGetFriendsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyGetFriendsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyGetFriendsCallbackProxy, UnknownData_5ZUA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyGetFriendsCallbackProxy, 0x0070);
		}

		// class UMyGetLeaderBoardEntryIntegerCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__RegainEarth_FS__MyGetLeaderBoardEntryIntegerCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyGetLeaderBoardEntryIntegerCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyGetLeaderBoardEntryIntegerCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyGetLeaderBoardEntryIntegerCallbackProxy, UnknownData_BEG1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyGetLeaderBoardEntryIntegerCallbackProxy, 0x00A0);
		}

		// class AProjectile_Base : public AActor
		TEST_METHOD(Class__RegainEarth_FS__Projectile_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, SphereComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, StaticMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, ProjectileMovementComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, OnHitEffect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, BulletTraceEffect, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, DamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, Damage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AProjectile_Base, UnknownData_RMFX, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProjectile_Base, 0x0258);
		}

		// class UProjectile_PistolDefault_C : public UObject
		TEST_METHOD(Class__RegainEarth_FS__Projectile_PistolDefault_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectile_PistolDefault_C, 0x0028);
		}

		// class ARegainEarth_FSGameModeBase : public AGameModeBase
		TEST_METHOD(Class__RegainEarth_FS__RegainEarth_FSGameModeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARegainEarth_FSGameModeBase, 0x02C0);
		}

		// class ATPS_PlayerCharacter_Base : public AAll_Characters_Base_Class
		TEST_METHOD(Class__RegainEarth_FS__TPS_PlayerCharacter_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, DT_PlayerCharacterStats, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, CameraBoom, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, FollowCamera, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, BaseTurnRate, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, BaseLookUpRate, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, MaxHealth, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, CurrentHealth, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, StateOfMenu, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATPS_PlayerCharacter_Base, UnknownData_JNMS, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATPS_PlayerCharacter_Base, 0x0500);
		}

		// class ATPS_Wave_GameMode : public AGameModeBase
		TEST_METHOD(Class__RegainEarth_FS__TPS_Wave_GameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATPS_Wave_GameMode, 0x02C0);
		}

		// class UWeapon_Base_Component_C : public UActorComponent
		TEST_METHOD(Class__RegainEarth_FS__Weapon_Base_Component_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeapon_Base_Component_C, WeaponType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeapon_Base_Component_C, WeaponPawnAnimationGroup, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeapon_Base_Component_C, UnknownData_CI5Z, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeapon_Base_Component_C, WeaponMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeapon_Base_Component_C, UsedPlayerWeaponSlot, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeapon_Base_Component_C, UnknownData_KR17, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeapon_Base_Component_C, 0x00C8);
		}

		// class ABP_HUD_MainMenu_C : public AHUD
		TEST_METHOD(BlueprintGeneratedClass__BP_HUD_MainMenu__BP_HUD_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HUD_MainMenu_C, UberGraphFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HUD_MainMenu_C, DefaultSceneRoot, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HUD_MainMenu_C, WB_ProMainMenu, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HUD_MainMenu_C, 0x0328);
		}

		// class UW_Setting_PlayerSettingsFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_PlayerSettingsFrame__W_Setting_PlayerSettingsFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, W_Back, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, W_PlayerModelSkin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, W_ResChang, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, W_ResDef, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, W_WarningFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, WidgetSwitcher_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, SaveSettings, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, SettingsBufer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, GameInstance, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_PlayerSettingsFrame_C, ConstructorRunAlready, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_PlayerSettingsFrame_C, 0x0309);
		}

		// class UW_Setting_KeysFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_KeysFrame__W_Setting_KeysFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, KeysList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, Overlay_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, ScrollBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, TextBlock_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, W_Back, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, W_ResetDefaults, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, W_ResetSavedKeySettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, W_TimerWarningFrameSaveChanges, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, W_WarningFramePressSelectedKey, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, WidgetSwitcher_1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, SaveSettings, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, SettingsBufer, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, FocusKey, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, GameInstance, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, KeyWidgetsList, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_KeysFrame_C, CleanedSettingsbuffer, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_KeysFrame_C, 0x0330);
		}

		// class UBP_DamageType_BaseREWave_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_BaseREWave__BP_DamageType_BaseREWave_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DamageType_BaseREWave_C, DamageForceAndVisualEffectType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DamageType_BaseREWave_C, UnknownData_QOZD, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DamageType_BaseREWave_C, PercentageDamageAbsorbtionOfBodyShield, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_BaseREWave_C, 0x0048);
		}

		// class ABP_Grenade_AOE_HealPuls_C : public ABP_Grenade_AOE_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_HealPuls__BP_Grenade_AOE_HealPuls_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_HealPuls_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Grenade_AOE_HealPuls_C, HealAmount, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_HealPuls_C, 0x0374);
		}

		// class UW_MainMenu_C : public UW_MasterWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MainMenu__W_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, tb_Version, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, tb_VersionNumber, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_AchievementsFrame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_CreateSessionFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_CreditsRoll, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_ExtraFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_FindSessionFrame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_LeaderboardFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_MainFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_MultiplayerFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_QuitFrame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_BrightnessFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_ControlsFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_DisplayFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_GameplayFrame, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_KeysFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_PlayerSettingsFrame, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_ScreenFrame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_Setting_SoundFrame, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_SettingsFrame, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_SingleplayerFrame, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_SupportUs, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_SwitchLanguage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameDiscord, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameDocumentation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameFacebook, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameFacebookGroupDe, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameRateUs, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameReddit, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameServerResponse, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameSteamForums, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameSteamStorePage, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameSupport, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameTwitter, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, W_WarningFrameYoutube, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, WB_Foreground, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, WidgetSwitcher_1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, WidgetSwitcher_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, CurrentActiveWidget, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, Sequncer, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, GameInstance, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, LeaderBoardScoreTesting, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, LeaderBoardNameTesting, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, UnknownData_MPDK, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MainMenu_C, SteamLeaderBoardRefTesting, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MainMenu_C, 0x03D8);
		}

		// class UBPI_ActorUsesWeaponComponentMustHaveInterfaces_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ActorUsesWeaponComponentMustHaveInterfaces__BPI_ActorUsesWeaponComponentMustHaveInterfaces_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ActorUsesWeaponComponentMustHaveInterfaces_C, 0x0028);
		}

		// class UBPI_PickUpAndInteract_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PickUpAndInteract_Interface__BPI_PickUpAndInteract_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PickUpAndInteract_Interface_C, 0x0028);
		}

		// class UBPI_Gamestate_WaveRE_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Gamestate_WaveRE_Interface__BPI_Gamestate_WaveRE_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Gamestate_WaveRE_Interface_C, 0x0028);
		}

		// class ABP_ProjectileEffectOnHitBase_BoltLongRange_child_red_AI_C : public ABP_ProjectileEffectOnHitBase_BoltLongRange_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_BoltLongRange_child_red_AI__BP_ProjectileEffectOnHitBase_BoltLongRange_child_red_AI_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_BoltLongRange_child_red_AI_C, 0x02D9);
		}

		// class ABP_Grenade_Spawn_RocketTurret_C : public ABP_Grenade_Spawn_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_Spawn_RocketTurret__BP_Grenade_Spawn_RocketTurret_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_Spawn_RocketTurret_C, 0x02B8);
		}

		// class UTrophySystem_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__TrophySystem_AnimBP__TrophySystem_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, UnknownData_YR3W, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_TransitionResult_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_TransitionResult, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_SequencePlayer_3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_StateResult_3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_SequencePlayer_2, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_StateResult_2, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_SequencePlayer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_StateResult, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, AnimGraphNode_StateMachine, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrophySystem_AnimBP_C, OnGround_, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrophySystem_AnimBP_C, 0x0609);
		}

		// class UBP_Save_Brightness_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_Brightness_Settings__BP_Save_Brightness_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Brightness_Settings_C, Default_Settings_Brightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Brightness_Settings_C, Settings_Brightness, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_Brightness_Settings_C, 0x0040);
		}

		// class UBP_NavFilterSpawnlocationsHangar_C : public UNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__BP_NavFilterSpawnlocationsHangar__BP_NavFilterSpawnlocationsHangar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavFilterSpawnlocationsHangar_C, 0x0048);
		}

		// class UW_SwitchButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_SwitchButton__W_SwitchButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, UnknownData_UFP3, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Border_Arrowleft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Button_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Button_ArrowLeft, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Button_ArrowRight, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, ComboBoxSwitchIdTexts, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Image_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, SizeBox_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, SizeBoxSelectedItem, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, TextBlockSwitchIdTexts, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, TextBlockTitle, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, WidgetSwitcherSimpleSwitchCombobox, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Text, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Color, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, H_Color, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, Description, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, ID, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, OnChangeValue, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, CurrentChoosedID, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, CurrentChoosedName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, ResetValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, SetDefaultSelectedItemNumber, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, StartDeactivatedAndWithoutArrows, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, UnknownData_VVWC, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, SkipOptionsSkipIntegerIDs, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, UseComboBoxInsteadSimpleSwitch, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, UnknownData_DQGD, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, ValueSetBeforeCombobBox, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, GateForExecututeOnValueChangeOpen_, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, UnknownData_KK1S, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, ComboBoxSelectionChangeCallFinishedOpenGate, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, CustomSelectedItemWidthOverride, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, DebugPrintOutIfHovered, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SwitchButton_C, DEPR_SetAllFontsToScifiIngameFont_, 0x03FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_SwitchButton_C, 0x03FE);
		}

		// class ABP_Clip_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Clip__BP_Clip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, ClipMesh, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, SmoothScale_Alpha_6D876D0D4DA9F098F717B9A00564D121, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, SmoothScale__Direction_6D876D0D4DA9F098F717B9A00564D121, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, UnknownData_H2FH, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, SmoothScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, Clip_StaticMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, Sound, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, freeze, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, UnknownData_YV3C, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, LifeTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, CurrentScale, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, ImpulseVector, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Clip_C, ImpulseStrength, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Clip_C, 0x027C);
		}

		// class UWB_NavState_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_NavState__WB_NavState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NavState_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_NavState_C, b_Content, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_NavState_C, 0x0270);
		}

		// class ABP_MainMenu_GameMode_C : public AGameModeBase
		TEST_METHOD(BlueprintGeneratedClass__BP_MainMenu_GameMode__BP_MainMenu_GameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_MainMenu_GameMode_C, DefaultSceneRoot, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_MainMenu_GameMode_C, 0x02C8);
		}

		// class ARigConstraint : public AActor
		TEST_METHOD(Class__ARigRuntime__RigConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, BillboardComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, bW2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, bW3, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, bW4, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, bW5, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, W1, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, W2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, W3, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, W4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, W5, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, TargetActors, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, bEnable, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, bUseWithRig, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigConstraint, UnknownData_YO12, 0x0252);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigConstraint, 0x0258);
		}

		// class AAimConstraint : public ARigConstraint
		TEST_METHOD(Class__ARigRuntime__AimConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAimConstraint, AimSettings, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAimConstraint, UpVector, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAimConstraint, UpActor, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAimConstraint, RestPosition, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAimConstraint, UnknownData_NOQR, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAimConstraint, 0x02A0);
		}

		// class AARControllerBase : public AActor
		TEST_METHOD(Class__ARigRuntime__ARControllerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerBase, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerBase, MaterialInterface, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerBase, Color, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerBase, Rig, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARControllerBase, 0x0248);
		}

		// class AARController : public AARControllerBase
		TEST_METHOD(Class__ARigRuntime__ARController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARController, Mesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARController, Limits, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARController, LockedRotation, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARController, 0x02A8);
		}

		// class AAnimOffset : public AARController
		TEST_METHOD(Class__ARigRuntime__AnimOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, Weight, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, bOverride, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, bShowTargetActor, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, UnknownData_VY6J, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, Source, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, Target, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, Parent, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, UnknownData_4GZO, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, OverrideOffset, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, bEnable, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAnimOffset, UnknownData_L3RB, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnimOffset, 0x0310);
		}

		// class AARControllerFk : public AARController
		TEST_METHOD(Class__ARigRuntime__ARControllerFk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFk, FollowParent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFk, UnknownData_0512, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARControllerFk, 0x02B0);
		}

		// class AARControllerFkIk : public AARControllerBase
		TEST_METHOD(Class__ARigRuntime__ARControllerFkIk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Billboard, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Sphere, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Size, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, FkIk, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, bFkIkAutoSnap, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, bShowTwistControllers, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, bEnableFingers, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, UnknownData_SDW3, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Curl, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Spread, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Relax, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, ThumbCurl, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, ThumbRoll, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, ThumbPitch, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, ThumbYaw, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, bEnableFoot, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, UnknownData_QF96, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, FootRoll, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, ToeRoll, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, HeelTwist, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, ToeTwist, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, FingersAxis, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, UnknownData_9I19, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, Offsets, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, FingersReason, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerFkIk, FootReason, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARControllerFkIk, 0x02C8);
		}

		// class AARControllerIk : public AARController
		TEST_METHOD(Class__ARigRuntime__ARControllerIk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, StretchScale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, bAllowStretching, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, bSoftStretch, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, UnknownData_MXTA, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, StretchSoftness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, PoleVectorLock, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, ThreeBoneIkBend, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerIk, UnknownData_V1HK, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARControllerIk, 0x02C0);
		}

		// class AARControllerPv : public AARController
		TEST_METHOD(Class__ARigRuntime__ARControllerPv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerPv, bAttachToIk, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerPv, UnknownData_OW2G, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerPv, IkController, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerPv, MainController, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerPv, PvGroup, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARControllerPv, 0x02C8);
		}

		// class AARControllerSplineIk : public AARController
		TEST_METHOD(Class__ARigRuntime__ARControllerSplineIk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerSplineIk, bFkMode, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerSplineIk, bSolveEnds, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerSplineIk, UnknownData_UJU5, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerSplineIk, Curvature, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerSplineIk, MidParentWeight, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARControllerSplineIk, MidParentLerp, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARControllerSplineIk, 0x02B8);
		}

		// class UARigFunctions : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ARigRuntime__ARigFunctions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARigFunctions, 0x0028);
		}

		// class UARCustomCtrl : public UARigFunctions
		TEST_METHOD(Class__ARigRuntime__ARCustomCtrl)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCustomCtrl, 0x0028);
		}

		// class UARFace : public UARigFunctions
		TEST_METHOD(Class__ARigRuntime__ARFace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFace, 0x0028);
		}

		// class UARFkHierarchy : public UARigFunctions
		TEST_METHOD(Class__ARigRuntime__ARFkHierarchy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFkHierarchy, 0x0028);
		}

		// class UARFkIk : public UARigFunctions
		TEST_METHOD(Class__ARigRuntime__ARFkIk)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFkIk, 0x0028);
		}

		// class UARMFunctions : public UARigFunctions
		TEST_METHOD(Class__ARigRuntime__ARMFunctions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMFunctions, 0x0028);
		}

		// class ARigModular : public ASkeletalMeshActor
		TEST_METHOD(Class__ARigRuntime__RigModular)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, bTickInEditor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, bUpdateIfInFrustumOnly, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, bInFrustum, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, bForceUpdate, 0x02AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, LastRenderTime, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, Prefix, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, BonesTransforms, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, SourceBT, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, UnknownData_L80A, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, ModularRigData, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, FaceRigData, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, PostParentControllersData, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, PostCreateConstraintsData, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, SourceActor, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, bIsolateSelected, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, UnknownData_8UWW, 0x0759);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, MeshPhysicsAsset, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, AnimOffsets, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, Controllers, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARigModular, UnknownData_VB6R, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigModular, 0x0790);
		}

		// class AOrientConstraint : public ARigConstraint
		TEST_METHOD(Class__ARigRuntime__OrientConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOrientConstraint, Offset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOrientConstraint, RestPosition, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOrientConstraint, 0x0270);
		}

		// class AParentConstraint : public ARigConstraint
		TEST_METHOD(Class__ARigRuntime__ParentConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AParentConstraint, Offsets, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParentConstraint, UnknownData_BOMF, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AParentConstraint, RestPosition, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParentConstraint, 0x02A0);
		}

		// class APointConstraint : public ARigConstraint
		TEST_METHOD(Class__ARigRuntime__PointConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointConstraint, Offset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APointConstraint, RestPosition, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointConstraint, 0x0270);
		}

		// class AScaleConstraint : public ARigConstraint
		TEST_METHOD(Class__ARigRuntime__ScaleConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScaleConstraint, Offset, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScaleConstraint, RestPosition, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScaleConstraint, 0x0270);
		}

		// class UARSplineIk : public UARigFunctions
		TEST_METHOD(Class__ARigRuntime__ARSplineIk)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSplineIk, 0x0028);
		}

		// class AARTickableActor : public AActor
		TEST_METHOD(Class__ARigRuntime__ARTickableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARTickableActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARTickableActor, bTickInEditor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARTickableActor, UnknownData_1AGY, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARTickableActor, 0x0230);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_ABX5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_K4VK, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_IJPZ, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F8);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertyTrack, UnknownData_X448, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x00B0);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_WYUC, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_3S3U, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, UnknownData_QQRO, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0090);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_X8O7, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_U9TE, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_KEW7, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_ZNXG, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_CG4A, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_O9HU, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_2WIL, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_042O, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_5SDE, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_PO0U, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_C5D7, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_WPDC, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_2HT5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_TM53, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_8WTW, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_E3W4, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_59A4, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_Y2WD, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_JT8A, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_1W4I, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_52F5, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_RK2M, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_NCZI, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, ClickMethod, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, TouchMethod, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, PressMethod, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_SN0Q, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_2QSY, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_NCZU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_3DPJ, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_KC0N, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_ML3C, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_R7QI, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_J61I, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_BZ33, 0x0D79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_ZXEX, 0x0D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_OQNX, 0x0DB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0E00);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_RGKN, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_WAIU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_K9O2, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_GXJK, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_OW2F, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, RadialBoxSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_DKZ6, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01D8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01E0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_25RP, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0427);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_VJZV, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_4A5T, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0460);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_SL5W, 0x09E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A02);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A03);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_GONU, 0x0A06);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_8R86, 0x0A28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A38);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_KXFZ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_4RT1, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_IQHP, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_Z9IS, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_24VF, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_W65N, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_LNKF, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_ZSI6, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_XAGP, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_NTM3, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_386F, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_USRW, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_2WYF, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0700);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_YVUV, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_BE7X, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_CRXE, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_R6GB, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_TZMC, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_BP47, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_V0GU, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_4ACH, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetUserMenuContentEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x014A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x014B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_OAOF, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_EQ74, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0170);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
		TEST_METHOD(Class__UMG__MovieScene2DTransformPropertySystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformPropertySystem, 0x0050);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_PPWY, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_MJYL, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00A8);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginTrack, UnknownData_W0IB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00B0);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_RJCV, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00A8);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_4LYK, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_X0TO, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_M656, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_JXZI, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0470);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BD3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_GL2J, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_AYQT, 0x0C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C98);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_N19K, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_XJ9F, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_5CU1, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_QBK5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_M5NV, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_ATMD, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_LAJC, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, bRetainRender, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_Q6ZD, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_0B39, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_OUG3, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_LJRG, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextTransformPolicy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_ZKX2, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_0ETA, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0678);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_5673, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_XBQO, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_IO8Z, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_HD3Y, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_QA2M, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_JJIR, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_LCEK, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_9ZH7, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_XECP, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_TUNY, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_36Z1, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_X5GS, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_74PT, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_9PET, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_CI7Q, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_2AWJ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_ZUXS, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_A4FB, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_JDB1, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_7NVI, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_PQPS, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_KRIQ, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_LX8I, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_YI6Q, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_8GPM, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_0YDA, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GYE5, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_K42N, 0x048A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_ZNWV, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_4EHQ, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0520);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_KIEP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextTransformPolicy, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_0ZHN, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A8);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_BTNN, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_5VMP, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_G88L, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_DA6A, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_FO8V, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_2IOR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_C1D8, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, RootTemplateInstance, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_YF8M, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0578);
		}

		// class UUMGSequenceTickManager : public UObject
		TEST_METHOD(Class__UMG__UMGSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, WeakUserWidgets, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, Linker, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequenceTickManager, UnknownData_T5ID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequenceTickManager, 0x0120);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_TFD3, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_X4NO, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_LW7B, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_34XE, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, OnVisibilityChanged, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_JS7B, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationTickManager, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_O0WC, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_C46F, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_BBL5, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_UOO3, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_E2U1, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_9TZU, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_Y2Z7, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_SWYW, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0090);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_TXXU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_R4UP, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0368);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_EOZG, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_85LU, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_LD07, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_WOFK, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_W8EK, 0x04D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_OZOW, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_DBLY, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickMode, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_K4A7, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_373K, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0590);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_S9OV, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_PD67, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_D8FG, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugSphereLineThickness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugLineThickness, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_WF4G, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_6AMY, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_PX65, 0x03F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0400);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_I53S, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_JL0I, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_EMJ4, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_DS9L, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_LJQO, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapSize, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, Orientation, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_D5S3, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0148);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_SDCC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_FP1N, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_0ECR, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_G3MN, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_AZCZ, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x0800);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_77PH, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_JGDO, 0x08B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08C0);
		}

		// class UWB_Background_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Background__WB_Background_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Background_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Background_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Background_C, GrungeMask, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Background_C, Img_Background, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Background_C, 0x0280);
		}

		// class UWB_TabButton02_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_TabButton02__WB_TabButton02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameFX_ClickedAnim, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, b_FrameFX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FillColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameFX_Clicked, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OV_Base, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OV_ContentWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, SB_ContentWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, SB_FillColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, SB_Frame, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, SB_FrameFX, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, SB_NativeButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, SB_Text, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, WB_Frame02, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, WB_NativeButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, WB_Text04, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnClicked, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnHovered, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnUnhovered, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnPressed, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnReleased, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, Font_Normal, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, TypeFace_Normal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontSize_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_YWC2, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, Font_Hovered, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, TypeFace_Hovered, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontSize_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_O79K, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, Font_Clicked, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, TypeFace_Clicked, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontSize_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, Duration_Clicked, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, ButtonText, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontColor_Clicked, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontColor_Normal, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontColor_Hovered, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, IsEnabled, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, bDetectInput, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_52IG, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, HintIcon, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, Font_Disabled, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, TypeFace_Disabled, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontSize_Disabled, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FontColor_Disabled, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_063N, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnDisabled, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, Timer_TextSizeCheck, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, ContentWidget, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnClicked_Sound, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnHovered_Sound, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, ButtonSize, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, bGamepadFocus, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, IsDesignTime, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_T4C2, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameColor_Normal, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameColor_Hovered, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameColor_Clicked, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameColor_Disabled, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FillColor_Normal, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FillColor_Hovered, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FillColor_Clicked, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FillColor_Disabled, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, FrameFX_Clicked_Color, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_P80D, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnFocused, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, OnUnfocused, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, bResponsiveFocus, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, UnknownData_ITUR, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_TabButton02_C, HintIconCache, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_TabButton02_C, 0x04F8);
		}

		// class UWB_SettingsButton01_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_SettingsButton01__WB_SettingsButton01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FadeFrameDynamic, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FadeFrameBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, b_ContentWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, b_FrameBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Frame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Frame_Dynamic, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Img_SettingsIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OV_Base, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OV_ContentWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SB_ContentWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SB_Frame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SB_Image, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SB_NativeButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SB_Text, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Text, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, WB_NativeButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, WB_PMM_B01_Image, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnClicked, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnHovered, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnUnhovered, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnPressed, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnReleased, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFont_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineTypeFace_Normal, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontSize_Normal, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_PP90, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFont_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineTypeFace_Hovered, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontSize_Hovered, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_3IO6, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFont_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineTypeFace_Clicked, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontSize_Clicked, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_6F4V, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ButtonTypeText, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ButtonHeadline, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ButtonDescription, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontColor_Clicked, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontColor_Normal, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontColor_Hovered, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, IsEnabled, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_IIIU, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ButtonSize, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, bGamepadFocus, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, bDetectInput, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_EFW0, 0x040E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFont_Disabled, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineTypeFace_Disabled, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontSize_Disabled, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, HeadlineFontColor_Disabled, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_Z0MZ, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnDisabled, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Timer_TextSizeCheck, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ContentWidget, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnClicked_Sound, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnHovered_Sound, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, IsDesignTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_FCVP, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameColor_Normal, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameColor_Hovered, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameColor_Clicked, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameColor_Disabled, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameShineColor_Normal, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameShineColor_Hovered, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameShineColor_Clicked, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameShineColor_Disabled, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameThickness_Normal, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Image, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageTranslation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageColor_Normal, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameBlockColor_Hovered, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageColor_Hovered, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameBlockColor_Clicked, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageColor_Clicked, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageColor_Disabled, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageSaturation_Normal, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageSaturation_Hovered, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageSaturation_Clicked, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, ImageSaturation_Disabled, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, VignetteColor, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFont_Normal, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionTypeFace_Normal, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontSize_Normal, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontColor_Normal, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_9ZUX, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFont_Hovered, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFont_Clicked, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFont_Disabled, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionTypeFace_Hovered, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionTypeFace_Clicked, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionTypeFace_Disabled, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontSize_Hovered, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontSize_Clicked, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontSize_Disabled, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontColor_Hovered, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontColor_Clicked, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, DescriptionFontColor_Disabled, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Scale_Hovered, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Scale_Clicked, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, NewScaleValue, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_OD6K, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnFocused, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, OnUnfocused, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, bResponsiveFocus, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_W0DX, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameThickness_Hovered, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Duration_Clicked, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, FrameThickness_Clicked, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFont_Normal, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFont_Hovered, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFont_Clicked, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFont_Disabled, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_TypeFace_Normal, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_TypeFace_Hovered, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_TypeFace_Clicked, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_TypeFace_Disabled, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_FontSize_Normal, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_FontSize_Hovered, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_FontSize_Clicked, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, Type_FontSize_Disabled, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFontColor_Normal, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFontColor_Hovered, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFontColor_Clicked, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, TypeFontColor_Disabled, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, bIsNativeHovering, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, UnknownData_CKV0, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SettingsIcon, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SettingsIconColor_Normal, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SettingsIconColor_Hovered, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SettingsIconColor_Clicked, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SettingsButton01_C, SettingsIconColor_Disabled, 0x0728);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_SettingsButton01_C, 0x0738);
		}

		// class UW_LobbyFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LobbyFrame__W_LobbyFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, Border_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, Border_22, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, ChatWindowLobby, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, Image_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, Overlay_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, ScrollBox_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, ServersList, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, SizeBox_6, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, T_Ping, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, TestButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, TextBlock_2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, TextBlock_3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, TextBlock_4, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_AdminMenu_PopUp, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_Back, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_BoolButtonReadySwitch, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_ChooseMapWidget, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_Lobby_TimerButtonAndStartButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_SliderButtonMaxPlayers, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_SwitchButtonDifficulties, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_SwitchServerName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, WidgetSwitcher_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, SaveSettings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, SettingsBufer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, UnknownData_0M0F, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, LastHoveredButton, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, DefaultHoveredButton, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, GameInstance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, IsReady, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, UnknownData_KWAX, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, W_PlayersList, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, IsServer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, UnknownData_NGNA, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, PlayerController, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LobbyFrame_C, CounterTryToGetSessionResult, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LobbyFrame_C, 0x03B4);
		}

		// class UW_Setting_SoundFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_SoundFrame__W_Setting_SoundFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Amb, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Back, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Dial, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Effects, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Ex1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Ex2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Master, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_Music, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_ResChang, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_ResDef, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, W_WarningFrame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, WidgetSwitcher_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, SaveSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, SettingsBufer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, UnknownData_0NJW, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, GameInstance, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_SoundFrame_C, ConstructorRunAlready, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_SoundFrame_C, 0x0341);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_2UQ8, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UMagicLeapSecureStorage : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapSecureStorage__MagicLeapSecureStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSecureStorage, 0x0028);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UBP_Shell_Turret_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_Shell_Turret__BP_Shell_Turret_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shell_Turret_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shell_Turret_C, LifeTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shell_Turret_C, UnknownData_2CQC, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shell_Turret_C, SoundHit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Shell_Turret_C, SoundHitEnd, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shell_Turret_C, 0x00D0);
		}

		// class ABP_GrenadeTrejactorySpline_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_GrenadeTrejactorySpline__BP_GrenadeTrejactorySpline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeTrejactorySpline_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeTrejactorySpline_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeTrejactorySpline_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeTrejactorySpline_C, Depricated_BeamMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeTrejactorySpline_C, Depricated_BeamMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_GrenadeTrejactorySpline_C, SplineMeshes, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_GrenadeTrejactorySpline_C, 0x0258);
		}

		// class UWB_SingleName_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_SingleName__WB_SingleName_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleName_C, NameText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleName_C, CreditName, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_SingleName_C, 0x0280);
		}

		// class UBPI_PlayerControllerAdminInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_PlayerControllerAdminInterface__BPI_PlayerControllerAdminInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_PlayerControllerAdminInterface_C, 0x0028);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0228);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_QL9M, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bUseSubstepping, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotVisible, 0x04BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bSkipCableUpdateWhenNotOwnerRecentlyRendered, 0x04BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_20YD, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_3I5B, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0500);
		}

		// class ABP_CaptureActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_CaptureActor__BP_CaptureActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, PointLight1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, SpotLight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, PointLight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, SkeletalMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, SceneCaptureComponent2D, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, Camera, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, DefaultSceneRoot, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, FOV_Anim_FOV_2E9F08174AFC9D8AB650BA99D945E3D4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, FOV_Anim__Direction_2E9F08174AFC9D8AB650BA99D945E3D4, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, UnknownData_UOD1, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_CaptureActor_C, FOV_Anim, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CaptureActor_C, 0x0270);
		}

		// class UW_MasterWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_MasterWidget__W_MasterWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MasterWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_MasterWidget_C, W_Cursor, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_MasterWidget_C, 0x0270);
		}

		// class UWB_Options_Video_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Options_Video__WB_Options_Video_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Button_Back, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Button_ResetDefault, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, InfoButton_LB, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, InfoButton_RB, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_AA_Quality, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_DynamicResolution, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_FoliageQuality, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_FrameRateLimit, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_OverallQuality, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_PostProcessQuality, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_Resolution, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_ResolutionScale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_ShadowQuality, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_TextureQuality, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_VerticalSync, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_ViewDistance, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_VisualEffectsQuality, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Option_WindowMode, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, SB_Tabs, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, Scroll_VideoSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, TextButton_KeyBindings, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, TextButton_MainMenu, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, TextButton_Options, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, WB_Foreground, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, OnClicked_Back, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, FocusTimer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Options_Video_C, bIsMainMenu, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Options_Video_C, 0x0351);
		}

		// class UBP_SimpleReplicatedRagdollSystem_Component_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_SimpleReplicatedRagdollSystem_Component__BP_SimpleReplicatedRagdollSystem_Component_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RecoveryStartTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollEnabled, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, UnknownData_7OO3, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, OwnerCharacter, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollFaceUp, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollOnGround, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, UnknownData_F269, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RagdollWorldRotationYaw, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, TargetRagdollRotation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, PelvisLocation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, MaxErrorInAir, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, MaxErrorOnGround, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, AutomaticRecoveryDelayWhenStill, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RecoverAutomatically, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, UnknownData_A4KN, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, PelvisBoneName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, HeadBoneName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, ServerRateInHzSentUpdateFrequencyOverNet, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, ShouldDrawErrorAmount, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, UnknownData_4GNX, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RecoveryAnimation_FaceDown, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RecoveryAnimation_FaceUp, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, Sound_PlayerDown, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, Sound_PlayerRecovered, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, BKP_MeshCollisionObjectType, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, BKP_MeshCollisionEnable, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, UnknownData_YMPU, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, BKP_CapsuleCollisionChannel, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, Index, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RelativeMeshRotationBase, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, RelativeRotationBeforeStartReviveAnimation, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, TimerDriveInterpolationRevive, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SimpleReplicatedRagdollSystem_Component_C, 0x0168);
		}

		// class UWB_ToolTip_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_ToolTip__WB_ToolTip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Fade, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, b_Shine, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, b_ShineBottom, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, BackgroundImg, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Border_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Img_Row1_Icon1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Img_Row1_Icon2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Img_Row2_Icon1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Img_Row2_Icon2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Content, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_LineBottom, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_LineTop, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row1_Button1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row1_Button2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row1_Icon1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row1_Icon2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row2_Button1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row2_Button2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row2_Icon1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, SB_Row2_Icon2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Text1_Row1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Text1_Row2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Text2_Row1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Text2_Row2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Text3_Row1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Text3_Row2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, VB_Content, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, W_KeyButtonSimpleDisplayRow1Button1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, W_KeyButtonSimpleDisplayRow1Button2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, W_KeyButtonSimpleDisplayRow2Button1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, W_KeyButtonSimpleDisplayRow2Button2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, WidthHeight, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, E_IngameTutorial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, TutorialFinished, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, UnknownData_247K, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Orig_HeightOverwriteContentBox, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Orig_PaddingLineBottomBox, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_ToolTip_C, Orig_PaddingLineTopBox, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_ToolTip_C, 0x0390);
		}

		// class UBP_DamageType_PlayerLauncherBase_C : public UBP_DamageType_BaseREWave_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DamageType_PlayerLauncherBase__BP_DamageType_PlayerLauncherBase_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DamageType_PlayerLauncherBase_C, 0x0048);
		}

		// class ABP_PhysicsEnabledStaticMesh_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PhysicsEnabledStaticMesh__BP_PhysicsEnabledStaticMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, CapsuleNavMeshModifier, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, CapsuleCollisionAiBounce, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, StaticMesh1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, SelectedStaticMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, OverwriteMeshToSelectedStaticMesh_, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, SetSimulatePhysics_, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, OverwriteCanStepOn_, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, OptionalSetCharacterStepOn, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, OverwriteWalkableSlope_, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, OptionalWalkableSlopeSettings, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, UnknownData_Z7PV, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, OptionalWalkableSlopeAngle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, DebugOutputDebugOn_, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, UnknownData_9HZ4, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, LastLocationSentToClients, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, LastRotationSentToClients, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, AngularVelo, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, Linear_Velo, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PhysicsEnabledStaticMesh_C, LastLocationOfNavMeshModifier, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PhysicsEnabledStaticMesh_C, 0x0294);
		}

		// class UWB_Text04_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Text04__WB_Text04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text04_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text04_C, ButtonText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text04_C, HB_Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text04_C, OV_IconRight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Text04_C, SB_Icon_Right, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Text04_C, 0x0288);
		}

		// class UW_KeysButton_headline_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_KeysButton_headline__W_KeysButton_headline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, UnknownData_BAYB, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, SizeBox_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, TextBlock_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, TextBlock_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, Color, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, H_Color, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeysButton_headline_C, OnChangeValue, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_KeysButton_headline_C, 0x0310);
		}

		// class UBP_NavFilterAiDefault_C : public UNavigationQueryFilter
		TEST_METHOD(BlueprintGeneratedClass__BP_NavFilterAiDefault__BP_NavFilterAiDefault_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NavFilterAiDefault_C, 0x0048);
		}

		// class UBP_Save_Sound_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_Sound_Settings__BP_Save_Sound_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Sound_Settings_C, Default_Settings_Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Sound_Settings_C, Settings_Sound, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_Sound_Settings_C, 0x0070);
		}

		// class UBTask_StartAttackOnlyWhenTargetTraceLineIsFree_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_StartAttackOnlyWhenTargetTraceLineIsFree__BTask_StartAttackOnlyWhenTargetTraceLineIsFree_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_StartAttackOnlyWhenTargetTraceLineIsFree_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_StartAttackOnlyWhenTargetTraceLineIsFree_C, 0x00B0);
		}

		// class ABP_Wave_GameState_C : public AGameStateBase
		TEST_METHOD(BlueprintGeneratedClass__BP_Wave_GameState__BP_Wave_GameState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, DefaultSceneRoot, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, CountEnemiesLeft, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, ScoreOverallAsTeam, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, AllPlayersSteamIDsArray, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, OnGameOverWin_GStateReplicated, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, OnGameOverLoose_GStateReplicated, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, AtLeastOnePlayerCheated, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, UnknownData_4XPN, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, OnGameStarts_GStateReplicated, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, GameRoundIsStarted, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, UnknownData_H76K, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, SelectedMapKey_Server, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, PlayersControllersList_OnlyForServerUseable, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, PlayersPawnList, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, OnOnlyFewEnemiesLeft, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, GameIsPaused, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, UnknownData_ACN2, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, CurrentRoundSyncFromGameMode, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, CountOfActivePlayers, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, HighestPlayerCountInMatch, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, ElapsedRoundtime, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Wave_GameState_C, ElapsedMatchtime, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Wave_GameState_C, 0x0330);
		}

		// class UWB_Icon_Y_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_Icon_Y__WB_Icon_Y_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_Icon_Y_C, Icon, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_Icon_Y_C, 0x0268);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UW_KeyButtonSimpleDisplay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_KeyButtonSimpleDisplay__W_KeyButtonSimpleDisplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyButtonSimpleDisplay_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyButtonSimpleDisplay_C, KeyBindImage1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyButtonSimpleDisplay_C, TextBlockImageKey1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyButtonSimpleDisplay_C, ButtonIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyButtonSimpleDisplay_C, ButtonText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_KeyButtonSimpleDisplay_C, FontSize, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_KeyButtonSimpleDisplay_C, 0x029C);
		}

		// class ABP_Path_Points_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Path_Points__BP_Path_Points_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, Arrow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, Path_Visualizer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, Point_Visualizer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, AutoAssignNumbers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, UnknownData_Q3OH, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, Number, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, PathStartNumber, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, ColorOfPath, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, Final_Destination_, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, Update, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, _1To_All_Next_Points, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, UnknownData_A08R, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, NextObjective, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, TimeToWaitMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, TimeToWaitMax, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Path_Points_C, UseDirection, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Path_Points_C, 0x0279);
		}

		// class UBTTask_ResetMakeShortDelayBeforeShootWhenSpotPlayerNextTime_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_ResetMakeShortDelayBeforeShootWhenSpotPlayerNextTime__BTTask_ResetMakeShortDelayBeforeShootWhenSpotPlayerNextTime_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ResetMakeShortDelayBeforeShootWhenSpotPlayerNextTime_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ResetMakeShortDelayBeforeShootWhenSpotPlayerNextTime_C, 0x00B0);
		}

		// class UBTask_Set_DammagesByPossibleActor_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTask_Set_DammagesByPossibleActor__BTask_Set_DammagesByPossibleActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_Set_DammagesByPossibleActor_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_Set_DammagesByPossibleActor_C, GotDamagedFromPossibleTarget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTask_Set_DammagesByPossibleActor_C, NewStateGotDamagedFromPossibleTarget, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTask_Set_DammagesByPossibleActor_C, 0x00D9);
		}

		// class USteamCoreWeb : public UObject
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWeb)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWeb, 0x0028);
		}

		// class USteamCoreWebSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSubsystem, UnknownData_2ENZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebSubsystem, 0x0048);
		}

		// class USteamCoreWebAsyncAction : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebAsyncAction, OnCallback, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebAsyncAction, UnknownData_BP3J, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncAction, 0x0050);
		}

		// class USteamCoreWebSettings : public UDeveloperSettings
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, AsyncTaskTimeout, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, DisabledSubsystems, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, bDebugging, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, bDevMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, UnknownData_M9PT, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, Key, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, AppID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, UnknownData_26AD, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, DevSteamID, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, bSandboxMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamCoreWebSettings, UnknownData_VF1W, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebSettings, 0x0078);
		}

		// class USteamWebUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SteamCoreWeb__SteamWebUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamWebUtilities, 0x0028);
		}

		// class UWebApps : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebApps)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebApps, 0x0048);
		}

		// class USteamCoreAppsAsyncActionGetAppBetas : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetAppBetas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetAppBetas, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetAppBuilds : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetAppBuilds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetAppBuilds, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetAppDepotVersions : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetAppDepotVersions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetAppDepotVersions, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetAppList : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetAppList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetAppList, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetCheatingReports : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetCheatingReports)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetCheatingReports, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetPlayersBanned : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetPlayersBanned)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetPlayersBanned, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetServerList : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetServerList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetServerList, 0x0050);
		}

		// class USteamCoreAppsAsyncActionGetServersAtAddress : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionGetServersAtAddress)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionGetServersAtAddress, 0x0050);
		}

		// class USteamCoreAppsAsyncActionSetAppBuildLive : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionSetAppBuildLive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionSetAppBuildLive, 0x0050);
		}

		// class USteamCoreAppsAsyncActionUpToDateCheck : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreAppsAsyncActionUpToDateCheck)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreAppsAsyncActionUpToDateCheck, 0x0050);
		}

		// class UWebBroadcastService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebBroadcastService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebBroadcastService, 0x0048);
		}

		// class USteamCoreWebAsyncActionPostGameDataFrame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionPostGameDataFrame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionPostGameDataFrame, 0x0050);
		}

		// class UWebCheatReporting : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebCheatReporting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebCheatReporting, 0x0048);
		}

		// class USteamCoreWebAsyncActionReportPlayerCheating : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionReportPlayerCheating)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionReportPlayerCheating, 0x0050);
		}

		// class USteamCoreWebAsyncActionRequestPlayerGameBan : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRequestPlayerGameBan)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRequestPlayerGameBan, 0x0050);
		}

		// class USteamCoreWebAsyncActionRemovePlayerGameBan : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRemovePlayerGameBan)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRemovePlayerGameBan, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetCheatingReports : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetCheatingReports)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetCheatingReports, 0x0050);
		}

		// class USteamCoreWebAsyncActionReportCheatData : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionReportCheatData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionReportCheatData, 0x0050);
		}

		// class USteamCoreWebAsyncActionRequestVacStatusForUser : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRequestVacStatusForUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRequestVacStatusForUser, 0x0050);
		}

		// class USteamCoreWebAsyncActionStartSecureMultiplayerSession : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionStartSecureMultiplayerSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionStartSecureMultiplayerSession, 0x0050);
		}

		// class USteamCoreWebAsyncActionEndSecureMultiplayerSession : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionEndSecureMultiplayerSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionEndSecureMultiplayerSession, 0x0050);
		}

		// class UWebEconMarketService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebEconMarketService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebEconMarketService, 0x0048);
		}

		// class USteamCoreWebAsyncActionGetMarketEligibility : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetMarketEligibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetMarketEligibility, 0x0050);
		}

		// class USteamCoreWebAsyncActionCancelAppListingsForUser : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionCancelAppListingsForUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionCancelAppListingsForUser, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetAssetID : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetAssetID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetAssetID, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPopular : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPopular)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPopular, 0x0050);
		}

		// class UWebEconService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebEconService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebEconService, 0x0048);
		}

		// class USteamCoreWebAsyncActionGetTradeHistory : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetTradeHistory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetTradeHistory, 0x0050);
		}

		// class USteamCoreWebAsyncActionFlushInventoryCache : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionFlushInventoryCache)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionFlushInventoryCache, 0x0050);
		}

		// class USteamCoreWebAsyncActionFlushAssetAppearanceCache : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionFlushAssetAppearanceCache)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionFlushAssetAppearanceCache, 0x0050);
		}

		// class USteamCoreWebAsyncActionFlushContextCache : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionFlushContextCache)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionFlushContextCache, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetTradeOffers : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetTradeOffers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetTradeOffers, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetTradeOffer : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetTradeOffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetTradeOffer, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetTradeOffersSummary : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetTradeOffersSummary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetTradeOffersSummary, 0x0050);
		}

		// class USteamCoreWebAsyncActionDeclineTradeOffer : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionDeclineTradeOffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionDeclineTradeOffer, 0x0050);
		}

		// class USteamCoreWebAsyncActionCancelTradeOffer : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionCancelTradeOffer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionCancelTradeOffer, 0x0050);
		}

		// class UWebGameInventory : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebGameInventory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebGameInventory, 0x0048);
		}

		// class USteamCoreWebAsyncActionGetHistoryCommandDetails : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetHistoryCommandDetails)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetHistoryCommandDetails, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetUserHistory : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetUserHistory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetUserHistory, 0x0050);
		}

		// class USteamCoreWebAsyncActionHistoryExecuteCommand : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionHistoryExecuteCommand)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionHistoryExecuteCommand, 0x0050);
		}

		// class USteamCoreWebAsyncActionSupportGetAssetHistory : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionSupportGetAssetHistory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionSupportGetAssetHistory, 0x0050);
		}

		// class UWebGameNotificationsService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebGameNotificationsService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebGameNotificationsService, 0x0048);
		}

		// class USteamCoreWebAsyncActionCreateSession : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionCreateSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionCreateSession, 0x0050);
		}

		// class USteamCoreWebAsyncActionUpdateSession : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionUpdateSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionUpdateSession, 0x0050);
		}

		// class USteamCoreWebAsyncActionEnumerateSessionsForApp : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionEnumerateSessionsForApp)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionEnumerateSessionsForApp, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetSessionDetailsForApp : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetSessionDetailsForApp)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetSessionDetailsForApp, 0x0050);
		}

		// class USteamCoreWebAsyncActionRequestNotifications : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRequestNotifications)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRequestNotifications, 0x0050);
		}

		// class USteamCoreWebAsyncActionDeleteSession : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionDeleteSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionDeleteSession, 0x0050);
		}

		// class USteamCoreWebAsyncActionDeleteSessionBatch : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionDeleteSessionBatch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionDeleteSessionBatch, 0x0050);
		}

		// class UWebGameServersService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebGameServersService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebGameServersService, 0x0048);
		}

		// class UWebInventoryService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebInventoryService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebInventoryService, 0x0048);
		}

		// class USteamCoreWebAsyncActionAddItem : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionAddItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionAddItem, 0x0050);
		}

		// class USteamCoreWebAsyncActionAddPromoItem : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionAddPromoItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionAddPromoItem, 0x0050);
		}

		// class USteamCoreWebAsyncActionConsumeItem : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionConsumeItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionConsumeItem, 0x0050);
		}

		// class USteamCoreWebAsyncActionExchangeItem : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionExchangeItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionExchangeItem, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetInventory : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetInventory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetInventory, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetItemDefs : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetItemDefs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetItemDefs, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPriceSheet : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPriceSheet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPriceSheet, 0x0050);
		}

		// class USteamCoreWebAsyncActionConsolidate : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionConsolidate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionConsolidate, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetQuantity : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetQuantity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetQuantity, 0x0050);
		}

		// class USteamCoreWebAsyncActionModifyItems : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionModifyItems)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionModifyItems, 0x0050);
		}

		// class UWebLeaderboards : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebLeaderboards)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebLeaderboards, 0x0048);
		}

		// class USteamCoreWebAsyncActionDeleteLeaderboard : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionDeleteLeaderboard)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionDeleteLeaderboard, 0x0050);
		}

		// class USteamCoreWebAsyncActionFindOrCreateLeaderboard : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionFindOrCreateLeaderboard)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionFindOrCreateLeaderboard, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetLeaderboardEntries : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetLeaderboardEntries)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetLeaderboardEntries, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetLeaderboardsForGame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetLeaderboardsForGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetLeaderboardsForGame, 0x0050);
		}

		// class USteamCoreWebAsyncActionResetLeaderboard : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionResetLeaderboard)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionResetLeaderboard, 0x0050);
		}

		// class USteamCoreWebAsyncActionSetLeaderboardScore : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionSetLeaderboardScore)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionSetLeaderboardScore, 0x0050);
		}

		// class UWebLobbyMatchmakingService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebLobbyMatchmakingService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebLobbyMatchmakingService, 0x0048);
		}

		// class UWebMicroTxn : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebMicroTxn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebMicroTxn, 0x0048);
		}

		// class USteamCoreWebAsyncActionAdjustAgreement : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionAdjustAgreement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionAdjustAgreement, 0x0050);
		}

		// class USteamCoreWebAsyncActionCancelAgreement : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionCancelAgreement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionCancelAgreement, 0x0050);
		}

		// class USteamCoreWebAsyncActionFinalizeTxn : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionFinalizeTxn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionFinalizeTxn, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetReport : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetReport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetReport, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetUserAgreementInfo : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetUserAgreementInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetUserAgreementInfo, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetUserInfo : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetUserInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetUserInfo, 0x0050);
		}

		// class USteamCoreWebAsyncActionInitTxn : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionInitTxn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionInitTxn, 0x0050);
		}

		// class USteamCoreWebAsyncActionProcessAgreement : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionProcessAgreement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionProcessAgreement, 0x0050);
		}

		// class USteamCoreWebAsyncActionQueryTxn : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionQueryTxn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionQueryTxn, 0x0050);
		}

		// class USteamCoreWebAsyncActionRefundTxn : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRefundTxn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRefundTxn, 0x0050);
		}

		// class UWebPlayerService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebPlayerService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebPlayerService, 0x0048);
		}

		// class USteamCoreWebAsyncActionGetRecentlyPlayedGames : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetRecentlyPlayedGames)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetRecentlyPlayedGames, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetOwnedGames : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetOwnedGames)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetOwnedGames, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetSteamLevel : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetSteamLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetSteamLevel, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetBadges : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetBadges)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetBadges, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetCommunityBadgeProgress : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetCommunityBadgeProgress)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetCommunityBadgeProgress, 0x0050);
		}

		// class USteamCoreWebAsyncActionIsPlayingSharedGame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionIsPlayingSharedGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionIsPlayingSharedGame, 0x0050);
		}

		// class UWebPublishedFileService : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebPublishedFileService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebPublishedFileService, 0x0048);
		}

		// class UWebSteamPublishedItemSearch : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebSteamPublishedItemSearch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSteamPublishedItemSearch, 0x0048);
		}

		// class USteamCoreWebAsyncActionRankedByPublicationOrder : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRankedByPublicationOrder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRankedByPublicationOrder, 0x0050);
		}

		// class USteamCoreWebAsyncActionRankedByTrend : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRankedByTrend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRankedByTrend, 0x0050);
		}

		// class USteamCoreWebAsyncActionRankedByVote : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionRankedByVote)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionRankedByVote, 0x0050);
		}

		// class USteamCoreWebAsyncActionResultSetSummary : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionResultSetSummary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionResultSetSummary, 0x0050);
		}

		// class UWebPublishedItemVoting : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebPublishedItemVoting)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebPublishedItemVoting, 0x0048);
		}

		// class USteamCoreWebAsyncActionItemVoteSummary : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionItemVoteSummary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionItemVoteSummary, 0x0050);
		}

		// class USteamCoreWebAsyncActionUserVoteSummary : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionUserVoteSummary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionUserVoteSummary, 0x0050);
		}

		// class UWebRemoteStorage : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebRemoteStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebRemoteStorage, 0x0048);
		}

		// class USteamCoreWebAsyncActionEnumerateUserPublishedFiles : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionEnumerateUserPublishedFiles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionEnumerateUserPublishedFiles, 0x0050);
		}

		// class USteamCoreWebAsyncActionEnumerateUserSubscribedFiles : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionEnumerateUserSubscribedFiles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionEnumerateUserSubscribedFiles, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetCollectionDetails : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetCollectionDetails)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetCollectionDetails, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPublishedFileDetails : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPublishedFileDetails)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPublishedFileDetails, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetUGCFileDetails : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetUGCFileDetails)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetUGCFileDetails, 0x0050);
		}

		// class USteamCoreWebAsyncActionSetUGCUsedByGC : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionSetUGCUsedByGC)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionSetUGCUsedByGC, 0x0050);
		}

		// class USteamCoreWebAsyncActionSubscribePublishedFile : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionSubscribePublishedFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionSubscribePublishedFile, 0x0050);
		}

		// class USteamCoreWebAsyncActionUnsubscribePublishedFile : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionUnsubscribePublishedFile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionUnsubscribePublishedFile, 0x0050);
		}

		// class UWebSteamCommunity : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebSteamCommunity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSteamCommunity, 0x0048);
		}

		// class USteamCoreWebAsyncActionReportAbuse : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionReportAbuse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionReportAbuse, 0x0050);
		}

		// class UWebSteamEconomy : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebSteamEconomy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSteamEconomy, 0x0048);
		}

		// class USteamCoreWebAsyncActionCanTrade : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionCanTrade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionCanTrade, 0x0050);
		}

		// class USteamCoreWebAsyncActionFinalizeAssetTransaction : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionFinalizeAssetTransaction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionFinalizeAssetTransaction, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetAssetClassInfo : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetAssetClassInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetAssetClassInfo, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetAssetPrices : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetAssetPrices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetAssetPrices, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetExportedAssetsForUser : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetExportedAssetsForUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetExportedAssetsForUser, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetMarketPrices : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetMarketPrices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetMarketPrices, 0x0050);
		}

		// class USteamCoreWebAsyncActionStartAssetTransaction : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionStartAssetTransaction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionStartAssetTransaction, 0x0050);
		}

		// class USteamCoreWebAsyncActionStartTrade : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionStartTrade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionStartTrade, 0x0050);
		}

		// class UWebSteamGameServerStats : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebSteamGameServerStats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSteamGameServerStats, 0x0048);
		}

		// class UWebSteamNews : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebSteamNews)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSteamNews, 0x0048);
		}

		// class USteamCoreWebAsyncActionGetNewsForApp : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetNewsForApp)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetNewsForApp, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetNewsForAppAuthed : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetNewsForAppAuthed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetNewsForAppAuthed, 0x0050);
		}

		// class UWebSteamUser : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebSteamUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSteamUser, 0x0048);
		}

		// class USteamCoreWebAsyncActionCheckAppOwnership : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionCheckAppOwnership)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionCheckAppOwnership, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetAppPriceInfo : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetAppPriceInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetAppPriceInfo, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetFriendList : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetFriendList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetFriendList, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPlayerBans : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPlayerBans)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPlayerBans, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPlayerSummaries : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPlayerSummaries)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPlayerSummaries, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPublisherAppOwnership : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPublisherAppOwnership)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPublisherAppOwnership, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPublisherAppOwnershipChanges)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPublisherAppOwnershipChanges, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetUserGroupList : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetUserGroupList)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetUserGroupList, 0x0050);
		}

		// class USteamCoreWebAsyncActionGrantPackage : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGrantPackage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGrantPackage, 0x0050);
		}

		// class USteamCoreWebAsyncActionResolveVanityURL : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionResolveVanityURL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionResolveVanityURL, 0x0050);
		}

		// class UWebUserAuth : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebUserAuth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebUserAuth, 0x0048);
		}

		// class USteamCoreWebAsyncActionAuthenticateUser : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionAuthenticateUser)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionAuthenticateUser, 0x0050);
		}

		// class USteamCoreWebAsyncActionAuthenticateUserTicket : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionAuthenticateUserTicket)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionAuthenticateUserTicket, 0x0050);
		}

		// class UWebUserStats : public USteamCoreWebSubsystem
		TEST_METHOD(Class__SteamCoreWeb__WebUserStats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebUserStats, 0x0048);
		}

		// class USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetGlobalAchievementPercentagesForApp, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetGlobalStatsForGame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetGlobalStatsForGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetGlobalStatsForGame, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetNumberOfCurrentPlayers : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetNumberOfCurrentPlayers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetNumberOfCurrentPlayers, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetPlayerAchievements : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetPlayerAchievements)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetPlayerAchievements, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetSchemaForGame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetSchemaForGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetSchemaForGame, 0x0050);
		}

		// class USteamCoreWebAsyncActionGetUserStatsForGame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionGetUserStatsForGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionGetUserStatsForGame, 0x0050);
		}

		// class USteamCoreWebAsyncActionSetUserStatsForGame : public USteamCoreWebAsyncAction
		TEST_METHOD(Class__SteamCoreWeb__SteamCoreWebAsyncActionSetUserStatsForGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamCoreWebAsyncActionSetUserStatsForGame, 0x0050);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseSceneDepthForOcclusion, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseAutomaticImageScaleEstimation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseStandardOnboardingUX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_GXYG, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_TPNL, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseOptimalVideoFormat, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_CQ2I, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumberOfTrackedFaces, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_UJ4N, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SceneReconstructionMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_ZI47, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneComponentClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PointComponentClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceComponentClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ImageComponentClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, QRCodeComponentClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PoseComponentClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentProbeComponentClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, ObjectComponentClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MeshComponentClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, GeoAnchorComponentClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultMeshMaterial, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DefaultWireframeMeshMaterial, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x0110);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_O01M, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class AARActor : public AActor
		TEST_METHOD(Class__AugmentedReality__ARActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARActor, 0x0220);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_UBCK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_F417, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_H61D, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class UARComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, NativeID, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_2GYD, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, bUseDefaultReplication, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_DUIG, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultMeshMaterial, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, DefaultWireframeMeshMaterial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MRMeshComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, MyTrackedGeometry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARComponent, UnknownData_6TXY, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARComponent, 0x0280);
		}

		// class UARPlaneComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPlaneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneComponent, 0x0300);
		}

		// class UARPointComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPointComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPointComponent, 0x0280);
		}

		// class UARFaceComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARFaceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, ReplicatedPayload, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceComponent, UnknownData_XFIS, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceComponent, 0x02E0);
		}

		// class UARImageComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARImageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARImageComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARImageComponent, 0x02E0);
		}

		// class UARQRCodeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARQRCodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARQRCodeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARQRCodeComponent, 0x02F0);
		}

		// class UARPoseComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARPoseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPoseComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPoseComponent, 0x02C0);
		}

		// class UAREnvironmentProbeComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__AREnvironmentProbeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentProbeComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentProbeComponent, 0x02B0);
		}

		// class UARObjectComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARObjectComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARObjectComponent, 0x02B0);
		}

		// class UARMeshComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshComponent, 0x02E0);
		}

		// class UARGeoAnchorComponent : public UARComponent
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchorComponent, ReplicatedPayload, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchorComponent, 0x02F0);
		}

		// class UARDependencyHandler : public UObject
		TEST_METHOD(Class__AugmentedReality__ARDependencyHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARDependencyHandler, 0x0028);
		}

		// class UARGeoTrackingSupport : public UObject
		TEST_METHOD(Class__AugmentedReality__ARGeoTrackingSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoTrackingSupport, 0x0028);
		}

		// class UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__CheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, UnknownData_Z7JS, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckGeoTrackingAvailabilityAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UGetGeoLocationAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__GetGeoLocationAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetGeoLocationAsyncTaskBlueprintProxy, UnknownData_9DYA, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetGeoLocationAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UARLifeCycleComponent : public USceneComponent
		TEST_METHOD(Class__AugmentedReality__ARLifeCycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorSpawnedDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, OnARActorToBeDestroyedDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARLifeCycleComponent, UnknownData_YQO9, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLifeCycleComponent, 0x0230);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_O6B4, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_KD6Z, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_PH2L, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_WK9U, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_97EZ, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_WCKA, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0578);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_1O4S, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_GJ81, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00F8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00F8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_HY7G, 0x00FB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x0100);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_6KYW, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0150);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_ABFK, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_O9PY, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_I7J4, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_9QBC, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_FBKA, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00F8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_A3PM, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_BCEY, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, BoundaryPolygon, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_K3GC, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x0100);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0108);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_8YXA, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_T65W, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_LEZX, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LeftEyeTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, RightEyeTransform, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01F0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_HXRD, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, TrackedPose, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_TYD4, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0150);
		}

		// class UARMeshGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARMeshGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARMeshGeometry, UnknownData_IOZX, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARMeshGeometry, 0x0100);
		}

		// class UARGeoAnchor : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARGeoAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_H9LT, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGeoAnchor, UnknownData_6I0G, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGeoAnchor, 0x0110);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_K43C, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UGenlockedCustomTimeStep : public UFixedFrameRateCustomTimeStep
		TEST_METHOD(Class__TimeManagement__GenlockedCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedCustomTimeStep, 0x0030);
		}

		// class UGenlockedTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__TimeManagement__GenlockedTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, bUseGenlockToCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenlockedTimecodeProvider, UnknownData_XWTS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenlockedTimecodeProvider, 0x0058);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_PTFW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_A6EH, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_T05X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_TS3W, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationFieldGuid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvaluationField, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0078);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0078);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_NA05, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_DT0A, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_K5YQ, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_IM4G, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, CompiledData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, SequenceFlags, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_ZIM6, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0060);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_C0NN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_880V, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_SU8T, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationSubFrames, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_FNSR, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_29OT, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TickManager, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_NV00, 0x0610);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0680);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_YVUK, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneEntitySystem : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, Linker, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystem, UnknownData_30G2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystem, 0x0040);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0088);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieSceneEntityProvider : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEntityProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityProvider, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieSceneTrackTemplateProducer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneTrackTemplateProducer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackTemplateProducer, 0x0028);
		}

		// class UNodeAndChannelMappings : public UInterface
		TEST_METHOD(Class__MovieScene__NodeAndChannelMappings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeAndChannelMappings, 0x0028);
		}

		// class UMovieSceneNodeGroup : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroup)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroup, 0x0028);
		}

		// class UMovieSceneNodeGroupCollection : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneNodeGroupCollection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNodeGroupCollection, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_7MZF, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_S4Q1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneBlenderSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBlenderSystem, UnknownData_FQ3G, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBlenderSystem, 0x0060);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_0H80, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEntityInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntityInstantiatorSystem, 0x0040);
		}

		// class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneGenericBoundObjectInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGenericBoundObjectInstantiator, 0x0040);
		}

		// class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneBoundSceneComponentInstantiator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoundSceneComponentInstantiator, 0x0040);
		}

		// class UMovieSceneSceneComponentImpersonator : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneSceneComponentImpersonator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSceneComponentImpersonator, 0x0028);
		}

		// class UMovieSceneCompiledData : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EvaluationTemplate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, Hierarchy, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, EntityComponentField, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, TrackTemplateField, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, DeterminismFences, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompiledSignature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, CompilerVersion, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedMask, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AllocatedMask, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, AccumulatedFlags, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledData, UnknownData_EKD5, 0x03F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledData, 0x03F8);
		}

		// class UMovieSceneCompiledDataManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneCompiledDataManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_W7FX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, Hierarchies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplates, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, TrackTemplateFields, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, EntityComponentFields, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCompiledDataManager, UnknownData_42JQ, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCompiledDataManager, 0x0230);
		}

		// class UMovieSceneFloatDecomposer : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneFloatDecomposer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatDecomposer, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_4MWB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_BWR9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_3HCU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneEntitySystemLinker : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEntitySystemLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_BRAQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, SystemGraph, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEntitySystemLinker, UnknownData_ELVE, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEntitySystemLinker, 0x0458);
		}

		// class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneEvalTimeSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEvalTimeSystem, UnknownData_EW5S, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEvalTimeSystem, 0x0050);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_MIR5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneMasterInstantiatorSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMasterInstantiatorSystem, 0x0040);
		}

		// class UMovieScenePreAnimatedStateSystemInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePreAnimatedStateSystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePreAnimatedStateSystemInterface, 0x0028);
		}

		// class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneCachePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCachePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneRestorePreAnimatedStateSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneRestorePreAnimatedStateSystem, 0x0040);
		}

		// class UMovieSceneSequenceTickManager : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequenceTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, SequenceActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequenceTickManager, UnknownData_EVV1, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequenceTickManager, 0x00D0);
		}

		// class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnablesSystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnablesSystem, 0x0040);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnSection, UnknownData_92IL, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0188);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0098);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_MPLD, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_IRG3, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0098);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0068);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0098);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// class UMovieSceneTrackInstance : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, AnimatedObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, bIsMasterTrackInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, UnknownData_RKIH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Linker, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstance, Inputs, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstance, 0x0050);
		}

		// class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceInstantiator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceInstantiator, UnknownData_TU6Z, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceInstantiator, 0x00F0);
		}

		// class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
		TEST_METHOD(Class__MovieScene__MovieSceneTrackInstanceSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrackInstanceSystem, Instantiator, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrackInstanceSystem, 0x0048);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_9963, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_XLGV, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_I8ZJ, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_FBV2, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_D5WJ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_KDEU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_T1JR, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_3IDO, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_EMU1, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_M244, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_DGZ2, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_8BY4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_FR2S, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_Q591, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_0O1W, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_WFJZ, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_GI37, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_SM7V, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_WXL1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_905B, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UW_SettingsFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_SettingsFrame__W_SettingsFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, TextBlock_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, VerticalBox_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_Button, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_Button_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_Button_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_Gameplay, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_Gameplay_2, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_MainFrameButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_MainFrameButton_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_MainFrameButton_2, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_SettingsFrame_C, W_MainFrameButton_3, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_SettingsFrame_C, 0x02F0);
		}

		// class UW_Setting_ControlsFrame_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Setting_ControlsFrame__W_Setting_ControlsFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, Overlay_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, TextBlock_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, VerticalBox_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_Back, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_GamePadAxisSensi, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_InverGamepad, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_InverMouse, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_Master, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_ResChang, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_ResDef, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_SwitchButton, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, W_WarningFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, WidgetSwitcher_1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, SaveSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, SettingsBufer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Setting_ControlsFrame_C, GameInstance, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Setting_ControlsFrame_C, 0x0328);
		}

		// class UW_WarningAndConfirmFrame_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_WarningAndConfirmFrame__W_WarningAndConfirmFrame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, Border_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, Border_6, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, Border_Background, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, T_Message, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, T_Title, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, W_AcceptButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, W_CancelButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, OnYes, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, OnCancel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, MainColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, SecondColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, Title, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, Message, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, Yes_AcceptVisible_, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, CancelVisible_, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, SwitchToPositiveColorsAsConfirmDialog_, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, UnknownData_LJ0D, 0x0313);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, TMP_ColorSwitch, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrame_C, NewVar_1, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_WarningAndConfirmFrame_C, 0x0368);
		}

		// class UW_WarningAndConfirmFrameButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_WarningAndConfirmFrameButton__W_WarningAndConfirmFrameButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, UnknownData_0GJ0, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, Color, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, H_Color, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_WarningAndConfirmFrameButton_C, OnUnhovered, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_WarningAndConfirmFrameButton_C, 0x0328);
		}

		// class UWB_InputKeySelector_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_InputKeySelector__WB_InputKeySelector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, B_KeyRebinding_FillColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, Input_KeySelector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, KeyRebinding_Frame, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, KeyRebinding_Text, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, SB_Content, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, Font_Normal, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FontFaceNormal, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FontSizeNormal, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, TextColorNormal, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FrameColorNormal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FillColorNormal, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, UnknownData_83FC, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FontHovered, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FontFaceHovered, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FontSizeHovered, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, TextColorHovered, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FrameColorHovered, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, FillColorHovered, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, KeymappingName, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, bIsActionMapping, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, bIsAxisMapping, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, bIsSelecting, 0x0326);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, UnknownData_SMHC, 0x0327);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, OnKeySelected, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, bEnabled, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, bHasKeySelected, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, UnknownData_XZR6, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, SelectedKeyText, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, bResponsiveHovering, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, UnknownData_AGAU, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, ClickedSound, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, HoveredSound, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, OnKeyEmptied, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, LastSelectedKey, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, OnHovered, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_InputKeySelector_C, LocalSize, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_InputKeySelector_C, 0x03B8);
		}

		// class UWB_HomeButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_HomeButton__WB_HomeButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FadeFrameDynamic, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FadeFrameBlock, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, b_ContentWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, b_FrameBlock, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Frame, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Frame_Dynamic, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OV_Base, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OV_ContentWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, SB_ContentWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, SB_Frame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, SB_Image, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, SB_NativeButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, SB_Text, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Text, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, WB_NativeButton, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, WB_PMM_B01_Image, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnClicked, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnHovered, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnUnhovered, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnPressed, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnReleased, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFont_Normal, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineTypeFace_Normal, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontSize_Normal, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_CZSZ, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFont_Hovered, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineTypeFace_Hovered, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontSize_Hovered, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_4KXT, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFont_Clicked, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineTypeFace_Clicked, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontSize_Clicked, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_2J90, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ButtonTypeText, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ButtonHeadline, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ButtonDescription, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontColor_Clicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontColor_Normal, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontColor_Hovered, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, IsEnabled, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_R60W, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ButtonSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, bGamepadFocus, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, bDetectInput, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_8Y0Q, 0x0406);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFont_Disabled, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineTypeFace_Disabled, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontSize_Disabled, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, HeadlineFontColor_Disabled, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_CAJI, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnDisabled, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Timer_TextSizeCheck, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ContentWidget, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnClicked_Sound, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnHovered_Sound, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, IsDesignTime, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_QY41, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameColor_Normal, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameColor_Hovered, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameColor_Clicked, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameColor_Disabled, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameShineColor_Normal, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameShineColor_Hovered, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameShineColor_Clicked, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameShineColor_Disabled, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameThickness_Normal, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Image, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageTranslation, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageColor_Normal, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameBlockColor_Hovered, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageColor_Hovered, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameBlockColor_Clicked, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageColor_Clicked, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageColor_Disabled, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageSaturation_Normal, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageSaturation_Hovered, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageSaturation_Clicked, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, ImageSaturation_Disabled, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, VignetteColor, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFont_Normal, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionTypeFace_Normal, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontSize_Normal, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontColor_Normal, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_OBYC, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFont_Hovered, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFont_Clicked, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFont_Disabled, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionTypeFace_Hovered, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionTypeFace_Clicked, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionTypeFace_Disabled, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontSize_Hovered, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontSize_Clicked, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontSize_Disabled, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontColor_Hovered, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontColor_Clicked, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, DescriptionFontColor_Disabled, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Scale_Hovered, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Scale_Clicked, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, NewScaleValue, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_YN6Y, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnFocused, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, OnUnfocused, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, bResponsiveFocus, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, UnknownData_C02Z, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameThickness_Hovered, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Duration_Clicked, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, FrameThickness_Clicked, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFont_Normal, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFont_Hovered, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFont_Clicked, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFont_Disabled, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_TypeFace_Normal, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_TypeFace_Hovered, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_TypeFace_Clicked, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_TypeFace_Disabled, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_FontSize_Normal, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_FontSize_Hovered, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_FontSize_Clicked, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, Type_FontSize_Disabled, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFontColor_Normal, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFontColor_Hovered, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFontColor_Clicked, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, TypeFontColor_Disabled, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_C, bIsNativeHovering, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_HomeButton_C, 0x06E1);
		}

		// class UWB_HomeButton_Content_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_HomeButton_Content__WB_HomeButton_Content_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_HomeButton_Content_C, Image_1, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_HomeButton_Content_C, 0x0268);
		}

		// class UWB_FrameFX_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_FrameFX__WB_FrameFX_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, b_FrameColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, CP_Base, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_7, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_FrameFX_C, Image_8, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_FrameFX_C, 0x02B0);
		}

		// class ABP_Grenade_AOE_FrostSlowDown_C : public ABP_Grenade_StatusEffectBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Grenade_AOE_FrostSlowDown__BP_Grenade_AOE_FrostSlowDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grenade_AOE_FrostSlowDown_C, 0x0388);
		}

		// class ABP_Turret_Base_C : public ABP_PhysicsExplodable_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Turret_Base__BP_Turret_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, UberGraphFrame, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, TurretGlobalCollision, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, LOSTraceStartLocation, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, SphereRange, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, ShouldAttackPlayers, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, ShouldAttackFoes, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, LineOfSightTraceChannel, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, UnknownData_OV8K, 0x040B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, FireRateDelayBetweenShots, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, FilteredOverlappingActors, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, SphereDetectionLoopTimer, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, SphereDetectionLoopFrequency, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, DetectionAndRangeSphereRadius, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, ShouldPrintDebugMessages, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, UnknownData_LN58, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, UncheckedActualOverlappingActors, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, MaxHealth, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, DamageAmountPerGivenHit, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Base_C, IsOnPause_, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Turret_Base_C, 0x0451);
		}

		// class ABP_Turret_Rocket_C : public ABP_Turret_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Turret_Rocket__BP_Turret_Rocket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, UnknownData_RXCD, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, UberGraphFrame, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, StaticMesh4, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, StaticMesh, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, StaticMesh2, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketMesh4, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketMesh3, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketMesh2, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketMesh1, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, AIPerceptionStimuliSource, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Anti_Aircraft_Launcher, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, TrophySystem, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Audio2, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Audio, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Rocket4, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Rocket3, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Rocket2, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Rocket1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, TimelineReloadRocket_NewTrack_0_8F2B23944E3ADF23D95B4690EDD20462, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, TimelineReloadRocket__Direction_8F2B23944E3ADF23D95B4690EDD20462, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, UnknownData_5H55, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, TimelineReloadRocket, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, CurrentRocket, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, CurrentLauncher, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketMesh, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketMeshes, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketLaunchers, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketLauncherReloadTimer, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, RocketReloadDuration, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, ReloadDurationCountdownFrequency, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Deployment_Finished_Check_Frequency, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, UnknownData_0MRW, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Deployment_Finish_Check_Loop, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, AlreadyDetectedActorsAnd_MissileMap, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, ReloadCountdownTimer, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Damage_Explosion_Inner_Radius, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Damage_Explosion_Outer_Radius, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, Force_Multiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, WaitForNextShotCounter, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, AtLeastOneRocketStillCountDown, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, UnknownData_6U7K, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Turret_Rocket_C, LastReloadSlotIndex, 0x05BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Turret_Rocket_C, 0x05C0);
		}

		// class UW_Cursor_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_Cursor__W_Cursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Cursor_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_Cursor_C, CursorVisibility, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_Cursor_C, 0x0269);
		}

		// class UW_HUD_Shooting_RE_HR_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_HUD_Shooting_RE_HR__W_HUD_Shooting_RE_HR_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, NotEnoughScannerFlash, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, FullScannerBarFlashAlt, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, FullScannerBarFlash, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, CurrentRound, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, Dashbetweenrounds, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, EnemiesLeftLabel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, EnemiesLeftText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, Image_AmmoClip_grenade, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, MaxRounds, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, MiddleScreenMainText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ProgressBarHealth, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ProgressBarScanner, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ProgressBarShield, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ReviveProgressBar, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, RevivingText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, T_AmmoInClip, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, T_AmmoInClip_grenade, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, T_ScorePlayerScore_3, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, T_ScoreTeamScore_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, W_GrenadeIconSlot, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, W_WeaponIconSlot_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, W_WeaponIconSlot_2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, W_WeaponIconSlot_3, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, W_WeaponIconSlot_4, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, WB_IngameTutorial_Bottom, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, WB_ScoreFeedByLootNotify, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, WB_ToolTip_Side, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, UpdatedPlayerScore, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, CurrentShowPlayerScoreOnHUD, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, Timer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, Intervall, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ScoreFlyUpAnimation, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, UpdatedTeamScore, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, CurrentShowTeamScoreOnHUD, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ScoreValue, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ScoreType, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, ActionNameForInputKeySearch, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, UnknownData_46SI, 0x0366);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, KilledByDamageTypeP, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_HUD_Shooting_RE_HR_C, NameOfKilledP, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_HUD_Shooting_RE_HR_C, 0x0378);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_SX6Q, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_DH8O, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_JZX0, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_EMSK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_DK2O, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_ET04, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_7J36, 0x04B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x04C0);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_WAJH, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_BUVZ, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_LUS4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_O97T, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_UQ41, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_ZXKU, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_3IBY, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_65SR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_40F4, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_ZEPQ, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_9BJ8, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_30T4, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class ULuminRuntimeSettings : public UObject
		TEST_METHOD(Class__LuminRuntimeSettings__LuminRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ApplicationDisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, FrameTimingHint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bProtectedContent, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bManualCallToAppReady, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseMobileRendering, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseVulkan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_O790, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, Certificate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconModelPath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconPortalPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedIconInfos, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VersionCode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, MinimumAPILevel, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, AppPrivileges, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentSubElements, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentElements, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SpatializationPlugin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ReverbPlugin, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, OcclusionPlugin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SoundCueCookQualityIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bRemoveDebugInfo, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_G9FL, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VulkanValidationLayerLibs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bFrameVignette, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_HB5J, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedAppNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_NECK, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminRuntimeSettings, 0x0148);
		}

		// class ABP_Shell_Turret_AsActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Shell_Turret_AsActor__BP_Shell_Turret_AsActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Shell_Turret_AsActor_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Shell_Turret_AsActor_C, BP_Shell_Turret, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Shell_Turret_AsActor_C, DefaultSceneRoot, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Shell_Turret_AsActor_C, 0x0238);
		}

		// class UBTTask_SetLastTargetLocationToEqsLocationInBb_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTTask_SetLastTargetLocationToEqsLocationInBb__BTTask_SetLastTargetLocationToEqsLocationInBb_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetLastTargetLocationToEqsLocationInBb_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetLastTargetLocationToEqsLocationInBb_C, 0x00B0);
		}

		// class UWB_SingleCredit_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_SingleCredit__WB_SingleCredit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Scale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Highlight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Fade, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, b_Head, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, b_Names, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, FieldText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Img_Highlight, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Img_Line, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, VB_Names, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Field, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_SingleCredit_C, Names, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_SingleCredit_C, 0x02D8);
		}

		// class ABP_PlayerCharacter_BPBase_C : public ATPS_PlayerCharacter_Base
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerCharacter_BPBase__BP_PlayerCharacter_BPBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UberGraphFrame, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_GrenadeWeapon2, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_Shield, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_StatusEffectsBaseComponent, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, GrenadeThrowStartPoint, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SkeletalMesh_CloseCombat, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_CloseCombatWeapon, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_GrenadeWeapon1, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SpecialEventSphere, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_LaserDotMarker_Component, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, AIPerceptionStimuliSource, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SV_DistortionSphere, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_RadialScanComponent, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_Weapon_Gun1, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_Weapon_Gun2, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_SimpleReplicatedRagdollSystem_Component, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, AboveHeadWidget, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Camera, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ATPCCamera, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BP_Weapon_WeaponPistol, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SkeletalMesh_Sidearm, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SkeletalMesh_Gun2, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SkeletalMesh_Gun1, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Footsteps, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_1_GlowWeight_C79BD5914AD07B59F886018AC54AB678, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_1__Direction_C79BD5914AD07B59F886018AC54AB678, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_5Z1Z, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_2, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, StopLegGlowAnimation_GlowWeight_396602D249ABA5863F52C288E3B741A0, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, StopLegGlowAnimation__Direction_396602D249ABA5863F52C288E3B741A0, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_RJD5, 0x05D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, StopLegGlowAnimation, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RotationReviveTimeline_Rotation_59B4148B42F01416B195C8A1F1513DF2, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RotationReviveTimeline__Direction_59B4148B42F01416B195C8A1F1513DF2, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_TNIK, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RotationReviveTimeline, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_0_alpha_B47F290B4F86615B1EE9E4AF8687A452, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_0__Direction_B47F290B4F86615B1EE9E4AF8687A452, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_XK2V, 0x05F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_1, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_AimingSpeedChange_FieldOfViewZoomTimeline_89A616254E3FD4B5A01DFEBE3F80B7A3, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_AimingSpeedChange__Direction_89A616254E3FD4B5A01DFEBE3F80B7A3, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_0ICI, 0x0605);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Timeline_AimingSpeedChange, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ActiveCamera, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponPawnAnimationList, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeapAnimHolster, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, HolsterAnimLength, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_VL73, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RunningHolsterAnimMontage, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, statetesting, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_KFFN, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeapAnimUnHolster, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeapAnimReload, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, bWeaponInHandNextTargetState, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_B68A, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MaxZoomAimWalkingSpeed, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MaxFreeRunSpeed, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, PlayFootsteps, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, PlayFootstepsMovementRattle, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_QBVB, 0x06C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Footsteps_Volume_Max_Multiplier, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, FieldOfViewZoomAiming, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SelectedCustomCamFOV, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_V1Q9, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Running_Reload_Anim_Montage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Reload_Anim_Seq_length, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MaxADSAimWalkingSpeed, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MaxWeaponActiveWalkpeed, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MaxWeaponInHandWalkingSpeed, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ActualAimingState, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_6IGX, 0x06F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TMP_ActualWalkingSpead, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, CurrentBaseWalkingSpeedWithoutModifier, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_XS1H, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MapWeaponToBoneActiveArmed, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponGun1, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponSidearm, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponGun2, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MapWeaponToBoneHolstered, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeapAnimShootBS, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, DeltaTime, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WalkRunState, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RunButtonPressed, 0x07C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_WT3S, 0x07C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Ammo, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponHolstered, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, NextSelectedWeapon, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TMP_NextSelectWeapon, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponUNHolstered, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, DoAutofire, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_M9LS, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, CurrentWeapon, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, bDead, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_N5D3, 0x0859);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, W_MainMenu, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, GameInstance, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, OnPlayerDeath, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BleedoutTimerHandle, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ReviveTrigger, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ActualBleedOutTime, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MaxBleedOutTime, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, OnBleedOut, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_YV8K, 0x0899);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ReviveTimerHandle, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ReviveAPlayerPawnRef, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, PlayerNeededReviveTime, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, PassedReviveActiveTime, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ReviveUpdateIntervall, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Pelvis_Bone_Name, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Capsule_Location_Start, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Capsule_Location_End, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BKP_CapsuleCollisionProfilname, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, Physical_Animation_Profile_Name, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_DPS3, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RagdollPhysAsset, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, DefaultPhysAsset, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BKP_MeshCollisionProfilname, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BKP_CapsuleHalfHeight, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_MKYW, 0x090C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BKP_MesghRelativeTransform, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, MinDistanceValueToStartInterpolateToServerMesh, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_ENMV, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, DamageEventDummy, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, BeingInReviveTrigger, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, IsRevivingFromOtherPlayer, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_04TA, 0x095A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TMP_HitResult, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TMP_FoundPlayerOnLineTravce, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, OnRevivingAPlayer, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_DW04, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, RevivingAnimMonatge, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ActionFinished, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TMP_Start_ZRotationForRotate, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, OrigRelZHeadWidget, 0x0A14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, DistanceNextWidgetSizeCalc, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponGun1IsArmedInHands, 0x0A1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_6L3X, 0x0A1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SizeWidgetOnDistanceCalcChange, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponPistolIsArmedInHands, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponGun2IsArmedInHands, 0x0A25);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponCloseCombatIsArmedInHands, 0x0A26);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_JXI1, 0x0A27);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, checkWidgetSizeTimer, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, OnPlayerUnconscious, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SummarizeFriendyFireDamage, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, CurrentSpeedMultiplierByEffect, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_N15U, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, SpeedModifyEffectEnded, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, FinishedBeginPlayFinePawn, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, LobbyActive, 0x0AA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, IsPlayerAndNotAIPawn, 0x0AAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_S65A, 0x0AAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, PlayerCharacterFinishedBeginPlay, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ForcedDancing, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_DW26, 0x0AC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, PullForceDancingTimer, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TempNewAimingPitchClamped, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_3G7R, 0x0AD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ATPC_ModeScript, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, AimPitchInterpSpeed, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, StartWeaponGun1, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, StartWeaponPistol, 0x0AE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_KFDJ, 0x0AE6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WeaponCloseCombat, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ModelSkinSelectedIndex, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_ZKMK, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ThrowKeyPressedTimer, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, CamAtRightShoulderView_, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_DOFJ, 0x0B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, HolsterWeaponPressedTimer, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, TimeWhenPressedHolsterWeapKey, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, StartMaxHealth, 0x0B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, CurrentGrenade, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, WasChargedJustNow, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, UnknownData_TUCM, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, OnChargeHitEnergyChargeDelay, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerCharacter_BPBase_C, ChargeEnergyTimer, 0x0B28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerCharacter_BPBase_C, 0x0B30);
		}

		// class AAI_Robot_Enemy_Pawn_C : public AAI_Character_Base_Enemy_Pawn_C
		TEST_METHOD(BlueprintGeneratedClass__AI_Robot_Enemy_Pawn__AI_Robot_Enemy_Pawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, UnknownData_E41U, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, UberGraphFrame, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, BP_Weapon_Gun1, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, SkeletalMesh_Gun1, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, WeaponPawnAnimationList, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, TempNewAimingPitchClamped_1, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, StartWeaponID, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, UnknownData_KRDT, 0x0A5D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, MinRandomFlotValueDelayTimePerShot, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, MaxRandomFlotValueDelayTimePerShot, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, DelayFactorForDelayOnFirstShotWhenNewSpotTarget, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_Robot_Enemy_Pawn_C, DelayBetweenShotsMultiplierWhenWeaponSlowed, 0x0A6C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAI_Robot_Enemy_Pawn_C, 0x0A70);
		}

		// class AAI_PBR_Creature_Enemy_C : public AAI_Character_Base_Enemy_Pawn_C
		TEST_METHOD(BlueprintGeneratedClass__AI_PBR_Creature_Enemy__AI_PBR_Creature_Enemy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_PBR_Creature_Enemy_C, UnknownData_S23G, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_PBR_Creature_Enemy_C, SpecialEventSphere, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_PBR_Creature_Enemy_C, StaticMeshSpcialEvent_1, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAI_PBR_Creature_Enemy_C, SkeletalMeshSpecialEvent, 0x09E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAI_PBR_Creature_Enemy_C, 0x09E8);
		}

		// class UW_LiteButton_C : public UW_ParentButtons_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LiteButton__W_LiteButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, UnknownData_OI58, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, Border_22, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, Button_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, SizeBox_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, TextBlock_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, Text, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, Color, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LiteButton_C, H_Color, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LiteButton_C, 0x0318);
		}

		// class UBP_DissolveComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_DissolveComponent__BP_DissolveComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, UberGraphFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, OnDissolveFinished, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, CanDissolve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, DestroySelfAfterDissolve, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, UnknownData_EDTJ, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, AdditionalSkeletalMeshParticleEffect, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, AdditionalStaticMeshParticleEffect, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, DissolveColor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, TimeToFullDissolve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, InitialDissolveDelay, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, EarlyDisableCollisionOnDissolveWhenBelowAlpha, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, DestroySelfAfterDissolveDelay, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, DissolveMeshTickFrequency, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, UnknownData_CSVG, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, FoundPrimitiveComponentsOnOwner, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DissolveComponent_C, FoundStAndSkMeshesOnOwner, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DissolveComponent_C, 0x0128);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_BPB1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x0520);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x0B0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_S0V4, 0x0B38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0B50);
		}

		// class ABP_Projectile_Base_extensions_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Projectile_Base_extensions__BP_Projectile_Base_extensions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Projectile_Base_extensions_C, CollisionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Projectile_Base_extensions_C, DamageTypeRE, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Projectile_Base_extensions_C, 0x0230);
		}

		// class UW_AdminMenu_PopUp_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_AdminMenu_PopUp__W_AdminMenu_PopUp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, T_Ping, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, T_PlayerName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, W_Back, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, W_Kick, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, OnBack, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, Session, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, GameInstance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, OnKick, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_AdminMenu_PopUp_C, TargetPlayerController, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_AdminMenu_PopUp_C, 0x03C0);
		}

		// class ABP_LaserBulletProjectile_Child_C : public ABP_DefaultBulletProjectile_C
		TEST_METHOD(BlueprintGeneratedClass__BP_LaserBulletProjectile_Child__BP_LaserBulletProjectile_Child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LaserBulletProjectile_Child_C, 0x0265);
		}

		// class UMagicLeapImageTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, TargetImageTexture, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, Name, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, LongerDimension, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bIsStationary, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bUseUnreliablePose, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, AxisOrientation, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_4C1K, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetFailed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetFound, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetLost, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_ATO0, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerComponent, 0x0270);
		}

		// class UMagicLeapImageTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerFunctionLibrary, 0x0028);
		}

		// class UBPI_EnemyAiControllerInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_EnemyAiControllerInterface__BPI_EnemyAiControllerInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_EnemyAiControllerInterface_C, 0x0028);
		}

		// class UW_CreditsRoll_C : public UW_ParentWidget_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_CreditsRoll__W_CreditsRoll_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, Border_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, Border_2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, Overlay_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, ScrollBox_59, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, VerticalBox_95, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, W_MainFrameButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, MaxOffset, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, UnknownData_39JC, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, DefaultCreditsProperties, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, SoundFade, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, UnknownData_LXL2, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, OnFinished, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_CreditsRoll_C, Sound, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_CreditsRoll_C, 0x0530);
		}

		// class ABP_ProjectileEffectOnHitBase_BoltLongRangeWeak_C : public ABP_ProjectileEffectOnHitBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ProjectileEffectOnHitBase_BoltLongRangeWeak__BP_ProjectileEffectOnHitBase_BoltLongRangeWeak_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ProjectileEffectOnHitBase_BoltLongRangeWeak_C, 0x02D9);
		}

		// class UBPFL_NavigationAndMovement_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BPFL_NavigationAndMovement__BPFL_NavigationAndMovement_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPFL_NavigationAndMovement_C, 0x0028);
		}

		// class UBPI_ShieldImplemeted_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_ShieldImplemeted__BPI_ShieldImplemeted_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_ShieldImplemeted_C, 0x0028);
		}

		// class UBP_Save_Player_Settings_C : public UBP_SaveSettings_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Save_Player_Settings__BP_Save_Player_Settings_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Player_Settings_C, Default_Settings_Player, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Save_Player_Settings_C, Settings_Player, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Save_Player_Settings_C, 0x0068);
		}

		// class UBPFL_FunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BPFL_FunctionLibrary__BPFL_FunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPFL_FunctionLibrary_C, 0x0028);
		}

		// class UW_LoadingScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__W_LoadingScreen__W_LoadingScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LoadingScreen_C, Search_Banner, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LoadingScreen_C, T_Empty, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UW_LoadingScreen_C, Throbber_1, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UW_LoadingScreen_C, 0x0278);
		}

		// class UWB_LootNotify_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WB_LootNotify__WB_LootNotify_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, DownAnim, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, Fading, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, b_DynamicBackground, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, b_Particle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, IconImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, Particle_Img, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, Text_Notification, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, Text_NotificationValue, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, NotificationText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, DisplayTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, NotificationValue, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, ValuePositiveOrNegative, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, UnknownData_1T91, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, IconBrush, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, DynamicBackground, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, UnknownData_NUUD, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWB_LootNotify_C, DynamicBackgroundColor, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWB_LootNotify_C, 0x02EC);
		}

		// class UBTDecorator_AiIsInAirJumping_C : public UBTDecorator_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BTDecorator_AiIsInAirJumping__BTDecorator_AiIsInAirJumping_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_AiIsInAirJumping_C, 0x00A0);
		}

		// struct FBPUniqueNetId
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPUniqueNetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPUniqueNetId, UnknownData_5G4Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPUniqueNetId, 0x0020);
		}

		// struct FBPFriendPresenceInfo
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPFriendPresenceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsOnline, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, BIsPlaying, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsPlayingThisGame, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsJoinable, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bHasVoiceSupport, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, PresenceState, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, UnknownData_7JJW, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, StatusString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPFriendPresenceInfo, 0x0018);
		}

		// struct FBPFriendInfo
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPFriendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, RealName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, OnlineState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UnknownData_HPEX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UniqueNetId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, bIsPlayingSameGame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UnknownData_FG6V, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, PresenceInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPFriendInfo, 0x0068);
		}

		// struct FBPOnlineUser
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPOnlineUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, UniqueNetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, RealName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPOnlineUser, 0x0040);
		}

		// struct FBPOnlineRecentPlayer : public FBPOnlineUser
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPOnlineRecentPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineRecentPlayer, LastSeen, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPOnlineRecentPlayer, 0x0050);
		}

		// struct FSessionsSearchSetting
		TEST_METHOD(ScriptStruct__AdvancedSessions__SessionsSearchSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionsSearchSetting, UnknownData_DQZ1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionsSearchSetting, 0x0028);
		}

		// struct FSessionPropertyKeyPair
		TEST_METHOD(ScriptStruct__AdvancedSessions__SessionPropertyKeyPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionPropertyKeyPair, UnknownData_SLNG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionPropertyKeyPair, 0x0020);
		}

		// struct FBPUserOnlineAccount
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPUserOnlineAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPUserOnlineAccount, UnknownData_GS33, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPUserOnlineAccount, 0x0010);
		}

		// struct FPurchaseItemDetails
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_YMZX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Price, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_65US, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseItemDetails, 0x0040);
		}

		// struct FPurchaseConfirmation
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_HTHX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, PackageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_YEAC, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, Type, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_XMI4, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseConfirmation, 0x0050);
		}

		// struct FMagicLeapMeshBlockRequest
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, LevelOfDetail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, UnknownData_URCM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockRequest, 0x0014);
		}

		// struct FMagicLeapMeshBlockInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockOrientation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockDimensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_5QNO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, Timestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_272E, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockInfo, 0x0048);
		}

		// struct FMagicLeapTrackingMeshInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapTrackingMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, BlockData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTrackingMeshInfo, 0x0018);
		}

		// struct FMagicLeapRaycastHitResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UnknownData_OIVU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Confidence, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastHitResult, 0x0024);
		}

		// struct FMagicLeapRaycastQueryParams
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UpVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Width, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Height, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, HorizontalFovDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, CollideWithUnobserved, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UnknownData_VC4V, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UserData, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastQueryParams, 0x0038);
		}

		// struct FMagicLeapGraphicsClientPerformanceInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapGraphicsClientPerformanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUCompAcquireCPUTimeMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameEndGPUTimeMs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameStartCPUTimeMs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationCPUTimeMs, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationGPUTimeMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationCPUTimeMs, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationGPUTimeMs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapGraphicsClientPerformanceInfo, 0x001C);
		}

		// struct FMagicLeapHeadTrackingState
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapHeadTrackingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Error, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, UnknownData_I9J9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Confidence, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHeadTrackingState, 0x0008);
		}

		// struct FMagicLeapResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, bSuccess, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, UnknownData_LLM2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapResult, AdditionalInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapResult, 0x0018);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_18KI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_973E, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_0BL9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00AC);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_V9ED, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_SZPA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_FO87, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FPhysicsSphereData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsSphereData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, UnknownData_0LJO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsSphereData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsSphereData, 0x0070);
		}

		// struct FPhysicsBoxData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsBoxData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Dimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, UnknownData_WXHW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsBoxData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsBoxData, 0x0070);
		}

		// struct FPhysicsCapsuleData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsCapsuleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Radius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, UnknownData_8B5S, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsCapsuleData, Element, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsCapsuleData, 0x0070);
		}

		// struct FPhysicsConvexData
		TEST_METHOD(ScriptStruct__MeshModelingTools__PhysicsConvexData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, NumVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, NumFaces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConvexData, Element, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConvexData, 0x0038);
		}

		// struct FPerlinLayerProperties
		TEST_METHOD(ScriptStruct__MeshModelingTools__PerlinLayerProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerlinLayerProperties, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerlinLayerProperties, Intensity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerlinLayerProperties, 0x0008);
		}

		// struct FEditPivotTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__EditPivotTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditPivotTarget, 0x0010);
		}

		// struct FTransformMeshesTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__TransformMeshesTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformMeshesTarget, 0x0010);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_CVPX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FVariantDependency
		TEST_METHOD(ScriptStruct__VariantManagerContent__VariantDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, VariantSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, Variant, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, bEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariantDependency, UnknownData_CQT2, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariantDependency, 0x0058);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FBodyInstanceCore
		TEST_METHOD(ScriptStruct__PhysicsCore__BodyInstanceCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_RVIN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstanceCore, UnknownData_3LOM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstanceCore, 0x0018);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_NNJQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_7VGU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_0HXM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_VJ91, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_G7BR, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_2DPE, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_81PE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_6KOC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_0AYY, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_Z7VM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_E83C, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_GI48, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_5M09, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_0NZ0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, LetterSpacing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_9JTK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_AGWY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0220);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F8);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0270);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_K02J, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_U5LJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_TJ0W, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_14L7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_8DXA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1060);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_FNJ8, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_CSKU, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_A0AI, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_UA81, 0x0A89);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A90);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_5U67, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A70);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0500);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_R0UF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_OODO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FS_IngameTutorial
		TEST_METHOD(UserDefinedStruct__S_IngameTutorial__S_IngameTutorial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, Text1_3_2909533A42FF67EBACA675BBB72630D7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, Icon1_6_BAD3EFFD42983A4DB5D42D8F42B90A8F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, ButtonKey1_21_75BA8DF5459F5FF1DEFD9C8A64B540CC, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, Text2_14_FF0C9F4F485DCE7FC5604AA4D492E59B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, Icon2_10_8CB128284F7551E3422BB1B0F94F9945, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, ButtonKey2_24_43BC57CC4EEA2C07295D9DB240B06C8C, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_IngameTutorial, Text3_23_B1445DAF42CA09A9C0E362978E68D353, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_IngameTutorial, 0x0148);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_RU8S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_22GJ, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_O8WK, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_0N3J, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FSSpeedEffectSettingsStruct
		TEST_METHOD(UserDefinedStruct__SSpeedEffectSettingsStruct__SSpeedEffectSettingsStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSpeedEffectSettingsStruct, EffectDuration_2_00C646D64F9F3B4B156FACB03660C80C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSpeedEffectSettingsStruct, SpeedModificationAsFactor_4_4828C5B547EA1B3DD075558E6EE6FFF9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSpeedEffectSettingsStruct, StatusEffectType_8_8B69C6B04C44AB3A9B1A75B0544E740A, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSpeedEffectSettingsStruct, 0x0009);
		}

		// struct FSProperties
		TEST_METHOD(UserDefinedStruct__SProperties__SProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, CreditsPadding_49_6486356B43C0FB57294033B24918652D, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, StartDelay_41_E5F3E9E44D0713DA8EEA4981A9E7F61E, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, EndDelay_52_6889ACF8411BF9405501559809D4F7F9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, CreditsRollSpeed_7_A67EE9D64B6747558A7D19A7C259D2CD, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, IsUseMusic_20_57AC7E414F98A56FF31BDCA2CAD41737, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, UnknownData_XSIF, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, Music_17_AC3764074441C29AA0220EBC71D61836, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, IsAutoFadeMusic_55_9D147F32407EEF2A27C62CB5AF380508, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, UnknownData_8JXT, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, MusicFadeDuration_58_BBCC23E748DFD517F1A991A25FA5CAC5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, IsUseBackground_22_448F2AD04F8C4CD400C55683D67924DA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, UnknownData_BB5V, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, Background_59_309BA31542AE6EF38922A6BF23BB4D7D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, GroupsDefaultStyle_45_8BD40BA84F96A09E67BAA2981F2858BA, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, RolesDefaultStyle_36_A72869E84F383736F289AEB7D62DCDF7, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSProperties, ArtistDefaultStyle_38_92C583A3423A1EE650935C8B0A137349, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSProperties, 0x0240);
		}

		// struct FRenderableTriangleVertex
		TEST_METHOD(ScriptStruct__ModelingComponents__RenderableTriangleVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, UV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, Normal, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangleVertex, Color, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderableTriangleVertex, 0x0024);
		}

		// struct FRenderableTriangle
		TEST_METHOD(ScriptStruct__ModelingComponents__RenderableTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, Vertex2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderableTriangle, UnknownData_VJZG, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderableTriangle, 0x0078);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_D6RJ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_ZYGH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_WXV1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_KY1A, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FBPSteamGroupOfficer
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamGroupOfficer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupOfficer, OfficerUniqueNetID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupOfficer, bIsOwner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupOfficer, UnknownData_XFWG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamGroupOfficer, 0x0028);
		}

		// struct FBPSteamWorkshopItemDetails
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamWorkshopItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, ResultOfRequest, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, FileType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, UnknownData_U18B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, CreatorAppID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, ConsumerAppID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, UnknownData_QCXX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, ItemUrl, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, VotesUp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, VotesDown, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, CalculatedScore, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, bBanned, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, bAcceptedForUse, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, bTagsTruncated, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, UnknownData_3THK, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, CreatorSteamID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamWorkshopItemDetails, 0x0060);
		}

		// struct FBPSteamGroupInfo
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, GroupName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, GroupTag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, numOnline, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, numInGame, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, numChatting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, UnknownData_L2RV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamGroupInfo, 0x0050);
		}

		// struct FBPSteamWorkshopID
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamWorkshopID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopID, UnknownData_U21Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamWorkshopID, 0x0008);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_SR50, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_OK85, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_E7BD, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_PA5U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_AM62, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_68EQ, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_KKYS, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_TC2A, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_031K, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_RGTO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FGeometryCollectionRepData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionRepData, UnknownData_9PXW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionRepData, 0x0018);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_BBQ6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_7IRP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_80XX, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FGeometryCollectionSource
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceGeometryObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, UnknownData_V4NV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, LocalTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSource, SourceMaterial, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSource, 0x0060);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_2YP3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FSSettings_Sounds
		TEST_METHOD(UserDefinedStruct__SSettings_Sounds__SSettings_Sounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Master_18_78795C2A4E3D2265E30F62B39F3D8D20, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Music_4_B2E9A20042BE83ADED96008F82092F9D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Effects_5_3D74A06941FB7ED76330DABE2A3E79C6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Dialoges_11_837A056948C7AD77FB5892A16C2EF0B2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Ambients_10_0117C98249CC9E11A51FBD9DF15041EE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Example1_13_533EF7424F0A7D1E4D262096D79C7C53, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Sounds, Example2_15_40E99D28467B146750F85BBB51B8C220, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Sounds, 0x001C);
		}

		// struct FDestructionSystemRandomFloat
		TEST_METHOD(UserDefinedStruct__DestructionSystemRandomFloat__DestructionSystemRandomFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemRandomFloat, Min_5_D2F03819492A0DC04AD7849E89E70CDA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemRandomFloat, Max_6_E6AA85F2445D9D4E870E79B0BEC8FDCC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemRandomFloat, RandomizationStep_11_84456D12481648475BB26882CEBFAC00, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructionSystemRandomFloat, 0x000C);
		}

		// struct FMagicLeapIdentityAttribute
		TEST_METHOD(ScriptStruct__MagicLeapIdentity__MagicLeapIdentityAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, UnknownData_Y7YV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapIdentityAttribute, 0x0018);
		}

		// struct FSGrenadeListDropStruct
		TEST_METHOD(UserDefinedStruct__SGrenadeListDropStruct__SGrenadeListDropStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGrenadeListDropStruct, GrenadetType_13_24444BDA4AE58EB0DD13B583DA867D14, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGrenadeListDropStruct, ChanceToDrop_7_19A4120A4E6CF46C3C9D5D8BD09A7042, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGrenadeListDropStruct, AmountPerPickup_12_E7C38A46407369A596E2E888DADE0553, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSGrenadeListDropStruct, 0x0010);
		}

		// struct FST_AmountProgression
		TEST_METHOD(UserDefinedStruct__ST_AmountProgression__ST_AmountProgression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_AmountProgression, AmountProgressionFixed__3_4F03169348C788B2F6D4E4ABA889CCE3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_AmountProgression, UnknownData_GA6A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_AmountProgression, AmountProgressionValue_8_7CBB007C487BD71FA0B3A4B1BD249FB0, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_AmountProgression, 0x0008);
		}

		// struct FATPCCameraDebugRules
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCCameraDebugRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bPrintErrorsToScreen, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bEnableLocationObjectDebug, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bEnableRoofCollisionCheckDebug, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bEnableDrawFadeShapeDebug, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bFollowTerrainEnableDebug, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bEnableLockOnTargetDebug, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraDebugRules, bLockOnTargetShowTargetDebug, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCCameraDebugRules, 0x0007);
		}

		// struct FATPCCameraLocationLagSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCCameraLocationLagSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, bEnableCameraLagForXY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, bEnableCameraLagForZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, UnknownData_SY7C, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, CameraLagSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, CameraLagMaxDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, bDrawDebugLagMarkers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, bUseCameraLagSubstepping, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, UnknownData_RJGP, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraLocationLagSettings, CameraLagMaxTimeStep, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCCameraLocationLagSettings, 0x0014);
		}

		// struct FATPCCameraRotationLagSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCCameraRotationLagSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraRotationLagSettings, CameraLagSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraRotationLagSettings, bUseCameraLagSubstepping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraRotationLagSettings, UnknownData_B2UD, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraRotationLagSettings, CameraLagMaxTimeStep, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCCameraRotationLagSettings, 0x000C);
		}

		// struct FATPCInterploationSpeed
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCInterploationSpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, UnknownData_FDIS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, InterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, InterpType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, bUseInterpSpeedToInterpolation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, UnknownData_3JK2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, InterpSpeedToInterpolation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCInterploationSpeed, ResetInterpSpeedTolerance, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCInterploationSpeed, 0x0014);
		}

		// struct FATPCFadeSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCFadeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, FadeInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, FadeOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, MaterialFadeMinValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, MaterialFadeMaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, MaterialFadeParamNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, FadeChannel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, bFadeSelfIfCollision, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, bUseCustomFadeOutTimeForSelfFade, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, UnknownData_LZF5, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, SelfFadeCustomFadeOutTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, SelfFadeCheckRadius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, bSelfFadeAttachedActors, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFadeSettings, UnknownData_1F6N, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCFadeSettings, 0x0030);
		}

		// struct FATPCCameraShakesSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCCameraShakesSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraShakesSettings, EnterToModeCameraShake, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraShakesSettings, RegularCameraShake, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraShakesSettings, bNeedStopAllCameraShakeOnEnterToCameraMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraShakesSettings, UnknownData_8OK4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCCameraShakesSettings, 0x0018);
		}

		// struct FATPCViewRotationToActorRotationSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCViewRotationToActorRotationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCViewRotationToActorRotationSettings, MaxDeltaForChange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCViewRotationToActorRotationSettings, StartChangeDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCViewRotationToActorRotationSettings, RotationInterpolation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCViewRotationToActorRotationSettings, ChangeRotationSpeed_OLD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCViewRotationToActorRotationSettings, ChangeRotationSpeedInterpSpeed_OLD, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCViewRotationToActorRotationSettings, 0x0024);
		}

		// struct FATPCFOVSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCFOVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, CameraFOV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, FOVInterpolation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, PitchRotationFOVModifier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, MovementSpeedFOVModifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, ChangeFOVWhenCineCamera, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, UnknownData_H577, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFOVSettings, InterpolationSpeed_OLD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCFOVSettings, 0x0030);
		}

		// struct FATPCRotationOffsetSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCRotationOffsetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, StartOffsetDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, RotationInterpolation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, PitchOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, bActivateOnlyIfMovement, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, UnknownData_34XD, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, MinMovementSpeedForActivate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, ChangeRotationSpeed_OLD, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, InterpolationType_OLD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationOffsetSettings, UnknownData_094H, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCRotationOffsetSettings, 0x002C);
		}

		// struct FATPCRoofCollisionCheckSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCRoofCollisionCheckSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, TraceObjectTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, EyesBoxTraceHalfSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, RoofTraceAngleFirst, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, RoofBoxTraceHalfSizeFirst, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, RoofTraceAngleSecond, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, RoofBoxTraceHalfSizeSecond, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRoofCollisionCheckSettings, RotationOffsetSettings, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCRoofCollisionCheckSettings, 0x0068);
		}

		// struct FATPCFollowTerrainSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCFollowTerrainSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, SocketOffsetCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, SocketOffsetInterpolation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, UnknownData_TLD9, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, PitchRotationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, PitchRotationInterpolation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, ChangePitchRotationDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, SocketOffsetInterpSpeed_OLD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCFollowTerrainSettings, AngleRotationInterpSpeed_OLD, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCFollowTerrainSettings, 0x0048);
		}

		// struct FATPCLockOnTargetSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCLockOnTargetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bResetTargetOnChangeCameraMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, RotateCameraByYaw, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, RotateCameraByPitch, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, UnknownData_GNCO, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, CameraRotationInterpolation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bResetInterpolationSpeedAfterChangeTarget, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bClampByCameraModeRotationLimits, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bUseMaxLockDistance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bResetTargetOnReachMaxDistance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, MaxLockDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bUseCheckTargetVisibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bResetLockOnLostVisibleTarget, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, CheckVisibilityTraceChannel, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bHardLockOnTarget, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bPauseLockAfterPlayerInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, UnknownData_B80S, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, PauseLockAfterPlayerInputTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bResetTargetAfterPlayerInput, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, UnknownData_D0GQ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, RequiredPlayerInputForResetTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, ResetAccumulatedPlayerInputForResetTargetDelay, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, bUseDesiredConeRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, UnknownData_6T5D, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, DeisredConeRotationYaw, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, CameraRotationSpeed_OLD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLockOnTargetSettings, AdditionalSmoothRotationSpeed_OLD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCLockOnTargetSettings, 0x0050);
		}

		// struct FATPCRotationSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCRotationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewPitchMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewPitchMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewYawMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewYawMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewInterpolation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bEnableRotationOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, UnknownData_GFJY, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, RotationOffsetSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bEnableRoofCollisionCheckSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, UnknownData_XVV1, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, RoofCollisionCheckSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bEnableViewRotationToActorRotation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, UnknownData_KJ25, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewRotationToActorRotationSettings, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bUsePawnControlRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bInheritPitch, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bInheritYaw, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, bInheritRoll, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCRotationSettings, ViewInterpolationSpeed_OLD, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCRotationSettings, 0x00F0);
		}

		// struct FATPCLocationSettings
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCLocationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, bEnableCameraLocationLag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_1DQF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, CameraLocationLagSettings, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, bEnableCameraRotationLag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_W87E, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, CameraRotationLagSettings, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, bDoCollisionTest, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_B366, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, ProbeSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, ProbeChannel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, bDoMovementCollisionTest, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_WMBW, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, MovementCollisionTestDuration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, MovementCollisionTestMinLocationDelta, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, MovementCollisionTestCollisionChannel, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_5ZME, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, MinCameraDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, MaxCameraDistance, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, bSetDistanceToDefaultOnChangeCameraMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_3NLP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, DefaultCameraDistance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, bCacheDistanceForCurrentCameraMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_76ZB, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, ZoomInterpolation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, ZoomDistance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_76IR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, SocketOffsetCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, SocketOffsetInterpolation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, TargetOffset, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, TargetOffsetInterpolation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_JC1C, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, PitchDistanceCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, ZoomInterpolationType_OLD, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, UnknownData_1LLI, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, ZoomSpeed_OLD, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, SocketOffsetInterpSpeed_OLD, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCLocationSettings, TargetOffsetInterpSpeed_OLD, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCLocationSettings, 0x00C8);
		}

		// struct FATPCCameraMode
		TEST_METHOD(ScriptStruct__AdvancedThirdPersonCamera__ATPCCameraMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, bEnableLocationSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, UnknownData_RJ6E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, LocationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, bEnableRotationSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, UnknownData_7XJX, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, RotationSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, bEnableFOVSettings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, UnknownData_YHT1, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, FOVSettings, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, bEnableFadeSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, UnknownData_GV5U, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, FadeSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, bEnableFollowTerrainSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, UnknownData_C7DU, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, FollowTerrainSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, bEnableCameraShakesSettings, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, UnknownData_N1WS, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, CameraShakesSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FATPCCameraMode, LockOnTargetSettings, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FATPCCameraMode, 0x02F8);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_6RT3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_7CEE, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_AOE9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_UQGN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_3Y1J, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_6OQO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_L89M, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTrigger
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_3KF5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTrigger, UnknownData_Y7A8, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTrigger, 0x0020);
		}

		// struct FMovieSceneCameraShakeSourceTriggerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerChannel, UnknownData_3Q5H, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerChannel, 0x0088);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_SARA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_RH2W, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_0XMN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_CU9C, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_WHDC, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_JI5Q, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_OS78, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimRootMotionTrackParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimRootMotionTrackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, UnknownData_M16G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimRootMotionTrackParams, 0x0030);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_I7FJ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_S7P4, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_SLI3, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_5T8D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_YJMG, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_MC5P, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_YAMA, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_IYH9, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_UN4V, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_QT6P, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_ZN5J, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraShakeSourceShakeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceShakeSectionTemplate, 0x0048);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_S9H1, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_RHXK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_RWRF, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00C8);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C8);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSourceTriggerSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSourceTriggerSectionTemplate, 0x0040);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_YBYM, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_3WVB, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventTriggerData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, Ptrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, ObjectBindingId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerData, UnknownData_RPSC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerData, 0x0048);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_XU3B, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_XRL4, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x00F8);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_KSQ1, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_3JQY, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_3C43, 0x02BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02C0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_OP11, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00D0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FLevelVisibilityComponentData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__LevelVisibilityComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelVisibilityComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelVisibilityComponentData, 0x0008);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_ZDX6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__NiagaraShader__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, SimulationStageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_FF09, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0030);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_212S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_WYW6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_JRZM, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_B7DQ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_YL8W, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_MKI6, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E8);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_A81H, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_O5SU, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_6G6B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_HIQK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_HWYX, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_I7O4, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_XHQK, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_JGNV, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_EQ0T, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_G0E4, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_N597, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_88Y6, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_H7OG, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_GFYT, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_50R1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_SYJR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_9ODE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_GJEZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_LUR3, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_HZ1N, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_0JF3, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_42S4, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_UJKO, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_YMLH, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0A00);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_CO0T, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_P3Y0, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_273B, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_KAC6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_AQX7, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_UEVY, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_C7LI, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_BC6F, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_VPQM, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_5FLS, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_1TAO, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_SELL, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_6D1Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_GKQG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_7ZF0, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_VJ2K, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_CBCO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_UIV7, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_R6P9, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_JJ7Y, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_309C, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00F0);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_GR1V, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_HJEY, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_KXHQ, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_5BCW, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_SPPC, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_UOTN, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_J5DL, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, RootBoneToCopy, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_XSE6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x01D8);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_GPW1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_L5ZF, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_LDDT, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_1ZB1, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_1D0L, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_VCWY, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_REE7, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_JDQJ, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_P262, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_9EOR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_UA73, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_ISA4, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_4Y13, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_DQQS, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_8UJS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_L8JB, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_RQVA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_63UP, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_LXR5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_NJFG, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_HFJ6, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_96E0, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0080);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_NDPW, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00A0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_DE00, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_5AI5, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, bAutomaticRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_5W72, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_ZDI5, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_J08K, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_YX7Q, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_FPRQ, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_EM2X, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, LODThreshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_C4E1, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0138);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_ICHR, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_BK6C, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_R61B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_QIN2, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_M19W, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_25QT, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FSimSpaceSettings
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SimSpaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MasterAlpha, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, VelocityScaleZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearVelocity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxLinearAcceleration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, MaxAngularAcceleration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDrag, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearDragV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalLinearVelocity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimSpaceSettings, ExternalAngularVelocity, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimSpaceSettings, 0x0040);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_Q0XP, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimSpaceSettings, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_DMAX, 0x01FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_S7X7, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, WorldSpaceMinimumScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, EvaluationResetTime, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_069W, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0650);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_46FS, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_A66G, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_UW5C, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_9T8J, 0x018E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_EXDA, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_ZHY3, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_CQM8, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_O3WM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0050);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_OFXF, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_Z9ZF, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_WEP5, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_7E17, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_CDCZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_BDZ5, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FXRMotionControllerData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRMotionControllerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_VIKF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, DeviceVisualType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandIndex, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, TrackingStatus, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_QHV9, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_AEHC, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, GripRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_HT6B, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, AimRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyPositions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRotations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, HandKeyRadii, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, bIsGrasped, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRMotionControllerData, UnknownData_AJJU, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRMotionControllerData, 0x00A0);
		}

		// struct FXRHMDData
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRHMDData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, bValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_9PUL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, DeviceName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, ApplicationInstanceID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, TrackingStatus, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_47Q5, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, position, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, UnknownData_Y5TQ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRHMDData, Rotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRHMDData, 0x0040);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FXRGestureConfig
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRGestureConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bTap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bHold, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, AxisGesture, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisX, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRGestureConfig, bNavigationAxisZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRGestureConfig, 0x0006);
		}

		// struct FMagicLeapEyeBlinkState
		TEST_METHOD(ScriptStruct__MagicLeapEyeTracker__MagicLeapEyeBlinkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, LeftEyeBlinked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, RightEyeBlinked, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapEyeBlinkState, 0x0002);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FDestructionSystemRandomVector
		TEST_METHOD(UserDefinedStruct__DestructionSystemRandomVector__DestructionSystemRandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemRandomVector, Min_2_99702CA74325AD8CF77E089A07894360, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemRandomVector, Max_5_2B1A2231419B4FECBD7C01B62C36F42E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemRandomVector, RandomizationStep_10_E52CAA4B40A2B0141F0D96AFB6F7B522, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructionSystemRandomVector, 0x001C);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_3BMO, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FSWeaponsPropertiesStruct
		TEST_METHOD(UserDefinedStruct__SWeaponsPropertiesStruct__SWeaponsPropertiesStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ID_167_794B21154B2E771A3C83C8AE7A3C054E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_3JIJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, DisplayName_2_7CAA76344C80955C0E951B8E89EE3583, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, Description_165_FAC591F342019E3B51FCAEA267D8B5C0, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, WeaponType_6_617B3FCF4042E3B9F118D29FA1E4AD4B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, PawnAnimationGroup_9_305F24824958568D2D9D00B3805144B9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_NQ4M, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, WeaponSkeletonMesh_162_FC0273C64418C8F0BE0E64B14DEF2939, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, Price_172_A3C8E57D48AFEDC56FEDB1AD48F28440, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ValueOfWeaponManuallGuessed_173_3DC2590F4043B573581F908FB396C2E0, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, DamagePerBullet_90_C5234B344F98FFB5C0ECA495690136FD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, RateInShotsPerSecond_179_77209F7B4F3FDD9E8A4688BF877B8554, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, DamageType_181_7EC3391146FF8BA0E8AF329ADD0D7B25, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ImpulseFactorOnBulletHit_92_C330B8B24B89F886A61382804CFF99F5, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, InitialShootingModeWhenPickup_178_C8AE513945F46B5024E5C08D79E380AE, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, CanAutoFirePressed_111_7653C8CB4880D55A6BF15FAF54EB18A6, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, CanToggleToBurstFire_105_3928DF2C4DB317D6D3B405928BE40E25, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_V2E6, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ShootMinBulletsPerShot_23_E1B99C654A5FE2887DA3E6B0D3F2FDB0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ShootMaxBulletsPerShot_25_230FF41D4B2E38FDED449CA1E84AE6C0, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, OnReloadDoOneBulletAfterOtherLikeShotguns_121_5608101640136894BE4A9B83374B23B8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_BW44, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, MaxTotalRange_124_8B42203C4DE600C01B0E14907D883A61, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, MaxHighEffectiveRange_127_1841C32F4AA4D9864A579CAAA8851660, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, DamageOnProjectileHitInsteadSimpleTrace_134_D3F9651C4E53635A4C4B8E8282EA7D40, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_39AG, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ProjectileClass_153_EB5C3C604B2CF7BC2A733F9AB40A371B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ProjectileSpeedFactor_142_97AB90694753A817B8F552BEC02AF8EF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ProjectileSizeScaleFactor_157_0E6B1C1841F14A0BEA935E844CB1F39B, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ProjectileLifetimeFactor_160_DB4E99DF462350307F344FAA2171C52B, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, AmmoClipSize_19_AB800A624E05FB3A135949828868972E, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, AmmoType_110_3FEBFDB14ED0B01A15203496D40D0E1B, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnlimitAmmoWeapon_152_C21BC88649A490417D66958EC5038D4D, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_GMFM, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, AmmoMaxPocketSize_115_CE328C9B4FB220BBFA9AEF871073CE0E, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, RecoilMin_31_15E340D145F14676D4E236810D19449D, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, RecoilMax_30_6C7591444F7717220837418C276ACA20, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, RecoilIncreaseSpeed_149_7EEC2AF647445325884EB0BEC07F2392, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SpreadConeMin_33_2D68C88341F3CF5FD55E9294BC026B4C, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SpreadConeMax_35_1336456841510A04A38AB39ACA0B2DAB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SpreadConeIncreaseSpeed_146_C79B1F224C7F7B2CA2481DAA32A4D670, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SpreadConeDecreaseSpeed_147_E6B9BB6E4AA4FDFA2E39CF841299F3CE, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_886J, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, CameraShakeClass_44_C01E6902486097C7D6B3DDA47B888914, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, WepAnimShoot_47_FFC560FC413F24D13A34BB9025A31722, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, WepAnimEmptyShoot_49_6E6B792144E3ED265F76238B846F8159, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, WepAnimReload_51_4089D2B44C1A72401D19129AEEA3D10B, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ShellParticle_61_F91AB86747E969D6A69162B4B7EDA029, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ShellLifetime_63_0CB3CE6F43A105D4209ACA9470C06D4D, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_MNOZ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, MuzzleFlashParticle_135_F3C8F56D4D5B0D6A6B1DD9A6942C09D2, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SoundShoot_69_C58902CE420BCF14068875BE1A7ECF33, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SoundEmptyShoot_71_363CED074302D7852836B1879B035B32, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SoundReload_73_721DC82549CFA93A633AF998E79096C5, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ClipClass_175_F819F06444765D74524FA9A8348CC4E4, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ClipMesh_79_C76DDEF944FF9A7A40F06A987E7F840C, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ClipLifeTimeOnDrop_82_1AAD84624C899472536960B92DE12701, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, UnknownData_8QH4, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ClipSoundOnHitGround_85_14BE5DC748553A55D562F094AFE16670, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ClipImpulseStrength_88_5B4AE07942AB9F96E178E7B96B1980CB, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ImpactParticleSizeScaleFactor_186_16D63E8B4EA42D6CE162D489A8877582, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, SignatureColor1_189_739A916C404A199B13940A96562F464C, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSWeaponsPropertiesStruct, ShowLaserDotPointer_192_9C12B0024B04FA4ADE9F289C28A02E69, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSWeaponsPropertiesStruct, 0x0141);
		}

		// struct FS_KeyAndTexture
		TEST_METHOD(UserDefinedStruct__S_KeyAndTexture__S_KeyAndTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_KeyAndTexture, KeyConfigAndGraphics_11_9329FA284084B471876FF38BEB8791E2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_KeyAndTexture, FoundUseKeyInDataTable__8_1F3727534651A56503978DBEE4FD4B19, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_KeyAndTexture, 0x0079);
		}

		// struct FSPlayerInformation
		TEST_METHOD(UserDefinedStruct__SPlayerInformation__SPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSPlayerInformation, PlayerName_2_6CCD8D58415F086D5353F1A5E2D70D4F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSPlayerInformation, PlayerLevel_8_45E2CF87483257FCD5B5729B95685C5C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSPlayerInformation, PlayerScore_7_2B7F13334FABB3E9B54C01AF56FA88A2, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSPlayerInformation, 0x0018);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_HZ1N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_OWSY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_CPV4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_U2Z5, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_UYBN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_JETS, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_KRV3, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_FPXI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithRetessellationOptions : public FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithRetessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, RetessellationRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithRetessellationOptions, UnknownData_1U00, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithRetessellationOptions, 0x0014);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_NQ14, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_BZLU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_VJHU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_315J, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_7Q6J, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_I72P, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_36GX, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_M11R, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_L0LL, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_A7J4, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_KP35, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_23LL, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_LL3V, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_FXDW, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_YDUA, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_CVK3, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_KFB2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, SampleRateModulation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, UnknownData_H0MI, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, BitModulation, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0030);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DepthModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FrequencyModulation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, FeedbackModulation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetModulation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryModulation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, SpreadModulation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0078);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_2PK9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_GWXG, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_27WS, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_IKFR, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterAudioBusModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterAudioBusModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, AudioBus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerAttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeFollowerReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, EnvelopeGainMultiplier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, FilterParam, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, UnknownData_PB6K, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinFrequencyModulation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxFrequencyModulation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MinResonanceModulation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterAudioBusModulationSettings, MaxResonanceModulation, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterAudioBusModulationSettings, 0x0028);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_XM9R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_BYPW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, AudioBusModulation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x0020);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_J9KA, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x0008);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_2IDP, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_LRWP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_JWLL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, AudioBusModulator, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0020);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_WHJD, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_NA3O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_HREH, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0024);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bBypass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixInputChannelFormatToImpulseResponseFormat, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bMixReverbOutputToOutputChannelFormat, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_GBOD, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_KLD1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_3IPO, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_H6B2, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0028);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_VNPV, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FDynamicsBandSettings
		TEST_METHOD(ScriptStruct__Synthesis__DynamicsBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, CrossoverTopFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, ThresholdDb, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, Ratio, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, KneeBandwidthDb, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, InputGainDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicsBandSettings, OutputGainDb, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicsBandSettings, 0x0020);
		}

		// struct FSubmixEffectMultibandCompressorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectMultibandCompressorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_RMUS, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bLinkChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, bFourPole, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, UnknownData_XIT0, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectMultibandCompressorSettings, Bands, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectMultibandCompressorSettings, 0x0020);
		}

		// struct FSubmixEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_YYRV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, WetLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, DryLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, bFilterEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, UnknownData_FZTC, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterFrequency, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectStereoDelaySettings, FilterQ, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectStereoDelaySettings, 0x0024);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_CH5D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_PRKO, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_FEK1, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, SampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherBaseSettings, BitDepth, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherBaseSettings, 0x0008);
		}

		// struct FSourceEffectChorusBaseSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusBaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusBaseSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusBaseSettings, 0x0018);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_2PXX, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FMagicLeapARPinState
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, Confidence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, ValidRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, RotationError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, TranslationError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, PinType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, UnknownData_8AAB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinState, 0x0014);
		}

		// struct FMagicLeapARPinObjectIdList
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinObjectIdList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinObjectIdList, ObjectIdList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinObjectIdList, 0x0050);
		}

		// struct FMagicLeapARPinQuery
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, Types, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, MaxResults, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, TargetPoint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, Radius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, bSorted, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinQuery, UnknownData_X5R9, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinQuery, 0x0068);
		}

		// struct FMagicLeapPolygon
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPolygon, Vertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPolygon, 0x0010);
		}

		// struct FMagicLeapPlaneBoundary
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Polygon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Holes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundary, 0x0020);
		}

		// struct FMagicLeapPlaneBoundaries
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Boundaries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundaries, 0x0020);
		}

		// struct FMagicLeapPlaneResult
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlanePosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneOrientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ContentOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneDimensions, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, UnknownData_VEY3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, InnerID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneResult, 0x0060);
		}

		// struct FMagicLeapPlanesQuery
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlanesQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, Flags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinHoleLength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinPlaneArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeOrientation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeExtents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SimilarityThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bSearchVolumeTrackingSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bResultTrackingSpace, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, UnknownData_GMTR, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlanesQuery, 0x0060);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_UOXL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_LHYL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_HMQ7, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, OverrideMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_3AMH, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_C6BC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_VEKA, 0x0053);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0058);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_SK5V, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_9A1H, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_0LI2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_GTWL, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_EK12, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_EGMU, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FPhysicalMaterialInput
		TEST_METHOD(ScriptStruct__Landscape__PhysicalMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalMaterialInput, UnknownData_HZF9, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalMaterialInput, 0x0020);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_O0LQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_8UJA, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_NREG, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_HXBD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_QZCE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_MPEH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_4972, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_SMSN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_9TYZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_V40W, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_L25Z, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_KJ0L, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_HEEY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FSSettings_InputKeys
		TEST_METHOD(UserDefinedStruct__SSettings_InputKeys__SSettings_InputKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_InputKeys, ID_15_C1ABEE0744614408F44F40ADD4E1BADF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_InputKeys, UnknownData_BPY8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_InputKeys, Name_2_D9BBB6814D0AE2FE85637B9621E1E400, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_InputKeys, Description_4_3614F10F47AFF4F45B099F9EE8974993, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_InputKeys, InputKeys_struct_16_D57D5EAA400039809AB1DF90BA80F6D2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_InputKeys, 0x0090);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_CMEX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FSImage
		TEST_METHOD(UserDefinedStruct__SImage__SImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSImage, IsUseTexture_8_8BE7F2074116E33F47BFBCBF4DBE1423, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSImage, UnknownData_565G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSImage, Image_9_D42303B141DF46D045248EBB9AF09BDD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSImage, Padding_12_D38E4FC84553049C0982A781EC8D9F3A, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSImage, 0x00A0);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_5D7H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_G48U, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_8J1Q, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_XUMN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_OQYY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassEarlyReflections, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_CPT0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypassLateReflections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_9ABY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, bBypass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, UnknownData_GO4R, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0040);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_YD0S, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_K1S5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_ZVAZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_TZC8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_531L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_RC2Z, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_RIFR, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_A7IX, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x0770);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FPropertyAccessSegment
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Struct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Property, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, ArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, Flags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessSegment, UnknownData_FQYJ, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessSegment, 0x0040);
		}

		// struct FPropertyAccessPath
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentStartIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, PathSegmentCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessPath, UnknownData_JTL8, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessPath, 0x000C);
		}

		// struct FPropertyAccessCopy
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, AccessIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessStartIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, DestAccessEndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopy, UnknownData_0FDQ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopy, 0x0010);
		}

		// struct FPropertyAccessIndirectionChain
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirectionChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, Property, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionStartIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, IndirectionEndIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, EventId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirectionChain, UnknownData_1LWU, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirectionChain, 0x0030);
		}

		// struct FPropertyAccessIndirection
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessIndirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ReturnBufferAlignment, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ArrayIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, ObjectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, Type, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessIndirection, UnknownData_POEZ, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessIndirection, 0x0040);
		}

		// struct FPropertyAccessCopyBatch
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessCopyBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessCopyBatch, Copies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessCopyBatch, 0x0010);
		}

		// struct FPropertyAccessLibrary
		TEST_METHOD(ScriptStruct__PropertyAccess__PropertyAccessLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, PathSegments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, CopyBatches, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, SrcAccesses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, DestAccesses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, Indirections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, EventAccessIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyAccessLibrary, UnknownData_K1D0, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyAccessLibrary, 0x00C8);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_TIOW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_R29S, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_BV68, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_YT9I, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_S5EP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_E1FQ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0070);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_5ERN, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_7QTN, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_1RT4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_1FLX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_0M57, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_5VOS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_UJYD, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_GOA4, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_D35S, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_LN3J, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_M8A3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_4KG8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_O16P, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_QE2I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_X186, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_IFVG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_E7G0, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_ZN2P, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_4NR1, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_NMYF, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_OKHR, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FItemDataStructF
		TEST_METHOD(UserDefinedStruct__ItemDataStructF__ItemDataStructF)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, ItemID_32_4D49031A415E811A9F051F86159AEABC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, UnknownData_NJ9G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Name_18_F9901A254BBC620760A166B7C28F51CE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, UnknownData_RZ9D, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Icon_21_036F118B429515184E0432A4A3D63564, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, ItemDescription_45_E93AE4E74623C855CCE0E3A3248EA9A2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Catergory_9_A22E32BA4DF772979DFCBEA114C5FDE4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, UnknownData_KJBX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Counttoaddwhencollectoneitem_94_D127F899448E72EE20175F8E9FE7D136, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, MaxStackSize_12_517B482743B6E52E1231CDA8E6789435, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, IsStackable__71_FB20994447D899D78AE1B487D4FCF9FB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, UnknownData_T3FD, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Usage_77_09EBA60741F3FC077C7D059745115DBE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, ItemStaticMesh_29_A5E7DEBF4F51603E845BC1804D6FFB57, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Poweroramount_78_2EBA01E94C546D62C6E19F92A4A93BCC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, weightmassinkgformeshphysic_68_79568D564DC4326FCF9BE1B7C03138AA, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Activated__40_B9E4A0EA4485E088E14C38B667493B92, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, UnknownData_4SCU, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, Scale_69_777F0FBA49BF0D0FF3D00AACEFFCE889, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, RelatedActorComponentClass_91_E2C65C8B4A84906333BFF8BFD9586E99, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, CollisionObjectType_67_819FC356498F67BCC7599485FE25A01A, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, UnknownData_JG8X, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, CountUsedInDataStructOnly_58_6F56E75A466B0D4270F08EAA53085B4A, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemDataStructF, ExamineRotationUsedInDataStructOnly_74_E236769542CB2D29F75071877DC01E81, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemDataStructF, 0x0084);
		}

		// struct FSSettings_QualityCustom
		TEST_METHOD(UserDefinedStruct__SSettings_QualityCustom__SSettings_QualityCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, DirectXVersion_26_E6F11CED4840275934CBB2A7898151CC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, RTX_27_3D1AD2A1414C51CC3F71599068C9F2F5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, MotionBlur_22_34A7E3CA4C817A0B325D49B7E59C785C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, JitterGrain_23_ECB8471E40C3F43694F6C59CAE134850, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, Lensflare_24_2DF890BB42EC24C0FAB9A393599B34DF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, Bloom_25_618174F24A48BB5BD741AEAD05A9559F, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_QualityCustom, DepthOfField_30_655573AE45798304EF2FD0AD9F6507A0, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_QualityCustom, 0x001C);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_LOQZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_A253, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_WQ6H, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_K4LG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_6FVP, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_MCYY, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_FZH9, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_T5LY, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_133R, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_9QKV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_559Z, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_G3KK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FActorLayer
		TEST_METHOD(ScriptStruct__ActorLayerUtilities__ActorLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorLayer, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorLayer, 0x0008);
		}

		// struct FMagicLeapSharedWorldSharedData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldSharedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldSharedData, PinIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldSharedData, 0x0010);
		}

		// struct FMagicLeapSharedWorldAlignmentTransforms
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldAlignmentTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldAlignmentTransforms, AlignmentTransforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldAlignmentTransforms, 0x0010);
		}

		// struct FMagicLeapSharedWorldPinData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldPinData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldPinData, 0x0024);
		}

		// struct FMagicLeapSharedWorldLocalData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldLocalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldLocalData, LocalPins, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldLocalData, 0x0010);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_NIIK, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_I6XC, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_VVSH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_W2RP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_5B87, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_VY72, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_3HHG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_IE6K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_MEF0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_HQ6Z, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FSSettings_Display
		TEST_METHOD(UserDefinedStruct__SSettings_Display__SSettings_Display)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, Resolution_23_685749B44F0480369BB46DACD1E3D3BC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, ScreenMode_13_D699FB1347FF51459ACB53B86D4E9E27, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, VSync_7_90F553754B6AACD08C9E0D87BBC3EAE0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, UnknownData_C4KI, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, LimitFrameRate_10_6394B50F4D7EC052DF99799C426A16A8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, Fov_12_7560BB7549CE7783C6DC9B804037629F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, DedicatedMonitor_17_2C0C62B34949EDE71DD021B539B20678, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, DedicatedGraphiccard_19_4269B7154592C2C8B31ED791F6A6FBC6, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Display, LastFoundDefaultResolution_26_409E6AE148B82BF6356C5FB786FF9A7D, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Display, 0x0024);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_FVAH, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_92UO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_1NFH, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_DJV2, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_26CC, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_1177, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_NNIW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FMagicLeapTouchpadGesture
		TEST_METHOD(ScriptStruct__MagicLeapController__MagicLeapTouchpadGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Hand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_LFMC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, MotionSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Direction, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_AFZJ, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, PositionAndForce, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Speed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Distance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, FingerGap, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Angle, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTouchpadGesture, 0x0030);
		}

		// struct FMagicLeapHandMeshBlock
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMeshBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, IndexCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, vertexcount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Vertex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Index, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMeshBlock, 0x0028);
		}

		// struct FMagicLeapHandMesh
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, DataCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMesh, 0x0018);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_5BLD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_6YCB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FSDestructionDebrisCollisionSpawnImpulseProps
		TEST_METHOD(UserDefinedStruct__SDestructionDebrisCollisionSpawnImpulseProps__SDestructionDebrisCollisionSpawnImpulseProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, SpawnOffset_32_6F3F727044A9775C901575BFD5BCA9E8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, SpawnImpulse_35_A93DABD04C6E7C5AFB9540996F56EC49, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, DestroyDelay_37_C5D9C4794E87B03829812BA5D8AED62D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, bPhysicsEnabled_15_2573193041E5E6FBAF486BA0CA712F00, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, bCollisionEnabled_17_3BE60241401BF5F6495ED49F20E60531, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, bCastShadows_19_98D3FC3741A4F99A2AAC2A95EEAD8F5A, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSDestructionDebrisCollisionSpawnImpulseProps, SetPawnToCollisionIgnore_41_E69667D04589617A3BA325A44C0C274C, 0x0047);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSDestructionDebrisCollisionSpawnImpulseProps, 0x0048);
		}

		// struct FDestructionSystemDebrisActorProperties
		TEST_METHOD(UserDefinedStruct__DestructionSystemDebrisActorProperties__DestructionSystemDebrisActorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemDebrisActorProperties, DebrisMesh_38_7CD126E04590672047EE4698CCCE00E5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemDebrisActorProperties, UseCustomValuesForCollisionSpawnImpulse__44_E69667D04589617A3BA325A44C0C274C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemDebrisActorProperties, UnknownData_XDUI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructionSystemDebrisActorProperties, CustomCollisionSpawnImpulse_47_D6C2A54544B0B36DFE8C058B4CEA1771, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructionSystemDebrisActorProperties, 0x0054);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_O745, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_AVE9, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_TDV9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_SIP9, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_DHLD, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_AO42, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_C2WS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_87RG, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_QMC0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_5X7I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_38M8, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_9IFM, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_2K9N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_1C8C, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_E87D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_P1YD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_09ML, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FS_CreditEntry
		TEST_METHOD(UserDefinedStruct__S_CreditEntry__S_CreditEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CreditEntry, Field_7_0E2982B140DD92A1CB3DB8A852C397B8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_CreditEntry, Names_8_5C925BB24949D355EF06E299A102005F, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_CreditEntry, 0x0028);
		}

		// struct FNiagaraTypeDefinitionHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinitionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinitionHandle, RegisteredTypeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinitionHandle, 0x0004);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDefHandle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x000C);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, UnknownData_2MJJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0020);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0010);
		}

		// struct FNiagaraMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, MaterialSubIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, UnknownData_G06F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialOverride, EmitterRendererProperty, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialOverride, 0x0018);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_0569, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_2NMK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x0078);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x00C8);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_1DOF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_35ZX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSetCVarCondition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetCVarCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, CVarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_C1O1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinInt, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxInt, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MinFloat, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, MaxFloat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetCVarCondition, UnknownData_R9OA, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetCVarCondition, 0x0028);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_2QUF, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, CVarConditions, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_2RDX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0030);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_B7SB, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, ParamMapVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_W5IG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, RootVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BindingSourceMode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_4S8D, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, UnknownData_6TG1, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0058);
		}

		// struct FNiagaraComponentPropertyBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraComponentPropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, AttributeBinding, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, PropertyType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, MetadataSetterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, WritableValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraComponentPropertyBinding, UnknownData_794B, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraComponentPropertyBinding, 0x00A0);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0020);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_6L3W, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0038);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentByteOffsets, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, HalfComponentRegisterOffsets, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0060);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_2MVS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_5ZHQ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0040);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0028);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_XSKN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxSystemInstances, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_LEZ8, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0048);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, HalfComponentStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, UnknownData_DSL2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0070);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_4I13, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_T4HA, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalHalfComponents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_618T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_XWIM, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_VMW0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0028);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_PVQI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_N30M, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_NL2A, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_27BI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ScriptLiterals, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_R12D, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_JNA3, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_DBI0, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_1L5F, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x00E0);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0020);
		}

		// struct FNiagaraMaterialAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMaterialAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraVariable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, ResolvedNiagaraVariable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMaterialAttributeBinding, NiagaraChildVariable, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMaterialAttributeBinding, 0x002C);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_OB5D, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0050);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, BIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_0TXD, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_F5UA, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_XOOD, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_JT6I, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_9OMN, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraRibbonUVSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRibbonUVSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, LeadingEdgeMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_3IVZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TrailingEdgeMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_4UCW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, DistributionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_W9V0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, TilingLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, Scale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleUOverride, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, bEnablePerParticleVRangeOverride, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRibbonUVSettings, UnknownData_VKA3, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRibbonUVSettings, 0x0024);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_HCH7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_95H1, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x0098);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0218);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0040);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D0);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_3WQJ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_V85Y, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_9S9J, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_HERW, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_IRBZ, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02C8);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0040);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToNotifySimDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_VEEM, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0048);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_N2WB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ModuleUsageBitmask, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMinIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, ContextStageMaxIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// struct FNiagaraEmitterNameSettingsRef
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterNameSettingsRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterNameSettingsRef, EmitterName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterNameSettingsRef, 0x0018);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_011H, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_YBBV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_2USB, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptInstanceParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptInstanceParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptInstanceParameterStore, UnknownData_QGRY, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptInstanceParameterStore, 0x0088);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_SN8V, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_CGON, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_0U5A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInstanceSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0130);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_Q9SO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_SEBG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ParentAttribute, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_9LE0, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_KT2W, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_TMWH, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_OOUS, 0x00EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00F0);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_WY2R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_DT8I, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_BXCJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_MUCQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraHalfVector4
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector4, W, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector4, 0x0008);
		}

		// struct FNiagaraHalfVector3
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector3)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector3, Z, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector3, 0x0006);
		}

		// struct FNiagaraHalfVector2
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalfVector2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalfVector2, Y, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalfVector2, 0x0004);
		}

		// struct FNiagaraHalf
		TEST_METHOD(ScriptStruct__Niagara__NiagaraHalf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraHalf, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraHalf, 0x0002);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_M6B2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_8L8Q, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_FJ5V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FLowEntryRegexCaptureGroup
		TEST_METHOD(ScriptStruct__LowEntryExtendedStandardLibrary__LowEntryRegexCaptureGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, CaptureGroupNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, BeginIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, EndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, UnknownData_UZU5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexCaptureGroup, Match, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLowEntryRegexCaptureGroup, 0x0020);
		}

		// struct FLowEntryRegexMatch
		TEST_METHOD(ScriptStruct__LowEntryExtendedStandardLibrary__LowEntryRegexMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, MatchNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, BeginIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, EndIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, UnknownData_H7TO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, Match, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowEntryRegexMatch, CaptureGroups, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLowEntryRegexMatch, 0x0030);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_LLQB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_JU41, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_TXQ2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FChaosSolverConfiguration
		TEST_METHOD(ScriptStruct__Chaos__ChaosSolverConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, Iterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPairIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, PushOutIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionPushOutPairIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginFraction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionMarginMax, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPairIterations, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, JointPushOutPairIterations, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterConnectionFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, ClusterUnionConnectionType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateCollisionData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_T1VO, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, CollisionFilterSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateBreakData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_GTKA, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, BreakingFilterSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateTrailingData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_32WM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, TrailingFilterSettings, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, bGenerateContactGraph, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosSolverConfiguration, UnknownData_6CHC, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosSolverConfiguration, 0x0068);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__Chaos__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__Chaos__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__Chaos__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_KGG9, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__Chaos__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__Chaos__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FMyPluginStruct
		TEST_METHOD(ScriptStruct__UObjectPlugin__MyPluginStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMyPluginStruct, TestString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMyPluginStruct, 0x0010);
		}

		// struct FMotoSynthRuntimeSettings
		TEST_METHOD(ScriptStruct__MotoSynth__MotoSynthRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bSynthToneEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_SKBC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthToneFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, SynthOctaveShift, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bGranularEngineEnabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_N3AF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEngineVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GranularEnginePitchScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumSamplesToCrossfadeBetweenGrains, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, NumGrainTableEntriesPerGrain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainTableRandomOffsetForConstantRPMs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, GrainCrossfadeSamplesForConstantRPMs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_XSFC, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, AccelerationSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, DecelerationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerEnabled, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_H1JH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoDelayMsec, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoFeedback, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerWetlevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDryLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerDelayRatio, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, bStereoWidenerFilterEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_KEJY, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterFrequency, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, StereoWidenerFilterQ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotoSynthRuntimeSettings, UnknownData_K9EA, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotoSynthRuntimeSettings, 0x0068);
		}

		// struct FGrainTableEntry
		TEST_METHOD(ScriptStruct__MotoSynth__GrainTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, SampleIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrainTableEntry, RPM, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrainTableEntry, 0x0008);
		}

		// struct FSInputKey_ConfigAndGraphics
		TEST_METHOD(UserDefinedStruct__SInputKey_ConfigAndGraphics__SInputKey_ConfigAndGraphics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, Key_7_0FF416554953C4F703278199E45EED46, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, IsAxis_37_A7495F8A481DED3B27E43FB087934EAA, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, IsDissableAxisAutoAssign_40_A67F51694502DE89F5A6069AEE22A51E, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, UnknownData_G0VK, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, DefaultAxisScale_44_A2129A364D23B8B864588A802D932AA6, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, IsUseIcon_16_2191FB2F42EC956B4B977A9D34110AE2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, UnknownData_CSC4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, Icon_21_79502BCB436044E97704359A3BF8EB82, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, IsUseName_18_F3DE32264380420A439035B326ECB2D2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, UnknownData_Z230, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, KeyName_13_D38A297D4D9C6DD86D39D6A66BAD0DC6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, IsHaveAxisAnalog_31_1BCA425A433181F262F4319CBF4425A3, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, UnknownData_6UGD, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKey_ConfigAndGraphics, AxisAnalog_28_434AE98F4F3B6D1A45137C8DFB780AA5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSInputKey_ConfigAndGraphics, 0x0078);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_IANH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_9KX2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FLevelSequenceAnimSequenceLinkItem
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceAnimSequenceLinkItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, SkelTrackGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, PathToAnimSequence, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bExportCurves, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, bRecordInWorldSpace, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceAnimSequenceLinkItem, UnknownData_XV4I, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceAnimSequenceLinkItem, 0x0030);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_6L9R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_691E, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_SVPI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_H21O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_JEEL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FMagicLeapLightEstimationColorTemperatureState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationColorTemperatureState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, ColorTemperatureKelvin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, AmbientColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, UnknownData_QZ6M, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, Timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationColorTemperatureState, 0x0020);
		}

		// struct FMagicLeapLightEstimationAmbientGlobalState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationAmbientGlobalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, AmbientIntensityNits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, Timestamp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationAmbientGlobalState, 0x0018);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_HM5N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_I81N, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_AMHO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_MUH4, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0050);
		}

		// struct FInventorySlotStructB
		TEST_METHOD(UserDefinedStruct__InventorySlotStructB__InventorySlotStructB)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotStructB, ItemID_9_7151504F43872DD6D60F559C5C0E5049, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotStructB, UnknownData_KJNK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotStructB, count_5_2841C78C44EAD3A2BF477C9C97D3C1FD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotStructB, Rotation_14_59BCECE7440FB8C9F5992BA310DED211, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventorySlotStructB, 0x0014);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_DDI2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FSSettings_Brightness
		TEST_METHOD(UserDefinedStruct__SSettings_Brightness__SSettings_Brightness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Brightness, Brightness_2_38D4682C41AFA91DA206C7BCDD8121D3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Brightness, 0x0004);
		}

		// struct FSStyle
		TEST_METHOD(UserDefinedStruct__SStyle__SStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSStyle, IsRewriteDefaults_8_344E0A2B4A620CE329A14D91BAC36597, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSStyle, UnknownData_EO3H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSStyle, Color_2_D12BF580477CB797743CA58051A4E380, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSStyle, UnknownData_9BJI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSStyle, Font_5_45020C0F46C40622C400EE9768E72B71, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSStyle, Padding_11_D3C52F28458144A763FFA5B3CFD717D1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSStyle, 0x0080);
		}

		// struct FST_Spawn_Information
		TEST_METHOD(UserDefinedStruct__ST_Spawn_Information__ST_Spawn_Information)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_Information, StationaryLocation_4_4702FBF844CEF7BF744C00A2B2B9BBB4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_Information, PathReferences_14_B93BEF8C44AEEE74CB30A9AFFD781DE8, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_Spawn_Information, 0x0018);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_TLT9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_LZGU, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_G99T, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_AA4S, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_GZVH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_I3MV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_RTO0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FBodyInstance : public FBodyInstanceCore
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_J957, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_ULQR, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_IUWL, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_QGGR, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_184L, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_EGUD, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_7N84, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_J0UD, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0158);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_EUP7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_O6E8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_4PCN, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_MQ4B, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_IB9D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, RetriggerTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_SPLI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_AZNX, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0028);
		}

		// struct FSoundModulationDestinationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDestinationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, UnknownData_KTEL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDestinationSettings, Modulator, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDestinationSettings, 0x0010);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_Y60Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_QGX3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_64GJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_O05Z, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_W1F1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_PE7D, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_YFLP, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_Y2D6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Version, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, UnknownData_DTWI, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0070);
		}

		// struct FVertexOffsetUsage
		TEST_METHOD(ScriptStruct__Engine__VertexOffsetUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexOffsetUsage, Usage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexOffsetUsage, 0x0004);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_WL4K, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0048);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_EMRG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_FFQ6, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_EA8A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_RRB6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_IIEY, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_KDD0, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_GOQJ, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_G2ZQ, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_NQWH, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_PTZ0, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_YCGN, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_L2V1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_FK1M, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_HWX2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_UISK, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_EZP7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeEntries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_PMDN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_JYJ2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_WA1U, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_31GQ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_PNB8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_FKHJ, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_8S6G, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_D9AI, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_DVTM, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_EGM8, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_2E0T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_0V2Y, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_SDTW, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_RUAD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, bIsVelocityDeltaUnderThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, UnknownData_9KS9, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0030);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_YF99, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_O4VM, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_GQMH, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_R47U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ElementIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_OBTQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x008C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_GVHW, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_DM11, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_D1Y0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_QAEY, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_XK59, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_8CO3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_4PPM, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_MDJD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_5CIZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_AZ6O, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_X6E4, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_V1ZO, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_PIXP, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_NQ19, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_0941, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_JWDN, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_JZ00, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_3HPR, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_PEE7, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_R7VJ, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_IDOS, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_AN55, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_G6GQ, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_49W1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, VolumeModulationDestination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, PitchModulationDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, HighpassModulationDestination, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultSettings, LowpassModulationDestination, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultSettings, 0x0040);
		}

		// struct FSoundModulationDefaultRoutingSettings : public FSoundModulationDefaultSettings
		TEST_METHOD(ScriptStruct__Engine__SoundModulationDefaultRoutingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, VolumeRouting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, PitchRouting, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, HighpassRouting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, LowpassRouting, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationDefaultRoutingSettings, UnknownData_3T1Z, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationDefaultRoutingSettings, 0x0048);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_GXIA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_3V4M, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_Y6MV, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendStage, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_0MU3, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_6DEE, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_FF5Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, AudioBus, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_HDR8, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B8);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_C644, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_QYMK, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_UU7A, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_8NH1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_XZ6J, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_1Y7W, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_7WA2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_JO7Q, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_4DO0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_MXFD, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_W40G, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_I7FQ, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_41ZW, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ToneCurveAmount, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_10JN, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_31I8, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_DUWW, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_GX1M, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_RXO3, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOIntensity, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAORadius, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_JSAS, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_IIJS, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_YKZD, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_4B7V, 0x0526);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_OH9C, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0550);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_K1PU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_HU2M, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_26IC, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_F3V6, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05E0);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_401R, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05F0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_PWEZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_K9L5, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0600);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_G48N, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_LXBB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_ONZD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_P2WO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_7XWB, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_PA23, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_32R8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_VSBK, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_6ULB, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_5TBX, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_47D1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_R0AJ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_DDXZ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_V2BF, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_XF7B, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_N3OR, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_6C53, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_SRVP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_WOF7, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_HIL9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_L7SD, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_9DO5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_0WS5, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_3WV9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_XERQ, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_SUWG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0118);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_IO2Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x0158);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupScope, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_XO0X, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_O8EG, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0038);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_VRQK, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_27MT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_OPDW, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0080);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_4LNX, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_JRUX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_5IXF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_MHJU, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_618E, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_JXFF, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_B2W3, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x00F8);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_U8G6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_0YYN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_4GGE, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_9KQ0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_K0NC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_MW3N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_4PXR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_XFIX, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_YOKK, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_XRR5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_5HQK, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_YUQ4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_WWRG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_B1A6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_0A8F, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_NF8J, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_UYNL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x0760);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_5U28, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_OKYY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_8N8C, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_PJNE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_EHY9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_7N7F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UniqueTransientPackage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0068);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_LYG4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_OTDJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_FHUX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00B8);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_R8NG, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0160);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_WWLD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_FHWR, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_50C7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_C0S3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsUObjectWrapper, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_XWW5, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_XYGK, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_9UIH, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_UE0Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_U5JU, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_8VYM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_OTPY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_GBTD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_CZ9X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_RGHF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_8ABU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_8NCM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_IXWJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_8CSK, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_CZSS, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_K4W7, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_BFE5, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_5970, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bVisibleInRayTracing, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_KK5O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_EU7N, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_T5UP, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_V2JO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_GB5Q, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_69M6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_C8B5, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FComponentSync
		TEST_METHOD(ScriptStruct__Engine__ComponentSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, SyncOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSync, UnknownData_EMDU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSync, 0x000C);
		}

		// struct FLODMappingData
		TEST_METHOD(ScriptStruct__Engine__LODMappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, Mapping, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODMappingData, InverseMapping, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODMappingData, 0x0020);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_SEDV, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_6W12, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_8PUN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_YC40, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_ZUL7, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_XLNO, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_HB61, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_DXG0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_EN6J, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_FMGO, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_LO6O, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_Y0DI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_3CXT, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_OXL4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_7HC3, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_ZO0B, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_1JYQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_J7L7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_ZO8K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_8VZA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_6ZBI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_I0D9, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_F0O0, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_17ZK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_6Q7K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_TC7X, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_U3O9, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x0100);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FQuartzPulseOverrideStep
		TEST_METHOD(ScriptStruct__Engine__QuartzPulseOverrideStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, NumberOfPulses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, PulseDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzPulseOverrideStep, UnknownData_ZB5L, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzPulseOverrideStep, 0x0008);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00E8);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_9HLB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_UCQ8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_29KL, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_3P3U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_U5UF, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_CR1B, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_E6XS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_WXGT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_ED4J, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterNetworkSerializationPackedBits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterNetworkSerializationPackedBits, UnknownData_GZV1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterNetworkSerializationPackedBits, 0x0098);
		}

		// struct FCharacterMoveResponsePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterMoveResponsePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMoveResponsePackedBits, 0x0098);
		}

		// struct FCharacterServerMovePackedBits : public FCharacterNetworkSerializationPackedBits
		TEST_METHOD(ScriptStruct__Engine__CharacterServerMovePackedBits)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterServerMovePackedBits, 0x0098);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_AVLW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_2M43, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_U51D, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_Y60P, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_QBGX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_OTNC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_RRKG, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_5WOH, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_PYE7, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_5N7G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_LZTJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_HJPF, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTTTrackId
		TEST_METHOD(ScriptStruct__Engine__TTTrackId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackId, TrackIndex, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackId, 0x0008);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_85WG, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_JK1M, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_RTPS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_7FFI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_VZLA, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_12TC, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_G6AR, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_PSCE, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_JK5N, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstanceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstanceBase, UnknownData_I9O4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstanceBase, 0x0018);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_BRH2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_MBQK, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_8VV4, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_KVY2, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_KMAR, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_O6G8, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_HSYI, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearAlpha, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularAlpha, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_9RQ6, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x010C);
		}

		// struct FConstraintInstance : public FConstraintInstanceBase
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_DYKS, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_PR0F, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C0);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0114);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_0B6F, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_P96P, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, ScalabilityGroup, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_72R2, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0028);
		}

		// struct FCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__CustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, VariantType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_PIW4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttribute, UnknownData_QU08, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttribute, 0x0030);
		}

		// struct FCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__CustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, UnknownData_LSBH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributePerBoneData, Attributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributePerBoneData, 0x0018);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_CMEZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, UnknownData_UCR4, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_0X2C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_VCY9, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_ZVXW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_IYO5, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_JVGI, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_WETP, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_L497, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_L8FW, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_5ZWU, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_S8WA, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_QO10, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_OTTT, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_JDLI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_FC0R, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_N9V6, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_8SH3, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_6Q3B, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FCustomAttributeSetting
		TEST_METHOD(ScriptStruct__Engine__CustomAttributeSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAttributeSetting, Meaning, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAttributeSetting, 0x0020);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_KN74, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_CV6O, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_HZJ1, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_9RK6, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_WRFY, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_OI6R, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0008);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_Q5WV, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_J63G, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_W2TX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_131E, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_HIH5, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_CFZ4, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_79HR, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FAudioVolumeSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, ListenerLocationState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SourceLocationState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, UnknownData_MWKW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixSendSettings, SubmixSends, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixSendSettings, 0x0018);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_H4PP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_P0TJ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_TYP8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_MXG4, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_PINM, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_Y4ZW, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_YTWS, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_ZFZI, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_J4GO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_QUOV, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_X7IH, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_3FAI, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_M4R3, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_OVSG, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_HUVV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_DT6T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_608T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_4ISK, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_CLZ2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_HNAU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FAudioVolumeSubmixOverrideSettings
		TEST_METHOD(ScriptStruct__Engine__AudioVolumeSubmixOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, SubmixEffectChain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, CrossfadeTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioVolumeSubmixOverrideSettings, UnknownData_LSI7, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioVolumeSubmixOverrideSettings, 0x0020);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_HMD1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_E4TW, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_LCOS, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FCustomOutput
		TEST_METHOD(ScriptStruct__Engine__CustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, OutputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomOutput, UnknownData_D8H8, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomOutput, 0x000C);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_WKBG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_70OO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_GFKW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_9XKD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_7XE8, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_430G, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, ModulationSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_KJA6, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0080);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_L6J3, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_AXA4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_XOVR, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_ZOI8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_HPZ4, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_POQ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_RQ08, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_JSUP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_UU1K, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_4KCG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_XKTW, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_8WPF, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_WWZI, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0288);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_V13E, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_R2Y9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_SXV8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_9LN1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_01ME, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_2TUD, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_04SU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_M0OK, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_G4XS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FBakedStringCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedStringCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStringCustomAttribute, StringCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStringCustomAttribute, 0x0090);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_5WKW, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_IO5Q, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_KRWM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FBakedIntegerCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedIntegerCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedIntegerCustomAttribute, IntCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedIntegerCustomAttribute, 0x0088);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_XAV9, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_OTT6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_M5RV, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FBakedFloatCustomAttribute
		TEST_METHOD(ScriptStruct__Engine__BakedFloatCustomAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedFloatCustomAttribute, FloatCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedFloatCustomAttribute, 0x0090);
		}

		// struct FBakedCustomAttributePerBoneData
		TEST_METHOD(ScriptStruct__Engine__BakedCustomAttributePerBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, BoneTreeIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, UnknownData_RYK7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, StringAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, IntAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedCustomAttributePerBoneData, FloatAttributes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedCustomAttributePerBoneData, 0x0038);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_C6TZ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_O2YS, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_YYH5, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_GE6D, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_70H2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_FONX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_OET2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_9EYP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FSkinWeightProfileManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileManagerTickFunction, UnknownData_KF8X, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileManagerTickFunction, 0x0030);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_HRVL, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0170);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_4GZV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_YN5A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0018);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_2RK7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_NX0O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSoundSubmixSpectralAnalysisBandSettings
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSpectralAnalysisBandSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, BandFrequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, AttackTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, ReleaseTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSpectralAnalysisBandSettings, QFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSpectralAnalysisBandSettings, 0x0010);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_JEAD, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_BYKC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_HQ7G, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x01A0);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_54W6, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_77A6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_3W22, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_JVDY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_DB08, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_BLID, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_RZOT, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_D0K9, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_ZVY5, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_TTTQ, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Downscale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DownscaleOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_OU0R, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileCountBias, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, VirtualTextureTileSizeBias, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0064);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_WHML, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_UTTM, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_6HFD, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_S077, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_1ADY, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_UJ16, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_F9L6, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_F899, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_VKHI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_E6DE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_7UYL, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, FixedTimeStep, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x001C);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_WQVM, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_740P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_ZWRZ, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_THTG, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_M9IM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_WIG5, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, CollisionEnabled, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_J72P, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_JCHX, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_99ED, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_V8LV, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_2SUH, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_UE9L, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_1W1T, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_351I, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_G2NG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_VWEP, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_ZSSG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_AJSY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_U1LW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_OTL7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_BVSX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_C0P8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_MS6Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_YNQA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_C433, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x00E0);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_HGWA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_8BHL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_NTQ4, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_Z16C, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_S11Q, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupScope, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_IJED, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_MS3G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_1253, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_2GFC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_QJLH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_ZK6V, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_HX4P, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_000A, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordTransforms, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordCurves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_A97E, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0014);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_GUMP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FHLODISMComponentDesc
		TEST_METHOD(ScriptStruct__Engine__HLODISMComponentDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, StaticMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODISMComponentDesc, Instances, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODISMComponentDesc, 0x0020);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_CGTR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_EUAQ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_IW04, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_W7Q6, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0150);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_NO9W, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_T167, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_QJSO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_07Z5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_UNFA, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_B0RT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_W767, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_LKSQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_A4ET, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_TIKI, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_KIQL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_JWA5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_BW0K, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_74JI, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0110);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_1Q4X, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_6QLI, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_IP6W, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_E94R, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FStaticComponentMaskValue
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskValue, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskValue, 0x0004);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_4Y3E, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_UP58, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_8RPV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_95AX, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_A8H9, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_GJ5W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_VU5K, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_TBYQ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_4GBP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_I5TB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ToolTip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_WDPI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_G0TK, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_TQZO, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_O9WK, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_ZVYN, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_JIHK, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_DQXX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_ZX84, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_HMPU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_M0GC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x00A0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_6TJJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_AYMQ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_L8H9, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_TL71, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_4F2C, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_6O98, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_O02U, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_JA66, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_75X8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_8JHY, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimInstanceSubsystemData
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceSubsystemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceSubsystemData, UnknownData_M6NE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceSubsystemData, 0x0001);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_HC8K, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_T91X, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_YX1G, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_LLUT, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_ZRYB, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_ZWZH, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_DR9D, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_LIL2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_9L3A, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FQuartzTimeSignature
		TEST_METHOD(ScriptStruct__Engine__QuartzTimeSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, NumBeats, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, BeatType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, UnknownData_SC6A, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTimeSignature, OptionalPulseOverride, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTimeSignature, 0x0018);
		}

		// struct FQuartzClockSettings
		TEST_METHOD(ScriptStruct__Engine__QuartzClockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, TimeSignature, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, bIgnoreLevelChange, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzClockSettings, UnknownData_NR3A, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzClockSettings, 0x0020);
		}

		// struct FQuartzQuantizationBoundary
		TEST_METHOD(ScriptStruct__Engine__QuartzQuantizationBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Quantization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_FZLS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, Multiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, CountingReferencePoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzQuantizationBoundary, UnknownData_SVF2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzQuantizationBoundary, 0x000C);
		}

		// struct FQuartzTransportTimeStamp
		TEST_METHOD(ScriptStruct__Engine__QuartzTransportTimeStamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuartzTransportTimeStamp, UnknownData_ZXNS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuartzTransportTimeStamp, 0x000C);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_YOQ4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_2NYO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_XWKB, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_XNXD, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_VCH9, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_3OYB, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_1YVH, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_4KKY, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_S538, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FSceneViewExtensionIsActiveFunctor
		TEST_METHOD(ScriptStruct__Engine__SceneViewExtensionIsActiveFunctor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneViewExtensionIsActiveFunctor, UnknownData_94ZD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneViewExtensionIsActiveFunctor, 0x0050);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_LGM2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_V4F0, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_U2EB, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_N6YE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_H9KS, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_XTHY, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x08B0);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_ECHN, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FCameraShakeDuration
		TEST_METHOD(ScriptStruct__Engine__CameraShakeDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeDuration, UnknownData_XDV8, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeDuration, 0x0008);
		}

		// struct FCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__CameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeInfo, BlendOut, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeInfo, 0x0010);
		}

		// struct FCameraShakeUpdateResult
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateResult, UnknownData_TDNA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateResult, 0x0020);
		}

		// struct FCameraShakeUpdateParams
		TEST_METHOD(ScriptStruct__Engine__CameraShakeUpdateParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraShakeUpdateParams, UnknownData_QDQS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraShakeUpdateParams, 0x05F0);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_OJFA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_XY4D, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E8);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_NET3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_IGIF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_83YP, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_K9K0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_7BY6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_UXEM, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_ACSD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_FL9R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_T4L8, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_81M4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_AOWL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_GWWY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_M97E, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_2FFS, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_3IZ8, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_EAHI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_P7QS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_6CU7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_OBY6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_CFFX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_DYJI, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_L1QA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_WKBE, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_WYAJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_RQL2, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_UCXD, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_3NDD, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_LU2P, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_XXZM, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_JPJ9, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_7644, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_7MOS, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_VSUR, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_R06W, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FActorPerceptionUpdateInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, TargetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Target, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionUpdateInfo, Stimulus, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionUpdateInfo, 0x0048);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_ZIB4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_C8UA, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_8TTH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_G4WR, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_MI7J, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_NZBK, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_9F25, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, bUseMultipleInfluences, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_XYNB, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, SkinningKernelRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_NYHY, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0160);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_CMOD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_Y8FC, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_ZFQC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_PQFI, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_C7CX, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FST_Spawn_AI
		TEST_METHOD(UserDefinedStruct__ST_Spawn_AI__ST_Spawn_AI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, Zombie_Enemy_41_E6AB2CAE4C7C3BBC6ADB7899C1A5C615, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, UnknownData_KPP9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, AItoSpawn_58_09A020824D307649F6A64CBC6BBDF9B5, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, AmounttoSpawn_5_78B83A494904991EC7EA9FA80CADDFA3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, SpawnFromLevel_64_02688BC445E127B706DFC9A8B4015BC3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, SpawnUpToLevel_65_0EC401094536910510E66E806F356344, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, AmountProgression_68_941DB4A2406B9572A6D21D911E2DA530, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, UnknownData_ITVJ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, LocationInformation_46_88F7821948D075E6C5F989987722B82A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Spawn_AI, Randomization_54_BA4387294823F62FFA5FDB9EBC1C2FF5, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_Spawn_AI, 0x004C);
		}

		// struct FSSettings_Gameplay
		TEST_METHOD(UserDefinedStruct__SSettings_Gameplay__SSettings_Gameplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Gameplay, Blood_28_E6F11CED4840275934CBB2A7898151CC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Gameplay, AimAssist_29_3D1AD2A1414C51CC3F71599068C9F2F5, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Gameplay, 0x0008);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_9SMR, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_BQMH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_J405, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_S493, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_ZC66, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FS_DetailsSettings
		TEST_METHOD(UserDefinedStruct__S_DetailsSettings__S_DetailsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_DetailsSettings, Icon_2_070D3BF04C6904931C0882BC6DF27C92, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_DetailsSettings, Title_5_8B043A144C6C906C83754E966A0EC83C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_DetailsSettings, Statistic_7_BCE9568F4680C1BCADE407A6142F8FD5, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_DetailsSettings, 0x0038);
		}

		// struct FSLeaderboardRowData
		TEST_METHOD(UserDefinedStruct__SLeaderboardRowData__SLeaderboardRowData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, SteamID_26_68C578BE4E3B2C005EAC2E8FA477BD3A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, Position_2_755F26434AB95720A6FD14BEBBE81272, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, UnknownData_LS68, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, Avatar_5_A72122D2418EAA949812C9BC479BE9C4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, Playername_9_29FDE66A416D7D752FA324BBC46A1DD6, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, Score_11_ECE3870E4516A7929048C48FF9B69F75, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, IsControlledPlayer__17_185DE82D4AF4A8DD8E619FBD451F3806, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, IsLocalPlayerWithPlayerStateRef__16_B1D653C547C6D13798F1FC9462D0BCB2, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, UnknownData_9BUC, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSLeaderboardRowData, OptionalPlayerStateRef_27_A5A14B3440E456BDE8EC598A84614E41, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSLeaderboardRowData, 0x0038);
		}

		// struct FSSettings_Player
		TEST_METHOD(UserDefinedStruct__SSettings_Player__SSettings_Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Player, PlayerName_15_18AE42DE4206AC739043D1A1E26888D9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Player, PlayerModelSkinIndex_22_87ED56104B0085D5CED73CBC0819D072, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Player, DlcFanRewardsIsInstalled_26_4BBAC4BE4279E0902B849E95DAA54868, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Player, 0x0015);
		}

		// struct FHairGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumCurves, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumGuides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumCurveVertices, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfo, NumGuideVertices, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupInfo, 0x0014);
		}

		// struct FHairGroupInfoWithVisibility : public FHairGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupInfoWithVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfoWithVisibility, bIsVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupInfoWithVisibility, UnknownData_880C, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupInfoWithVisibility, 0x0018);
		}

		// struct FHairGeometrySettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGeometrySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairRootScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairTipScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGeometrySettings, HairClipScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGeometrySettings, 0x0010);
		}

		// struct FHairShadowSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairShadowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, HairShadowDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, HairRaytracingRadiusScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, bUseHairRaytracingGeometry, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, bVoxelize, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairShadowSettings, UnknownData_QQ6V, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairShadowSettings, 0x000C);
		}

		// struct FHairAdvancedRenderingSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairAdvancedRenderingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairAdvancedRenderingSettings, bUseStableRasterization, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairAdvancedRenderingSettings, bScatterSceneLighting, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairAdvancedRenderingSettings, 0x0002);
		}

		// struct FHairSolverSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, EnableSimulation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, NiagaraSolver, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, UnknownData_WU7S, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, CustomSystem, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, SubSteps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairSolverSettings, IterationCount, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairSolverSettings, 0x0038);
		}

		// struct FHairDecimationSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairDecimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairDecimationSettings, CurveDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairDecimationSettings, VertexDecimation, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairDecimationSettings, 0x0008);
		}

		// struct FHairInterpolationSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bOverrideGuides, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, UnknownData_UELK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, HairToGuideDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, InterpolationQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, InterpolationDistance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bRandomizeGuide, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairInterpolationSettings, bUseUniqueGuide, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairInterpolationSettings, 0x000C);
		}

		// struct FHairLODSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, CurveDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, VertexDecimation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, AngularThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, ScreenSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, ThicknessScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, bVisible, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, GeometryType, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairLODSettings, UnknownData_300N, 0x0016);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairLODSettings, 0x0018);
		}

		// struct FHairCardsClusterSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsClusterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, ClusterDecimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, Type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, bUseGuide, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsClusterSettings, UnknownData_XN6D, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsClusterSettings, 0x0008);
		}

		// struct FHairCardsGeometrySettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsGeometrySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, GenerationType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, UnknownData_7QJ5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, CardsCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, ClusterType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, UnknownData_I4WQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MinSegmentLength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, AngularThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MinCardsLength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsGeometrySettings, MaxCardsLength, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsGeometrySettings, 0x001C);
		}

		// struct FHairCardsTextureSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCardsTextureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, AtlasMaxResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, PixelPerCentimeters, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, LengthTextureCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCardsTextureSettings, DensityTextureCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCardsTextureSettings, 0x0010);
		}

		// struct FHairGroupCardsTextures
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupCardsTextures)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, DepthTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, CoverageTexture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, TangentTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, AttributeTexture, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, AuxilaryDataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsTextures, UnknownData_HXJP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupCardsTextures, 0x0030);
		}

		// struct FHairGroupCardsInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupCardsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsInfo, NumCards, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupCardsInfo, NumCardVertices, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupCardsInfo, 0x0008);
		}

		// struct FHairGroupsMeshesSourceDescription
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsMeshesSourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, ImportedMesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, Textures, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, GroupIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, LODIndex, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMeshesSourceDescription, ImportedMeshKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsMeshesSourceDescription, 0x0060);
		}

		// struct FHairGroupsMaterial
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMaterial, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsMaterial, SlotName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsMaterial, 0x0010);
		}

		// struct FHairGroupsRendering
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsRendering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, Material, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, GeometrySettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, ShadowSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, AdvancedSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsRendering, UnknownData_TP9I, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsRendering, 0x0030);
		}

		// struct FHairGroupsProceduralCards
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsProceduralCards)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, ClusterSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, GeometrySettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, TextureSettings, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsProceduralCards, Version, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsProceduralCards, 0x0038);
		}

		// struct FHairGroupsCardsSourceDescription
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsCardsSourceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, SourceType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, UnknownData_I1T2, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralMesh, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralMeshKey, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ImportedMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ProceduralSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, Textures, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, GroupIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, LODIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, CardsInfo, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsCardsSourceDescription, ImportedMeshKey, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsCardsSourceDescription, 0x00C0);
		}

		// struct FHairStretchConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairStretchConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, SolveStretch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, ProjectStretch, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, UnknownData_2LN7, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchDamping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchStiffness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, UnknownData_OGCJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStretchConstraint, StretchScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStretchConstraint, 0x0098);
		}

		// struct FHairCollisionConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairCollisionConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, SolveCollision, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, ProjectCollision, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, UnknownData_57T3, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, StaticFriction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, KineticFriction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, StrandsViscosity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, GridDimension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, CollisionRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairCollisionConstraint, RadiusScale, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairCollisionConstraint, 0x00A8);
		}

		// struct FHairStrandsParameters
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairStrandsParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, UnknownData_TIC6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsSmoothing, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, StrandsThickness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairStrandsParameters, ThicknessScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairStrandsParameters, 0x0098);
		}

		// struct FHairGroupsLOD
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, LODs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, ClusterWorldSize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsLOD, ClusterScreenSizeScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsLOD, 0x0018);
		}

		// struct FHairExternalForces
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairExternalForces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, GravityVector, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, AirDrag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairExternalForces, AirVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairExternalForces, 0x001C);
		}

		// struct FHairBendConstraint
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairBendConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, SolveBend, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, ProjectBend, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, UnknownData_D3OD, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendDamping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendStiffness, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, UnknownData_YKS2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairBendConstraint, BendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairBendConstraint, 0x0098);
		}

		// struct FHairGroupsInterpolation
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsInterpolation, DecimationSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsInterpolation, InterpolationSettings, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsInterpolation, 0x0014);
		}

		// struct FHairMaterialConstraints
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairMaterialConstraints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, BendConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, StretchConstraint, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairMaterialConstraints, CollisionConstraint, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairMaterialConstraints, 0x01D8);
		}

		// struct FHairGroupsPhysics
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupsPhysics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, SolverSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, ExternalForces, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, UnknownData_L28C, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, MaterialConstraints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupsPhysics, StrandsParameters, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupsPhysics, 0x02C8);
		}

		// struct FGoomBindingGroupInfo
		TEST_METHOD(ScriptStruct__HairStrandsCore__GoomBindingGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, RenRootCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, RenLODCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, SimRootCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGoomBindingGroupInfo, SimLODCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGoomBindingGroupInfo, 0x0010);
		}

		// struct FHairGroupDesc
		TEST_METHOD(ScriptStruct__HairStrandsCore__HairGroupDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, GuideCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairWidth_Override, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_PEVW, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRootScale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRootScale_Override, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_20EU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairTipScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairTipScale_Override, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_R5WM, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairClipLength, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairClipLength_Override, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_Y40E, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairShadowDensity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairShadowDensity_Override, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_Y1WA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRaytracingRadiusScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, HairRaytracingRadiusScale_Override, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseHairRaytracingGeometry, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseHairRaytracingGeometry_Override, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_NH3B, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, LODBias, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseStableRasterization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bUseStableRasterization_Override, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bScatterSceneLighting, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bScatterSceneLighting_Override, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bSupportVoxelization, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, bSupportVoxelization_Override, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, UnknownData_N35Z, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHairGroupDesc, LODForcedIndex, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHairGroupDesc, 0x004C);
		}

		// struct FFollicleMaskOptions
		TEST_METHOD(ScriptStruct__HairStrandsCore__FollicleMaskOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, Groom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, Channel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFollicleMaskOptions, UnknownData_6LQH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFollicleMaskOptions, 0x0010);
		}

		// struct FGroomConversionSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomConversionSettings, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomConversionSettings, Scale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomConversionSettings, 0x0018);
		}

		// struct FGroomHairGroupPreview
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomHairGroupPreview)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, CurveCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, GuideCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomHairGroupPreview, InterpolationSettings, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomHairGroupPreview, 0x0020);
		}

		// struct FGroomBuildSettings
		TEST_METHOD(ScriptStruct__HairStrandsCore__GroomBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bOverrideGuides, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, UnknownData_0YMB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, HairToGuideDensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, InterpolationQuality, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, InterpolationDistance, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bRandomizeGuide, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGroomBuildSettings, bUseUniqueGuide, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGroomBuildSettings, 0x000C);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_0XRN, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_XBNI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_VOXA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_KO60, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_9HM1, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_1723, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_XUK9, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_3LCH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FSteamInventoryResult
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryResult, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryResult, 0x0004);
		}

		// struct FSteamInventoryResultReady
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryResultReady)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryResultReady, Handle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryResultReady, Result, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryResultReady, UnknownData_B8Z5, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryResultReady, 0x0008);
		}

		// struct FSteamInventoryFullUpdate
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryFullUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryFullUpdate, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryFullUpdate, 0x0004);
		}

		// struct FSteamInventoryStartPurchaseResult
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryStartPurchaseResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryStartPurchaseResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryStartPurchaseResult, UnknownData_3N3G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryStartPurchaseResult, OrderId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryStartPurchaseResult, TransactionId, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryStartPurchaseResult, 0x0028);
		}

		// struct FSteamInventoryRequestPricesResult
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryRequestPricesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryRequestPricesResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryRequestPricesResult, UnknownData_VPC5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryRequestPricesResult, Currency, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryRequestPricesResult, 0x0018);
		}

		// struct FSteamID
		TEST_METHOD(ScriptStruct__SteamCore__SteamID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamID, UnknownData_2UKY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamID, 0x0008);
		}

		// struct FSteamInventoryEligiblePromoItemDefIDs
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryEligiblePromoItemDefIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryEligiblePromoItemDefIDs, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryEligiblePromoItemDefIDs, UnknownData_FLWU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryEligiblePromoItemDefIDs, SteamID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryEligiblePromoItemDefIDs, NumEligiblePromoItemDefs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryEligiblePromoItemDefIDs, bCachedData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryEligiblePromoItemDefIDs, UnknownData_6D5S, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryEligiblePromoItemDefIDs, 0x0018);
		}

		// struct FSteamAppInstalled
		TEST_METHOD(ScriptStruct__SteamCore__SteamAppInstalled)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamAppInstalled, AppID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamAppInstalled, 0x0004);
		}

		// struct FSteamAppUninstalled
		TEST_METHOD(ScriptStruct__SteamCore__SteamAppUninstalled)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamAppUninstalled, AppID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamAppUninstalled, 0x0004);
		}

		// struct FFileDetailsResult
		TEST_METHOD(ScriptStruct__SteamCore__FileDetailsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileDetailsResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileDetailsResult, UnknownData_OEXO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileDetailsResult, FileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileDetailsResult, SHA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileDetailsResult, Flags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileDetailsResult, 0x0028);
		}

		// struct FDLCInstalled
		TEST_METHOD(ScriptStruct__SteamCore__DLCInstalled)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDLCInstalled, AppID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDLCInstalled, 0x0004);
		}

		// struct FGameOverlayActivated
		TEST_METHOD(ScriptStruct__SteamCore__GameOverlayActivated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameOverlayActivated, bActive, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameOverlayActivated, 0x0001);
		}

		// struct FAvatarImageLoaded
		TEST_METHOD(ScriptStruct__SteamCore__AvatarImageLoaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarImageLoaded, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarImageLoaded, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAvatarImageLoaded, UnknownData_4Y9E, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAvatarImageLoaded, 0x0020);
		}

		// struct FGameServerChangeRequested
		TEST_METHOD(ScriptStruct__SteamCore__GameServerChangeRequested)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerChangeRequested, Server, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerChangeRequested, Password, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameServerChangeRequested, 0x0020);
		}

		// struct FGameConnectedFriendChatMsg
		TEST_METHOD(ScriptStruct__SteamCore__GameConnectedFriendChatMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedFriendChatMsg, SteamIDUser, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedFriendChatMsg, MessageID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedFriendChatMsg, UnknownData_YG2U, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameConnectedFriendChatMsg, 0x0010);
		}

		// struct FGameLobbyJoinRequested
		TEST_METHOD(ScriptStruct__SteamCore__GameLobbyJoinRequested)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLobbyJoinRequested, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameLobbyJoinRequested, SteamIDFriend, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameLobbyJoinRequested, 0x0010);
		}

		// struct FGameRichPresenceJoinRequested
		TEST_METHOD(ScriptStruct__SteamCore__GameRichPresenceJoinRequested)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameRichPresenceJoinRequested, SteamIDFriend, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameRichPresenceJoinRequested, Connect, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameRichPresenceJoinRequested, 0x0018);
		}

		// struct FPersonaStateChange
		TEST_METHOD(ScriptStruct__SteamCore__PersonaStateChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersonaStateChange, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPersonaStateChange, Flags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPersonaStateChange, 0x0018);
		}

		// struct FClanOfficerListResponse
		TEST_METHOD(ScriptStruct__SteamCore__ClanOfficerListResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClanOfficerListResponse, SteamIDClan, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClanOfficerListResponse, Officers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClanOfficerListResponse, bSuccess, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClanOfficerListResponse, UnknownData_U7BB, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClanOfficerListResponse, 0x0010);
		}

		// struct FFriendRichPresenceUpdate
		TEST_METHOD(ScriptStruct__SteamCore__FriendRichPresenceUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresenceUpdate, SteamIDFriend, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresenceUpdate, AppID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendRichPresenceUpdate, UnknownData_MPNO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendRichPresenceUpdate, 0x0010);
		}

		// struct FGameConnectedClanChatMsg
		TEST_METHOD(ScriptStruct__SteamCore__GameConnectedClanChatMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedClanChatMsg, SteamIDUser, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedClanChatMsg, SteamIDClanChat, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedClanChatMsg, MessageID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedClanChatMsg, UnknownData_XDG1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameConnectedClanChatMsg, 0x0018);
		}

		// struct FGameConnectedChatJoin
		TEST_METHOD(ScriptStruct__SteamCore__GameConnectedChatJoin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatJoin, SteamIDClanChat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatJoin, SteamIDUser, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameConnectedChatJoin, 0x0010);
		}

		// struct FGameConnectedChatLeave
		TEST_METHOD(ScriptStruct__SteamCore__GameConnectedChatLeave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatLeave, SteamIDClanChat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatLeave, SteamIDUser, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatLeave, bKicked, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatLeave, bDropped, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConnectedChatLeave, UnknownData_X8N6, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameConnectedChatLeave, 0x0018);
		}

		// struct FDownloadClanActivityCountsResult
		TEST_METHOD(ScriptStruct__SteamCore__DownloadClanActivityCountsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDownloadClanActivityCountsResult, bSuccess, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDownloadClanActivityCountsResult, 0x0001);
		}

		// struct FJoinClanChatRoomCompletionResult
		TEST_METHOD(ScriptStruct__SteamCore__JoinClanChatRoomCompletionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinClanChatRoomCompletionResult, SteamIDClanChat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinClanChatRoomCompletionResult, ChatRoomEnterResponse, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinClanChatRoomCompletionResult, UnknownData_ZZDV, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinClanChatRoomCompletionResult, 0x0010);
		}

		// struct FSetPersonaNameResponse
		TEST_METHOD(ScriptStruct__SteamCore__SetPersonaNameResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetPersonaNameResponse, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetPersonaNameResponse, bSuccess, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetPersonaNameResponse, bLocalSuccess, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSetPersonaNameResponse, 0x0003);
		}

		// struct FFriendsGetFollowerCount
		TEST_METHOD(ScriptStruct__SteamCore__FriendsGetFollowerCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsGetFollowerCount, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsGetFollowerCount, UnknownData_5M44, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsGetFollowerCount, SteamID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsGetFollowerCount, Count, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsGetFollowerCount, UnknownData_4JA5, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendsGetFollowerCount, 0x0018);
		}

		// struct FFriendsIsFollowing
		TEST_METHOD(ScriptStruct__SteamCore__FriendsIsFollowing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsIsFollowing, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsIsFollowing, UnknownData_G8ES, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsIsFollowing, SteamID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsIsFollowing, bIsFollowing, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsIsFollowing, UnknownData_TNN2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendsIsFollowing, 0x0018);
		}

		// struct FFriendsEnumerateFollowingList
		TEST_METHOD(ScriptStruct__SteamCore__FriendsEnumerateFollowingList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsEnumerateFollowingList, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsEnumerateFollowingList, UnknownData_8M39, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsEnumerateFollowingList, SteamIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsEnumerateFollowingList, Results, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendsEnumerateFollowingList, TotalResult, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendsEnumerateFollowingList, 0x0020);
		}

		// struct FSearchForGameProgressCallback
		TEST_METHOD(ScriptStruct__SteamCore__SearchForGameProgressCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, SearchID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, UnknownData_0I01, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, LobbyID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, SteamIDEndedSearch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, SecondsRemainingEstimate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameProgressCallback, PlayersSearching, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchForGameProgressCallback, 0x0030);
		}

		// struct FSearchForGameResultCallback
		TEST_METHOD(ScriptStruct__SteamCore__SearchForGameResultCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, SearchID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, UnknownData_SIR0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, CountPlayersInGame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, CountAcceptedGame, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, UnknownData_354Y, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, SteamIDHost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, bFinalCallback, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchForGameResultCallback, UnknownData_DHGD, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchForGameResultCallback, 0x0030);
		}

		// struct FRequestPlayersForGameProgressCallback
		TEST_METHOD(ScriptStruct__SteamCore__RequestPlayersForGameProgressCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameProgressCallback, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameProgressCallback, UnknownData_PSHZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameProgressCallback, SearchID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestPlayersForGameProgressCallback, 0x0018);
		}

		// struct FRequestPlayersForGameResultCallback
		TEST_METHOD(ScriptStruct__SteamCore__RequestPlayersForGameResultCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, UnknownData_8XHJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, SearchID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, SteamIDPlayerFound, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, SteamIDLobby, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, PlayerAcceptState, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, UnknownData_UU8N, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, PlayerIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, TotalPlayersFound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, TotalPlayersAcceptedGame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, SuggestedTeamIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, UnknownData_5E4W, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameResultCallback, UniqueGameID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestPlayersForGameResultCallback, 0x0050);
		}

		// struct FRequestPlayersForGameFinalResultCallback
		TEST_METHOD(ScriptStruct__SteamCore__RequestPlayersForGameFinalResultCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameFinalResultCallback, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameFinalResultCallback, UnknownData_WCMW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameFinalResultCallback, SearchID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestPlayersForGameFinalResultCallback, UniqueGameID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestPlayersForGameFinalResultCallback, 0x0028);
		}

		// struct FSubmitPlayerResultResultCallback
		TEST_METHOD(ScriptStruct__SteamCore__SubmitPlayerResultResultCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitPlayerResultResultCallback, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitPlayerResultResultCallback, UnknownData_DQ6S, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitPlayerResultResultCallback, UniqueGameID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitPlayerResultResultCallback, SteamIDPlayer, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmitPlayerResultResultCallback, 0x0020);
		}

		// struct FEndGameResultCallback
		TEST_METHOD(ScriptStruct__SteamCore__EndGameResultCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndGameResultCallback, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndGameResultCallback, UnknownData_G0UI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndGameResultCallback, UniqueGameID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndGameResultCallback, 0x0018);
		}

		// struct FAssociateWithClanResult
		TEST_METHOD(ScriptStruct__SteamCore__AssociateWithClanResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssociateWithClanResult, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssociateWithClanResult, 0x0001);
		}

		// struct FComputeNewPlayerCompatibilityResult
		TEST_METHOD(ScriptStruct__SteamCore__ComputeNewPlayerCompatibilityResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComputeNewPlayerCompatibilityResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComputeNewPlayerCompatibilityResult, UnknownData_FEVA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComputeNewPlayerCompatibilityResult, PlayersThatDontLikeCandidate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComputeNewPlayerCompatibilityResult, PlayersThatCandidateDoesntLike, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComputeNewPlayerCompatibilityResult, ClanPlayersThatDontLikeCandidate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComputeNewPlayerCompatibilityResult, SteamIDCandidate, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComputeNewPlayerCompatibilityResult, 0x0018);
		}

		// struct FGSPolicyResponse
		TEST_METHOD(ScriptStruct__SteamCore__GSPolicyResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSPolicyResponse, BSecure, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSPolicyResponse, 0x0001);
		}

		// struct FGSClientGroupStatus
		TEST_METHOD(ScriptStruct__SteamCore__GSClientGroupStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientGroupStatus, SteamIDUser, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientGroupStatus, SteamIDGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientGroupStatus, bMember, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientGroupStatus, bOfficer, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientGroupStatus, UnknownData_4TLE, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSClientGroupStatus, 0x0018);
		}

		// struct FValidateAuthTicketResponse
		TEST_METHOD(ScriptStruct__SteamCore__ValidateAuthTicketResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FValidateAuthTicketResponse, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FValidateAuthTicketResponse, AuthSessionResponse, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FValidateAuthTicketResponse, UnknownData_R7VS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FValidateAuthTicketResponse, OwnerSteamID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FValidateAuthTicketResponse, 0x0018);
		}

		// struct FGSClientApprove
		TEST_METHOD(ScriptStruct__SteamCore__GSClientApprove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientApprove, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientApprove, OwnerSteamID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSClientApprove, 0x0010);
		}

		// struct FGSClientDeny
		TEST_METHOD(ScriptStruct__SteamCore__GSClientDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientDeny, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientDeny, DenyReason, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientDeny, UnknownData_KRWU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSClientDeny, OptionalText, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSClientDeny, 0x0020);
		}

		// struct FGSStatsReceived
		TEST_METHOD(ScriptStruct__SteamCore__GSStatsReceived)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsReceived, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsReceived, UnknownData_E1MW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsReceived, SteamIDUser, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSStatsReceived, 0x0010);
		}

		// struct FGSStatsStored
		TEST_METHOD(ScriptStruct__SteamCore__GSStatsStored)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsStored, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsStored, UnknownData_XPNQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsStored, SteamIDUser, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSStatsStored, 0x0010);
		}

		// struct FGSStatsUnloaded
		TEST_METHOD(ScriptStruct__SteamCore__GSStatsUnloaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGSStatsUnloaded, SteamIDUser, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGSStatsUnloaded, 0x0008);
		}

		// struct FFavoritesListAccountsUpdated
		TEST_METHOD(ScriptStruct__SteamCore__FavoritesListAccountsUpdated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListAccountsUpdated, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFavoritesListAccountsUpdated, 0x0001);
		}

		// struct FFavoritesListChanged
		TEST_METHOD(ScriptStruct__SteamCore__FavoritesListChanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, IP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, QueryPort, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, ConnectionPort, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, AppID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, UnknownData_VZ6W, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, Flags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, bAdd, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, UnknownData_PP0D, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFavoritesListChanged, SteamID, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFavoritesListChanged, 0x0040);
		}

		// struct FLobbyChatMsg
		TEST_METHOD(ScriptStruct__SteamCore__LobbyChatMsg)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatMsg, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatMsg, SteamIDUser, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatMsg, ChatEntryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatMsg, UnknownData_LH2F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatMsg, ChatID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyChatMsg, 0x0018);
		}

		// struct FLobbyChatUpdate
		TEST_METHOD(ScriptStruct__SteamCore__LobbyChatUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatUpdate, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatUpdate, SteamIDUserChanged, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatUpdate, SteamIDMakingChange, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyChatUpdate, ChatMemberStateChange, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyChatUpdate, 0x0028);
		}

		// struct FLobbyDataUpdate
		TEST_METHOD(ScriptStruct__SteamCore__LobbyDataUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDataUpdate, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDataUpdate, SteamIDMember, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDataUpdate, bSuccess, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyDataUpdate, UnknownData_O2AL, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyDataUpdate, 0x0018);
		}

		// struct FLobbyEnterData
		TEST_METHOD(ScriptStruct__SteamCore__LobbyEnterData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyEnterData, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyEnterData, bLocked, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyEnterData, ChatRoomEnterResponse, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyEnterData, UnknownData_92WA, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyEnterData, 0x0010);
		}

		// struct FLobbyGameCreated
		TEST_METHOD(ScriptStruct__SteamCore__LobbyGameCreated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyGameCreated, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyGameCreated, SteamIDGameServer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyGameCreated, IP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyGameCreated, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyGameCreated, UnknownData_4Z9W, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyGameCreated, 0x0028);
		}

		// struct FSteamGameID
		TEST_METHOD(ScriptStruct__SteamCore__SteamGameID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamGameID, UnknownData_YYM8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamGameID, 0x0008);
		}

		// struct FLobbyInviteData
		TEST_METHOD(ScriptStruct__SteamCore__LobbyInviteData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyInviteData, SteamIDUser, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyInviteData, SteamIDLobby, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyInviteData, GameID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyInviteData, 0x0018);
		}

		// struct FLobbyKickedData
		TEST_METHOD(ScriptStruct__SteamCore__LobbyKickedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyKickedData, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyKickedData, SteamIDAdmin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyKickedData, bKickedDueToDisconnect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyKickedData, UnknownData_X63Q, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyKickedData, 0x0018);
		}

		// struct FLobbyMatchList
		TEST_METHOD(ScriptStruct__SteamCore__LobbyMatchList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyMatchList, LobbiesMatching, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyMatchList, 0x0004);
		}

		// struct FCreateLobbyData
		TEST_METHOD(ScriptStruct__SteamCore__CreateLobbyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateLobbyData, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateLobbyData, UnknownData_JIG1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateLobbyData, SteamIDLobby, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateLobbyData, 0x0010);
		}

		// struct FJoinLobbyData
		TEST_METHOD(ScriptStruct__SteamCore__JoinLobbyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinLobbyData, SteamIDLobby, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinLobbyData, bLocked, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinLobbyData, ChatRoomEnterResponse, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinLobbyData, UnknownData_4904, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinLobbyData, 0x0010);
		}

		// struct FSteamSessionSetting
		TEST_METHOD(ScriptStruct__SteamCore__SteamSessionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamSessionSetting, UnknownData_9YVU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamSessionSetting, 0x0028);
		}

		// struct FPublishedFileID
		TEST_METHOD(ScriptStruct__SteamCore__PublishedFileID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPublishedFileID, UnknownData_WXLA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPublishedFileID, 0x0008);
		}

		// struct FUGCDeleteItemResult
		TEST_METHOD(ScriptStruct__SteamCore__UGCDeleteItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGCDeleteItemResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGCDeleteItemResult, UnknownData_XIF5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGCDeleteItemResult, PublishedFileID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUGCDeleteItemResult, 0x0010);
		}

		// struct FGetAppDependenciesResult
		TEST_METHOD(ScriptStruct__SteamCore__GetAppDependenciesResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAppDependenciesResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAppDependenciesResult, UnknownData_029R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAppDependenciesResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAppDependenciesResult, AppIDs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAppDependenciesResult, NumAppDependencies, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAppDependenciesResult, TotalNumAppDependencies, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetAppDependenciesResult, 0x0028);
		}

		// struct FSteamSessionResult
		TEST_METHOD(ScriptStruct__SteamCore__SteamSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamSessionResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamSessionResult, SessionSettings, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamSessionResult, 0x0118);
		}

		// struct FSteamServerAddr
		TEST_METHOD(ScriptStruct__SteamCore__SteamServerAddr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerAddr, IP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerAddr, Port, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerAddr, QueryPort, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerAddr, ConnectionAddressString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerAddr, SteamP2PAddr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamServerAddr, 0x0038);
		}

		// struct FGameServerItem
		TEST_METHOD(ScriptStruct__SteamCore__GameServerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, ServerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, MapName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, GameDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, GameTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, SteamServerAddr, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, Ping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, Players, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, MaxPlayers, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, BotPlayers, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, ServerVersion, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, bPassword, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, BSecure, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerItem, UnknownData_FVAY, 0x008E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameServerItem, 0x00B0);
		}

		// struct FGameServerRule
		TEST_METHOD(ScriptStruct__SteamCore__GameServerRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerRule, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameServerRule, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameServerRule, 0x0020);
		}

		// struct FPlaybackStatusHasChanged
		TEST_METHOD(ScriptStruct__SteamCore__PlaybackStatusHasChanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlaybackStatusHasChanged, UnknownData_H70J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlaybackStatusHasChanged, 0x0001);
		}

		// struct FVolumeHasChanged
		TEST_METHOD(ScriptStruct__SteamCore__VolumeHasChanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeHasChanged, Volume, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeHasChanged, 0x0004);
		}

		// struct FP2PSessionRequest
		TEST_METHOD(ScriptStruct__SteamCore__P2PSessionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FP2PSessionRequest, SteamIDRemote, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FP2PSessionRequest, 0x0008);
		}

		// struct FP2PSessionConnectFail
		TEST_METHOD(ScriptStruct__SteamCore__P2PSessionConnectFail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FP2PSessionConnectFail, SteamIDRemote, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FP2PSessionConnectFail, P2PSessionError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FP2PSessionConnectFail, UnknownData_S6I0, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FP2PSessionConnectFail, 0x0010);
		}

		// struct FPartyBeaconID
		TEST_METHOD(ScriptStruct__SteamCore__PartyBeaconID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyBeaconID, UnknownData_8AFN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyBeaconID, 0x0008);
		}

		// struct FJoinPartyData
		TEST_METHOD(ScriptStruct__SteamCore__JoinPartyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinPartyData, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinPartyData, UnknownData_5DV1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinPartyData, BeaconID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinPartyData, SteamIDBeaconOwner, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinPartyData, ConnectString, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinPartyData, 0x0028);
		}

		// struct FCreateBeaconData
		TEST_METHOD(ScriptStruct__SteamCore__CreateBeaconData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBeaconData, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBeaconData, UnknownData_ZAWP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateBeaconData, BeaconID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateBeaconData, 0x0010);
		}

		// struct FReservationNotificationData
		TEST_METHOD(ScriptStruct__SteamCore__ReservationNotificationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReservationNotificationData, BeaconID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReservationNotificationData, SteamIDJoiner, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReservationNotificationData, 0x0010);
		}

		// struct FChangeNumOpenSlotsData
		TEST_METHOD(ScriptStruct__SteamCore__ChangeNumOpenSlotsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeNumOpenSlotsData, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeNumOpenSlotsData, 0x0001);
		}

		// struct FSteamRemotePlaySessionConnected
		TEST_METHOD(ScriptStruct__SteamCore__SteamRemotePlaySessionConnected)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamRemotePlaySessionConnected, SessionID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamRemotePlaySessionConnected, 0x0004);
		}

		// struct FSteamRemotePlaySessionDisconnected
		TEST_METHOD(ScriptStruct__SteamCore__SteamRemotePlaySessionDisconnected)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamRemotePlaySessionDisconnected, SessionID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamRemotePlaySessionDisconnected, 0x0004);
		}

		// struct FRemoteStorageUnsubscribePublishedFileResult
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStorageUnsubscribePublishedFileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageUnsubscribePublishedFileResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageUnsubscribePublishedFileResult, UnknownData_W1VD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageUnsubscribePublishedFileResult, PublishedFileID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStorageUnsubscribePublishedFileResult, 0x0010);
		}

		// struct FRemoteStorageSubscribePublishedFileResult
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStorageSubscribePublishedFileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageSubscribePublishedFileResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageSubscribePublishedFileResult, UnknownData_O0LP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageSubscribePublishedFileResult, PublishedFileID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStorageSubscribePublishedFileResult, 0x0010);
		}

		// struct FRemoteStoragePublishedFileUnsubscribed
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStoragePublishedFileUnsubscribed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStoragePublishedFileUnsubscribed, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStoragePublishedFileUnsubscribed, AppID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStoragePublishedFileUnsubscribed, UnknownData_KKPM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStoragePublishedFileUnsubscribed, 0x0010);
		}

		// struct FRemoteStoragePublishedFileSubscribed
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStoragePublishedFileSubscribed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStoragePublishedFileSubscribed, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStoragePublishedFileSubscribed, AppID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStoragePublishedFileSubscribed, UnknownData_HFO5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStoragePublishedFileSubscribed, 0x0010);
		}

		// struct FRemoteStorageFileWriteAsyncComplete
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStorageFileWriteAsyncComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileWriteAsyncComplete, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStorageFileWriteAsyncComplete, 0x0001);
		}

		// struct FRemoteStorageFileReadAsyncComplete
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStorageFileReadAsyncComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileReadAsyncComplete, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileReadAsyncComplete, UnknownData_CHTC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileReadAsyncComplete, Offset, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileReadAsyncComplete, Read, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileReadAsyncComplete, UnknownData_BLMU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStorageFileReadAsyncComplete, 0x0018);
		}

		// struct FSteamUGCHandle
		TEST_METHOD(ScriptStruct__SteamCore__SteamUGCHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCHandle, UnknownData_M257, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamUGCHandle, 0x0008);
		}

		// struct FRemoteStorageFileShareResult
		TEST_METHOD(ScriptStruct__SteamCore__RemoteStorageFileShareResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileShareResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileShareResult, UnknownData_BGZX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileShareResult, File, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoteStorageFileShareResult, Filename, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoteStorageFileShareResult, 0x0020);
		}

		// struct FScreenshotHandle
		TEST_METHOD(ScriptStruct__SteamCore__ScreenshotHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotHandle, UnknownData_5ZC8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenshotHandle, 0x0004);
		}

		// struct FScreenshotReady
		TEST_METHOD(ScriptStruct__SteamCore__ScreenshotReady)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotReady, Handle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotReady, Result, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotReady, UnknownData_YEY0, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenshotReady, 0x0008);
		}

		// struct FScreenshotRequested
		TEST_METHOD(ScriptStruct__SteamCore__ScreenshotRequested)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotRequested, UnknownData_MWM4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenshotRequested, 0x0001);
		}

		// struct FUserFavoriteItemsListChanged
		TEST_METHOD(ScriptStruct__SteamCore__UserFavoriteItemsListChanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFavoriteItemsListChanged, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFavoriteItemsListChanged, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFavoriteItemsListChanged, bWasAddRequest, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserFavoriteItemsListChanged, UnknownData_VGHR, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserFavoriteItemsListChanged, 0x0010);
		}

		// struct FCreateItemResult
		TEST_METHOD(ScriptStruct__SteamCore__CreateItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateItemResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateItemResult, UnknownData_MSDV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateItemResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateItemResult, bUserNeedsToAcceptWorkshopLegalAgreement, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateItemResult, UnknownData_5ONE, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateItemResult, 0x0018);
		}

		// struct FSetUserItemVoteResult
		TEST_METHOD(ScriptStruct__SteamCore__SetUserItemVoteResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetUserItemVoteResult, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetUserItemVoteResult, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetUserItemVoteResult, bVoteUp, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetUserItemVoteResult, UnknownData_CQG7, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSetUserItemVoteResult, 0x0010);
		}

		// struct FGetUserItemVoteResult
		TEST_METHOD(ScriptStruct__SteamCore__GetUserItemVoteResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetUserItemVoteResult, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetUserItemVoteResult, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetUserItemVoteResult, bVotedUp, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetUserItemVoteResult, bVotedDown, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetUserItemVoteResult, bVoteSkipped, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetUserItemVoteResult, UnknownData_ZKI0, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetUserItemVoteResult, 0x0010);
		}

		// struct FUGCQueryHandle
		TEST_METHOD(ScriptStruct__SteamCore__UGCQueryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGCQueryHandle, UnknownData_QB0E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUGCQueryHandle, 0x0008);
		}

		// struct FSteamUGCQueryCompleted
		TEST_METHOD(ScriptStruct__SteamCore__SteamUGCQueryCompleted)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, Handle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, UnknownData_9ZBZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, NumResultsReturned, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, TotalMatchingResults, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, bCachedData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCQueryCompleted, UnknownData_SVVG, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamUGCQueryCompleted, 0x0018);
		}

		// struct FAddAppDependencyResult
		TEST_METHOD(ScriptStruct__SteamCore__AddAppDependencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddAppDependencyResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddAppDependencyResult, UnknownData_BD5B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddAppDependencyResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddAppDependencyResult, AppID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddAppDependencyResult, UnknownData_YSRT, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAddAppDependencyResult, 0x0018);
		}

		// struct FRemoveAppDependencyResult
		TEST_METHOD(ScriptStruct__SteamCore__RemoveAppDependencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveAppDependencyResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveAppDependencyResult, UnknownData_F410, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveAppDependencyResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveAppDependencyResult, AppID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveAppDependencyResult, UnknownData_0JR2, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoveAppDependencyResult, 0x0018);
		}

		// struct FAddUGCDependencyResult
		TEST_METHOD(ScriptStruct__SteamCore__AddUGCDependencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddUGCDependencyResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddUGCDependencyResult, UnknownData_TH2C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddUGCDependencyResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAddUGCDependencyResult, ChildPublishedFileId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAddUGCDependencyResult, 0x0018);
		}

		// struct FRemoveUGCDependencyResult
		TEST_METHOD(ScriptStruct__SteamCore__RemoveUGCDependencyResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveUGCDependencyResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveUGCDependencyResult, UnknownData_KNF3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveUGCDependencyResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRemoveUGCDependencyResult, ChildPublishedFileId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRemoveUGCDependencyResult, 0x0018);
		}

		// struct FSubmitItemUpdateResult
		TEST_METHOD(ScriptStruct__SteamCore__SubmitItemUpdateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitItemUpdateResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitItemUpdateResult, bUserNeedsToAcceptWorkshopLegalAgreement, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitItemUpdateResult, UnknownData_8VKG, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmitItemUpdateResult, PublishedFileID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmitItemUpdateResult, 0x0010);
		}

		// struct FStartPlaytimeTrackingResult
		TEST_METHOD(ScriptStruct__SteamCore__StartPlaytimeTrackingResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPlaytimeTrackingResult, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPlaytimeTrackingResult, 0x0001);
		}

		// struct FStopPlaytimeTrackingResult
		TEST_METHOD(ScriptStruct__SteamCore__StopPlaytimeTrackingResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStopPlaytimeTrackingResult, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStopPlaytimeTrackingResult, 0x0001);
		}

		// struct FDownloadItemResult
		TEST_METHOD(ScriptStruct__SteamCore__DownloadItemResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDownloadItemResult, AppID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDownloadItemResult, UnknownData_3T6Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDownloadItemResult, PublishedFileID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDownloadItemResult, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDownloadItemResult, UnknownData_7BOP, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDownloadItemResult, 0x0018);
		}

		// struct FItemInstalled
		TEST_METHOD(ScriptStruct__SteamCore__ItemInstalled)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemInstalled, AppID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemInstalled, UnknownData_5K5Z, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemInstalled, PublishedFileID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemInstalled, 0x0010);
		}

		// struct FClientGameServerDeny
		TEST_METHOD(ScriptStruct__SteamCore__ClientGameServerDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, AppID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, UnknownData_OC47, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, GameServerIP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, GameServerPort, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, BSecure, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, Reason, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientGameServerDeny, UnknownData_7VJV, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientGameServerDeny, 0x0020);
		}

		// struct FGameWebCallback
		TEST_METHOD(ScriptStruct__SteamCore__GameWebCallback)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameWebCallback, URL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameWebCallback, 0x0010);
		}

		// struct FSteamTicketHandle
		TEST_METHOD(ScriptStruct__SteamCore__SteamTicketHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamTicketHandle, UnknownData_2TTW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamTicketHandle, 0x0004);
		}

		// struct FGetAuthSessionTicketResponse
		TEST_METHOD(ScriptStruct__SteamCore__GetAuthSessionTicketResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAuthSessionTicketResponse, AuthTicket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAuthSessionTicketResponse, Result, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetAuthSessionTicketResponse, UnknownData_WYYK, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetAuthSessionTicketResponse, 0x0008);
		}

		// struct FIPCFailure
		TEST_METHOD(ScriptStruct__SteamCore__IPCFailure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIPCFailure, FailureType, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIPCFailure, 0x0001);
		}

		// struct FLicensesUpdated
		TEST_METHOD(ScriptStruct__SteamCore__LicensesUpdated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLicensesUpdated, UnknownData_H44G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLicensesUpdated, 0x0001);
		}

		// struct FMicroTxnAuthorizationResponse
		TEST_METHOD(ScriptStruct__SteamCore__MicroTxnAuthorizationResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMicroTxnAuthorizationResponse, AppID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMicroTxnAuthorizationResponse, UnknownData_5H09, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMicroTxnAuthorizationResponse, OrderId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMicroTxnAuthorizationResponse, bAuthorized, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMicroTxnAuthorizationResponse, UnknownData_FYLF, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMicroTxnAuthorizationResponse, 0x0020);
		}

		// struct FSteamServersConnected
		TEST_METHOD(ScriptStruct__SteamCore__SteamServersConnected)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServersConnected, UnknownData_PHNH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamServersConnected, 0x0001);
		}

		// struct FSteamServerConnectFailure
		TEST_METHOD(ScriptStruct__SteamCore__SteamServerConnectFailure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerConnectFailure, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServerConnectFailure, bStillRetrying, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamServerConnectFailure, 0x0002);
		}

		// struct FSteamServersDisconnected
		TEST_METHOD(ScriptStruct__SteamCore__SteamServersDisconnected)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamServersDisconnected, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamServersDisconnected, 0x0001);
		}

		// struct FEncryptedAppTicketResponse
		TEST_METHOD(ScriptStruct__SteamCore__EncryptedAppTicketResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEncryptedAppTicketResponse, Result, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEncryptedAppTicketResponse, 0x0001);
		}

		// struct FStoreAuthURLResponse
		TEST_METHOD(ScriptStruct__SteamCore__StoreAuthURLResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreAuthURLResponse, URL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreAuthURLResponse, 0x0010);
		}

		// struct FUserAchievementIconFetched
		TEST_METHOD(ScriptStruct__SteamCore__UserAchievementIconFetched)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementIconFetched, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementIconFetched, AchievementName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementIconFetched, bAchieved, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementIconFetched, UnknownData_3URF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementIconFetched, Icon, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementIconFetched, UnknownData_ESCO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserAchievementIconFetched, 0x0030);
		}

		// struct FUserAchievementStored
		TEST_METHOD(ScriptStruct__SteamCore__UserAchievementStored)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementStored, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementStored, bGroupAchievement, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementStored, UnknownData_LQA3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementStored, AchievementName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementStored, CurrentProgress, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserAchievementStored, MaxProgress, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserAchievementStored, 0x0028);
		}

		// struct FUserStatsReceived
		TEST_METHOD(ScriptStruct__SteamCore__UserStatsReceived)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsReceived, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsReceived, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsReceived, UnknownData_LDOP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsReceived, SteamID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserStatsReceived, 0x0018);
		}

		// struct FUserStatsStored
		TEST_METHOD(ScriptStruct__SteamCore__UserStatsStored)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsStored, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsStored, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsStored, UnknownData_J7HT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserStatsStored, 0x0010);
		}

		// struct FUserStatsUnloaded
		TEST_METHOD(ScriptStruct__SteamCore__UserStatsUnloaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserStatsUnloaded, SteamIDUser, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserStatsUnloaded, 0x0008);
		}

		// struct FSteamLeaderboard
		TEST_METHOD(ScriptStruct__SteamCore__SteamLeaderboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboard, UnknownData_PTNU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamLeaderboard, 0x0008);
		}

		// struct FSteamLeaderboardEntries
		TEST_METHOD(ScriptStruct__SteamCore__SteamLeaderboardEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntries, UnknownData_CEVR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamLeaderboardEntries, 0x0008);
		}

		// struct FLeaderboardScoresDownloaded
		TEST_METHOD(ScriptStruct__SteamCore__LeaderboardScoresDownloaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloaded, SteamLeaderboard, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloaded, SteamLeaderboardEntries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloaded, EntryCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloaded, UnknownData_RLQH, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardScoresDownloaded, 0x0018);
		}

		// struct FLeaderboardScoresDownloadedForUsers
		TEST_METHOD(ScriptStruct__SteamCore__LeaderboardScoresDownloadedForUsers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloadedForUsers, SteamLeaderboard, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloadedForUsers, SteamLeaderboardEntries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloadedForUsers, EntryCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoresDownloadedForUsers, UnknownData_UKU7, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardScoresDownloadedForUsers, 0x0018);
		}

		// struct FRequestUserStatsData
		TEST_METHOD(ScriptStruct__SteamCore__RequestUserStatsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUserStatsData, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUserStatsData, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUserStatsData, UnknownData_SL34, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRequestUserStatsData, SteamIDUser, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRequestUserStatsData, 0x0018);
		}

		// struct FLeaderboardScoreUploaded
		TEST_METHOD(ScriptStruct__SteamCore__LeaderboardScoreUploaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, bSuccess, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, UnknownData_6V7A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, SteamLeaderboard, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, Score, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, bScoreChanged, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, UnknownData_93JB, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, GlobalRankNew, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardScoreUploaded, GlobalRankPrevious, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardScoreUploaded, 0x0020);
		}

		// struct FAttachLeaderboardUGCData
		TEST_METHOD(ScriptStruct__SteamCore__AttachLeaderboardUGCData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachLeaderboardUGCData, SteamLeaderboard, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachLeaderboardUGCData, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachLeaderboardUGCData, UnknownData_E1KD, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachLeaderboardUGCData, 0x0010);
		}

		// struct FLeaderboardFindResult
		TEST_METHOD(ScriptStruct__SteamCore__LeaderboardFindResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardFindResult, SteamLeaderboard, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardFindResult, bLeaderboardFound, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLeaderboardFindResult, UnknownData_YHAJ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLeaderboardFindResult, 0x0010);
		}

		// struct FFindOrCreateLeaderboardData
		TEST_METHOD(ScriptStruct__SteamCore__FindOrCreateLeaderboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindOrCreateLeaderboardData, SteamLeaderboard, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindOrCreateLeaderboardData, bLeaderboardFound, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindOrCreateLeaderboardData, UnknownData_JE8F, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindOrCreateLeaderboardData, 0x0010);
		}

		// struct FNumberOfCurrentPlayers
		TEST_METHOD(ScriptStruct__SteamCore__NumberOfCurrentPlayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNumberOfCurrentPlayers, bSuccess, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNumberOfCurrentPlayers, UnknownData_RWLN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNumberOfCurrentPlayers, Players, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNumberOfCurrentPlayers, 0x0008);
		}

		// struct FGlobalAchievementPercentagesReady
		TEST_METHOD(ScriptStruct__SteamCore__GlobalAchievementPercentagesReady)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAchievementPercentagesReady, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAchievementPercentagesReady, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalAchievementPercentagesReady, UnknownData_N2TX, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGlobalAchievementPercentagesReady, 0x0010);
		}

		// struct FGlobalStatsReceived
		TEST_METHOD(ScriptStruct__SteamCore__GlobalStatsReceived)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalStatsReceived, GameID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalStatsReceived, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGlobalStatsReceived, UnknownData_P5F1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGlobalStatsReceived, 0x0010);
		}

		// struct FCheckFileSignature
		TEST_METHOD(ScriptStruct__SteamCore__CheckFileSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckFileSignature, CheckFileSignature, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckFileSignature, 0x0001);
		}

		// struct FGamepadTextInputDismissed
		TEST_METHOD(ScriptStruct__SteamCore__GamepadTextInputDismissed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamepadTextInputDismissed, bSubmitted, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamepadTextInputDismissed, UnknownData_6302, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamepadTextInputDismissed, SubmittedText, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGamepadTextInputDismissed, 0x0008);
		}

		// struct FIPCountry
		TEST_METHOD(ScriptStruct__SteamCore__IPCountry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIPCountry, UnknownData_W1SN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIPCountry, 0x0001);
		}

		// struct FLowBatteryPower
		TEST_METHOD(ScriptStruct__SteamCore__LowBatteryPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLowBatteryPower, MinutesBatteryLeft, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLowBatteryPower, 0x0004);
		}

		// struct FSteamShutdown
		TEST_METHOD(ScriptStruct__SteamCore__SteamShutdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamShutdown, UnknownData_R56I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamShutdown, 0x0001);
		}

		// struct FGetOPFSettingsResult
		TEST_METHOD(ScriptStruct__SteamCore__GetOPFSettingsResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetOPFSettingsResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetOPFSettingsResult, UnknownData_Z3PM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetOPFSettingsResult, AppID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetOPFSettingsResult, 0x0008);
		}

		// struct FGetVideoURLResult
		TEST_METHOD(ScriptStruct__SteamCore__GetVideoURLResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetVideoURLResult, Result, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetVideoURLResult, UnknownData_CJ0P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetVideoURLResult, AppID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGetVideoURLResult, URL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGetVideoURLResult, 0x0018);
		}

		// struct FSteamFriendsGroupID
		TEST_METHOD(ScriptStruct__SteamCore__SteamFriendsGroupID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamFriendsGroupID, UnknownData_O36X, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamFriendsGroupID, 0x0002);
		}

		// struct FInputAnalogActionHandle
		TEST_METHOD(ScriptStruct__SteamCore__InputAnalogActionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionHandle, UnknownData_0BQJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAnalogActionHandle, 0x0008);
		}

		// struct FInputDigitalActionHandle
		TEST_METHOD(ScriptStruct__SteamCore__InputDigitalActionHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputDigitalActionHandle, UnknownData_O3T6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputDigitalActionHandle, 0x0008);
		}

		// struct FInputActionSetHandle
		TEST_METHOD(ScriptStruct__SteamCore__InputActionSetHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSetHandle, UnknownData_M5KQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSetHandle, 0x0008);
		}

		// struct FInputHandle
		TEST_METHOD(ScriptStruct__SteamCore__InputHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputHandle, UnknownData_V9QK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputHandle, 0x0008);
		}

		// struct FInputMotionData
		TEST_METHOD(ScriptStruct__SteamCore__InputMotionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotQuatX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotQuatY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotQuatZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotQuatW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, PosAccelX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, PosAccelY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, PosAccelZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotVelX, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotVelY, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputMotionData, RotVelZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputMotionData, 0x0028);
		}

		// struct FInputDigitalActionData
		TEST_METHOD(ScriptStruct__SteamCore__InputDigitalActionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputDigitalActionData, bState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputDigitalActionData, bActive, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputDigitalActionData, 0x0002);
		}

		// struct FInputAnalogActionData
		TEST_METHOD(ScriptStruct__SteamCore__InputAnalogActionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionData, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionData, UnknownData_E57F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionData, X, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionData, Y, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionData, bActive, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAnalogActionData, UnknownData_FXAT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAnalogActionData, 0x0010);
		}

		// struct FSteamItemInstanceID
		TEST_METHOD(ScriptStruct__SteamCore__SteamItemInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamItemInstanceID, UnknownData_OUKJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamItemInstanceID, 0x0008);
		}

		// struct FSteamItemDef
		TEST_METHOD(ScriptStruct__SteamCore__SteamItemDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamItemDef, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamItemDef, 0x0004);
		}

		// struct FSteamItemDetails
		TEST_METHOD(ScriptStruct__SteamCore__SteamItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamItemDetails, InstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamItemDetails, Definition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamItemDetails, Quantity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamItemDetails, Flags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamItemDetails, 0x0020);
		}

		// struct FSteamP2PSessionState
		TEST_METHOD(ScriptStruct__SteamCore__SteamP2PSessionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, bConnectionActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, bConnecting, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, P2PSessionError, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, bUsingRelay, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, BytesQueuedForSend, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, PacketsQueuedForSend, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, UnknownData_DE8S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, RemoteIP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, RemotePort, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamP2PSessionState, UnknownData_PPKR, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamP2PSessionState, 0x0028);
		}

		// struct FSteamNetworkPingLocation
		TEST_METHOD(ScriptStruct__SteamCore__SteamNetworkPingLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamNetworkPingLocation, Location, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamNetworkPingLocation, 0x0010);
		}

		// struct FSteamParentalSettingsChanged
		TEST_METHOD(ScriptStruct__SteamCore__SteamParentalSettingsChanged)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamParentalSettingsChanged, UnknownData_NAU7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamParentalSettingsChanged, 0x0001);
		}

		// struct FSteamPartyBeaconLocation
		TEST_METHOD(ScriptStruct__SteamCore__SteamPartyBeaconLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamPartyBeaconLocation, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamPartyBeaconLocation, UnknownData_WJDF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamPartyBeaconLocation, LocationId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamPartyBeaconLocation, 0x0018);
		}

		// struct FUGCFileWriteStreamHandle
		TEST_METHOD(ScriptStruct__SteamCore__UGCFileWriteStreamHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGCFileWriteStreamHandle, UnknownData_8S4Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUGCFileWriteStreamHandle, 0x0008);
		}

		// struct FSteamSessionSearchSetting
		TEST_METHOD(ScriptStruct__SteamCore__SteamSessionSearchSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamSessionSearchSetting, UnknownData_O1ZJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamSessionSearchSetting, 0x0020);
		}

		// struct FHostPingData
		TEST_METHOD(ScriptStruct__SteamCore__HostPingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHostPingData, HostString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHostPingData, 0x0010);
		}

		// struct FSteamInventoryUpdateHandle
		TEST_METHOD(ScriptStruct__SteamCore__SteamInventoryUpdateHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamInventoryUpdateHandle, UnknownData_8B2H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamInventoryUpdateHandle, 0x0008);
		}

		// struct FUGCUpdateHandle
		TEST_METHOD(ScriptStruct__SteamCore__UGCUpdateHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUGCUpdateHandle, UnknownData_4LWO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUGCUpdateHandle, 0x0008);
		}

		// struct FSteamUGCDetails
		TEST_METHOD(ScriptStruct__SteamCore__SteamUGCDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, PublishedFileID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Result, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, FileType, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, UnknownData_TKDD, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, CreatorAppID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, ConsumerAppID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, UnknownData_TBO0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, SteamIDOwner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, TimeCreated, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, TimeUpdated, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, TimeAddedToUserList, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Visibility, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, bBanned, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, bAcceptedForUse, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, bTagsTruncated, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Tags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, File, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, PreviewFile, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Filename, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, FileSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, PreviewFileSize, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, URL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, VotesUp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, VotesDown, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, Score, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamUGCDetails, NumChildren, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamUGCDetails, 0x00A8);
		}

		// struct FSteamLeaderboardEntry
		TEST_METHOD(ScriptStruct__SteamCore__SteamLeaderboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntry, SteamID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntry, GlobalRank, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntry, Score, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntry, Details, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntry, UnknownData_KIJF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamLeaderboardEntry, UGCHandle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamLeaderboardEntry, 0x0020);
		}

		// struct FMagicLeapAudioDummyStruct
		TEST_METHOD(ScriptStruct__MagicLeapAudio__MagicLeapAudioDummyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapAudioDummyStruct, UnknownData_0ANG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapAudioDummyStruct, 0x0001);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_KSHG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_BQS1, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_M14G, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_68O2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_EU9O, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_KDIO, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_RN6F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_JJ9Q, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_6KAO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_U5KO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_G9F4, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_K9EP, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_41RJ, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_CEXC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_QKJT, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_0PLS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_4ZLC, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_MDHV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_MFGW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_I9ZH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_TV2I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_GISF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_7XXH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_3P6N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFrameNumberRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, UnknownData_LEOK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRangeBound, 0x0008);
		}

		// struct FFrameNumberRange
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumberRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumberRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumberRange, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_MO15, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_KFN1, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_6L01, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_GBZ9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__CoreUObject__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_M2Y6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_A932, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00F0);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__CoreUObject__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_XAZJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_5SAC, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FLiveLinkSourceBufferManagementSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceBufferManagementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_KC8M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidEngineTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_INC3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_CBWE, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, DetectedFrameRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_C7VX, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_O1EN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_N9JV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, LatestOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_F76V, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceBufferManagementSettings, 0x0058);
		}

		// struct FLiveLinkCurveConversionSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveConversionSettings, CurveConversionAssetMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveConversionSettings, 0x0050);
		}

		// struct FLiveLinkSubjectName
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectName, 0x0008);
		}

		// struct FLiveLinkSourceHandle
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceHandle, UnknownData_E5KS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceHandle, 0x0018);
		}

		// struct FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseBlueprintData, UnknownData_J69R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseBlueprintData, 0x0008);
		}

		// struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectFrameHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectFrameHandle, UnknownData_S1H6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectFrameHandle, 0x0018);
		}

		// struct FLiveLinkTransform
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransform, UnknownData_Q2RT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransform, 0x0020);
		}

		// struct FCachedSubjectFrame
		TEST_METHOD(ScriptStruct__LiveLinkInterface__CachedSubjectFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSubjectFrame, UnknownData_EKPM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSubjectFrame, 0x0160);
		}

		// struct FSubjectMetadata
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneTimecode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneFramerate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, UnknownData_5WFU, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectMetadata, 0x0070);
		}

		// struct FLiveLinkWorldTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkWorldTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkWorldTime, 0x0010);
		}

		// struct FLiveLinkMetaData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, StringMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, SceneTime, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkMetaData, 0x0060);
		}

		// struct FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, MetaData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, PropertyValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, UnknownData_15AZ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseFrameData, 0x00A0);
		}

		// struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkAnimationFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkAnimationFrameData, Transforms, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkAnimationFrameData, 0x00B0);
		}

		// struct FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseStaticData, PropertyNames, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseStaticData, 0x0010);
		}

		// struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSkeletonStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneParents, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSkeletonStaticData, 0x0030);
		}

		// struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBasicBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, FrameData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBasicBlueprintData, 0x00B8);
		}

		// struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformStaticData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformStaticData, 0x0010);
		}

		// struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFieldOfViewSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsAspectRatioSupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocalLengthSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsProjectionModeSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsApertureSupported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocusDistanceSupported, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, UnknownData_2S2X, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraStaticData, 0x0020);
		}

		// struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformFrameData, Transform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformFrameData, 0x00D0);
		}

		// struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FieldOfView, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, AspectRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocalLength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, Aperture, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocusDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, ProjectionMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, UnknownData_LFTN, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraFrameData, 0x00F0);
		}

		// struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, UnknownData_DYGX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraBlueprintData, 0x0120);
		}

		// struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsTemperatureSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsIntensitySupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsLightColorSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsInnerConeAngleSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsOuterConeAngleSupported, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsAttenuationRadiusSupported, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceLenghtSupported, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceRadiusSupported, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, UnknownData_WC0M, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightStaticData, 0x0020);
		}

		// struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Temperature, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Intensity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, LightColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, InnerConeAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, OuterConeAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, AttenuationRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SoftSourceRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceLength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, UnknownData_5N2E, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightFrameData, 0x0100);
		}

		// struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, UnknownData_BPEE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightBlueprintData, 0x0130);
		}

		// struct FLiveLinkSubjectKey
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, Source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, SubjectName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectKey, 0x0018);
		}

		// struct FLiveLinkSubjectPreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Role, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, Settings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, VirtualSubject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, bEnabled, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_O4NX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectPreset, 0x0038);
		}

		// struct FLiveLinkSourcePreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourcePreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, Settings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, SourceType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourcePreset, 0x0030);
		}

		// struct FLiveLinkRefSkeleton
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkRefSkeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneParents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkRefSkeleton, 0x0020);
		}

		// struct FLiveLinkSubjectRepresentation
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectRepresentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, Role, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectRepresentation, 0x0010);
		}

		// struct FLiveLinkInterpolationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, bUseInterpolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, UnknownData_MFDH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, InterpolationOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkInterpolationSettings, 0x0008);
		}

		// struct FLiveLinkTimeSynchronizationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeSynchronizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeSynchronizationSettings, 0x000C);
		}

		// struct FLiveLinkSourceDebugInfo
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SubjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SnapshotIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceDebugInfo, 0x0010);
		}

		// struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, UnknownData_NSAZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, FrameData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformBlueprintData, 0x00F0);
		}

		// struct FLiveLinkCurveElement
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveElement, 0x000C);
		}

		// struct FLiveLinkFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, CurveElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, WorldTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, MetaData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameData, 0x0090);
		}

		// struct FLiveLinkFrameRate : public FFrameRate
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameRate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameRate, 0x0008);
		}

		// struct FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode_Base_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Seconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Frames, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, FrameRate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode_Base_DEPRECATED, 0x0010);
		}

		// struct FLiveLinkTimeCode : public FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode, 0x0010);
		}

		// struct FLiveLinkTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, SceneTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTime, 0x0018);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_CELX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_LK4O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_3HY4, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FSSettings_Quality
		TEST_METHOD(UserDefinedStruct__SSettings_Quality__SSettings_Quality)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, ResolutionScale_4_34A7E3CA4C817A0B325D49B7E59C785C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, PostProcessing_18_ECB8471E40C3F43694F6C59CAE134850, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, ViewDistance_7_2DF890BB42EC24C0FAB9A393599B34DF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, AntiAliasing_9_618174F24A48BB5BD741AEAD05A9559F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, Shadows_11_3D1AD2A1414C51CC3F71599068C9F2F5, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, Textures_13_E6F11CED4840275934CBB2A7898151CC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, Effects_15_A7872CCA4F9AC3DC54BA45A3D6673420, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, Foliages_17_0534EFA9439EB5C71A0D4A9C8B6F0AC6, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Quality, ShowMeExtremeHighSettings_21_A0B897C94636CEA024810F9F70B580E4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Quality, 0x0021);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_OE50, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_JUJ3, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FAudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0010);
		}

		// struct FCharacterStatsStruct : public FTableRowBase
		TEST_METHOD(ScriptStruct__RegainEarth_FS__CharacterStatsStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, CharacterClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, Gender, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, UnknownData_3VOE, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, Mesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, StaminaMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, StaminaReductionRate, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, StaminaRegenerationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, HealthMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, HealthRegenerationRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, WalkingSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, AimWalkingSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, CrouchSpeed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, RunningSpeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, SprintingSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, InventoryWeaponCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStatsStruct, GlobalAttackDamageMultiplier, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterStatsStruct, 0x0058);
		}

		// struct FWeaponPawnAnimations_struct : public FTableRowBase
		TEST_METHOD(ScriptStruct__RegainEarth_FS__WeaponPawnAnimations_struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, WeaponPawnAnimationGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, UnknownData_9X0B, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, AimWalkMovementBlendSpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, NonAimingMovementBlendSpace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, UnHolster, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, Holster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, Reload, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, ShootBlendSpace, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, AimOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, AimIn, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, AimOut, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, JumpStart, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, JumpInAirLoop, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponPawnAnimations_struct, JumpEndLanding, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponPawnAnimations_struct, 0x0070);
		}

		// struct FS_RadialScanSettings
		TEST_METHOD(UserDefinedStruct__S_RadialScanSettings__S_RadialScanSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, MaterialForLocalPlayer_26_1061BFB74DC3D2F4DE2721968E50470F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, MaterialForNotLocalPlayer_30_8B8B51BF46C34FE6AF4930B946BA21E0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, Speed_5_C18497744374F2BBC07DD69646D76F0C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, LifeTime_14_D0D37AF041017E7C8C58F3B87F3D041B, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, StartOffset_25_41695C1E456234C7314A0FA89B295C67, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, ParentSourcePosition_11_CA53805D4F80696AC178E29F90F3FAD3, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, ParentSourceDirection_13_6DB03B0A4CC3479BA1F52AAAB155DDF4, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, UnknownData_CN7Z, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, ParentVelocityScale_20_A7A288724FF1C95A1E5A608923928CDC, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, VelocityDrag_22_2CADEC3947618F6686A2FABA1CBD5652, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_RadialScanSettings, ExpansionCurve_17_EE8AE7414F1A3C701E75C5833374B43E, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_RadialScanSettings, 0x0030);
		}

		// struct FST_Meshes_References
		TEST_METHOD(UserDefinedStruct__ST_Meshes_References__ST_Meshes_References)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Meshes_References, Component_8_B9D743BA4C2BF0125FFDECA0BE1BB88C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Meshes_References, Materials_7_022DD1F94878E7BE9EE75296FB100D6D, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_Meshes_References, 0x0018);
		}

		// struct FSServerSettings
		TEST_METHOD(UserDefinedStruct__SServerSettings__SServerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, Servername_9_FDFD46C2491984947C3D43A2EB88CA82, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, GameInState_22_6EDFD717415990F21AED7EAB793594AD, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, UnknownData_Y45E, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, Map_13_BBA8532B4A543CB926CE8895E82803BD, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, IsEverybodyWelcome_14_C2A3B68F438B7710F6D313BAD8C703AC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, Difficulty_23_095D633E42A1AF299CC7869F667A85BE, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, GameMode_24_289D558A4DFD1286D980A2874A6090ED, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, IsPasswordProteced_19_A7A9541845B97B074D9A91AA52142837, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, UnknownData_0G8J, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSServerSettings, Password_21_F82BF0C843495538BCCA59808584C826, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSServerSettings, 0x0040);
		}

		// struct FS_ActionAndKeysBind
		TEST_METHOD(UserDefinedStruct__S_ActionAndKeysBind__S_ActionAndKeysBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ActionAndKeysBind, ActionText_15_3EACB8FD440D977C6329D59BECB383B1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ActionAndKeysBind, ActiveKeysFound_21_204EB0484056234BF399069897B4214F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ActionAndKeysBind, UnknownData_7DTL, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ActionAndKeysBind, KeyTextureStructArray_32_DF5475BF4D916EC7F57A118DD9E7C3F6, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ActionAndKeysBind, 0x0030);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_MHX6, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_GZCR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_KTMI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FSArtists
		TEST_METHOD(UserDefinedStruct__SArtists__SArtists)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSArtists, Name_2_D9BE06BA411D689720C59BA4C6681AC4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSArtists, Style_5_BDA7DB60481AF7ECFDAB3BB5145352EF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSArtists, 0x0098);
		}

		// struct FSRoles
		TEST_METHOD(UserDefinedStruct__SRoles__SRoles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSRoles, RoleName_3_E81587254AA139472867988DA7E7722C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSRoles, IsDisplayRoleName_16_DFC025804403152E23E4BDB8FEECD7D7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSRoles, UnknownData_YIPU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSRoles, Style_10_29309B2243289CD5C4B6AD84210F70FF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSRoles, ArtistsNames_14_0050875841EF216CF247C29D9A82BFA7, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSRoles, 0x00B0);
		}

		// struct FST_Randomization
		TEST_METHOD(UserDefinedStruct__ST_Randomization__ST_Randomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Randomization, UseRandomspawnnumber__1_2F87AA2842892447BD95728EBA0D3E30, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Randomization, UnknownData_WPDG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Randomization, SpawnMinimum_6_48152C62495D47ACF441A6822D3F5169, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FST_Randomization, SpawnMaximum_7_EA1E9BDA42AED29F881D4AA2ED6B3CE4, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FST_Randomization, 0x000C);
		}

		// struct FAimSettings
		TEST_METHOD(ScriptStruct__ARigRuntime__AimSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimSettings, AxisEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimSettings, bAimInvert, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimSettings, bUpInvert, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimSettings, UnknownData_E6ZU, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimSettings, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimSettings, 0x0010);
		}

		// struct FControllerShapeData
		TEST_METHOD(ScriptStruct__ARigRuntime__ControllerShapeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerShapeData, Shape, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerShapeData, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerShapeData, Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerShapeData, UnknownData_8I2U, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerShapeData, ShapeOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControllerShapeData, 0x0050);
		}

		// struct FAxisLimit
		TEST_METHOD(ScriptStruct__ARigRuntime__AxisLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisLimit, bLimit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisLimit, UnknownData_PX2E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisLimit, MinMax, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxisLimit, 0x000C);
		}

		// struct FVectorLimits
		TEST_METHOD(ScriptStruct__ARigRuntime__VectorLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorLimits, XLimit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorLimits, YLimit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorLimits, ZLimit, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorLimits, 0x0024);
		}

		// struct FControllerLimits
		TEST_METHOD(ScriptStruct__ARigRuntime__ControllerLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerLimits, TranslationLimits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerLimits, bLockRotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerLimits, UnknownData_SA4G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FControllerLimits, ScaleLimits, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FControllerLimits, 0x004C);
		}

		// struct FParentControllers
		TEST_METHOD(ScriptStruct__ARigRuntime__ParentControllers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParentControllers, ParentController, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParentControllers, ChildControllers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParentControllers, 0x0018);
		}

		// struct FARigRuntime_FCreateConstraint
		TEST_METHOD(ScriptStruct__ARigRuntime__CreateConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, ConstraintClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, ConstrainActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, Targets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, Weights, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, UpActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, bVisible, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, UnknownData_MHHY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCreateConstraint, Constraint, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCreateConstraint, 0x0048);
		}

		// struct FMorphController
		TEST_METHOD(ScriptStruct__ARigRuntime__MorphController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, UnknownData_JDPD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, Shape, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, Limits, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, UnknownData_HK3D, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, MorphTargets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, Controller, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMorphController, UnknownData_4LGO, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMorphController, 0x0100);
		}

		// struct FEyelidsSettings
		TEST_METHOD(ScriptStruct__ARigRuntime__EyelidsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, bEyelids, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, UnknownData_5O2Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, LeftUpperEyelid, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, RightUpperEyelid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, LeftLowerEyelid, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, RightLowerEyelid, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, UnknownData_WEQZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, EyelidsCtrlShape, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, EyelidsCtrlLimits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, EyelidsCtrlSize, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, EyelidsControllersPosition, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, UnknownData_Y5TP, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, Bones, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, Offsets, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyelidsSettings, Controllers, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyelidsSettings, 0x00C0);
		}

		// struct FEyesSettings
		TEST_METHOD(ScriptStruct__ARigRuntime__EyesSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, bEyes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, UnknownData_JA89, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, LeftEyeBone, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, RightEyeBone, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, UnknownData_RSGY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, AimCtrlShape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, AimCtrlLimits, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, UnknownData_HU8L, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, EyeCtrlShape, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, EyeCtrlLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, EyeCtrlSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, LeftColor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, RightColor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, AimSettings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, Offsets, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, Controllers, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyesSettings, UnknownData_0N5B, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyesSettings, 0x0170);
		}

		// struct FFaceSettings
		TEST_METHOD(ScriptStruct__ARigRuntime__FaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, bFace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, UnknownData_IT9X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, HeadBone, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, HeadControllerName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, UnknownData_T72N, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, FaceTableShape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, FaceTableOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, EyesSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, EyelidsSettings, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, MorphControllers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, MorphTargets, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, FaceTableCtrl, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFaceSettings, HeadController, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFaceSettings, 0x0300);
		}

		// struct FBonesTransforms
		TEST_METHOD(ScriptStruct__ARigRuntime__BonesTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBonesTransforms, Names, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBonesTransforms, Transforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBonesTransforms, 0x0020);
		}

		// struct FSplineIkData
		TEST_METHOD(ScriptStruct__ARigRuntime__SplineIkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, RootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, TipBone, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, ParentController, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, UnknownData_7U1N, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, Shape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, MidParent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, MidLerp, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, Curvature, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, bSolveEnds, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, bFkMode, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, bRootOrientation, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, UnknownData_IFVQ, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, Limits, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, UnknownData_7G4G, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, BonesToSolve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, Controllers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, ControllerGroups, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, ParentCtrlActor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, Offsets, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, BonesOffsets, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, AimSettings, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, SplineLength, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, UnknownData_QVA5, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, Spline, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIkData, UnknownData_NQQZ, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIkData, 0x0150);
		}

		// struct FCustomControllerData
		TEST_METHOD(ScriptStruct__ARigRuntime__CustomControllerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, ParentController, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, bUpdate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, bWorldOrientation, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, UnknownData_K13A, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, Shape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, Limits, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, UnknownData_IJNI, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, Controller, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, ControllerGrp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, ControllerOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomControllerData, UnknownData_GTK3, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomControllerData, 0x00E0);
		}

		// struct FFkHierarchyData
		TEST_METHOD(ScriptStruct__ARigRuntime__FkHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, HierarchyDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, TipBone, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, ParentController, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, UnknownData_S5UA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, Shape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, bFollowParentProperty, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, UnknownData_4PYZ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, Limits, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, Controllers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, ControllerGroups, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, BonesToSolve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, FollowOffsets, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkHierarchyData, FollowControllers, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFkHierarchyData, 0x0110);
		}

		// struct FTwoBoneIkData
		TEST_METHOD(ScriptStruct__ARigRuntime__TwoBoneIkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, bArm, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, UnknownData_KKH3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, TipBone, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, ParentController, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, bAimIkToMiddleFinger, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, UnknownData_F01V, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, MiddleFinger, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, bPoleVectorSimple, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, UnknownData_Z66N, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, IkShape, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, IkLimits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, UnknownData_YFTJ, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, PvShape, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, PvLimits, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, Color, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, Size, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, PvPosMult, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, bAttachPvToIk, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, UnknownData_EL9P, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, LocalBones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, BoneOffsets, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, BoneLengths, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, AimSettings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, Controllers, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, ControllerGroups, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, BonesToSolve, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, IkOffset, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoBoneIkData, SecondIkPos, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoBoneIkData, 0x01C0);
		}

		// struct FFingersData
		TEST_METHOD(ScriptStruct__ARigRuntime__FingersData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, HandBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, FingersTipBones, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, PhalanxNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, bParentToMiddleFinger, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, UnknownData_5FYD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, Limits, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, FingersHierarchy, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFingersData, FingersGrp, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFingersData, 0x0088);
		}

		// struct FTwistBonesData
		TEST_METHOD(ScriptStruct__ARigRuntime__TwistBonesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, TwistBones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, bCreateControllers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, UnknownData_TM8F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, Shape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, Limits, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, AimSettings, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, UnknownData_84CR, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, BonesOffsets, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, Controllers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, ControllerGroups, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, LowBoneOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, Bold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistBonesData, UnknownData_XJXM, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistBonesData, 0x0140);
		}

		// struct FFootControllersData
		TEST_METHOD(ScriptStruct__ARigRuntime__FootControllersData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootControllersData, ToeSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootControllersData, HeelSocket, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootControllersData, Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootControllersData, Limits, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootControllersData, ToeOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootControllersData, Controllers, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFootControllersData, 0x00A0);
		}

		// struct FFkIkData
		TEST_METHOD(ScriptStruct__ARigRuntime__FkIkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bArm, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bThreeBoneIk, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bPoleVectorSimple, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_YC2L, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, TipBone, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, ParentController, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bAimIkToMiddleFinger, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_4GZ4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, MiddleFinger, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FkShape, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FkLimits, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FkSize, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FkColor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, IkShape, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, IkLimits, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_D4DT, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, PvShape, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, PvLimits, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, IkSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, PvPosMult, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bAttachPvToIk, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_Y4PL, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, IkColor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, Fk, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, Ik, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FkIkController, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bFingers, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_0MS5, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FingersData, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, bFootControllers, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_V5XS, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FootControllersData, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, FirstTwistBones, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, SecondTwistBones, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, ThirdTwistBones, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, Bold, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFkIkData, UnknownData_7DGX, 0x0921);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFkIkData, 0x0930);
		}

		// struct FModularRigData
		TEST_METHOD(ScriptStruct__ARigRuntime__ModularRigData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, MainShape, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, MainLimits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, UnknownData_UJDG, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, CustomControllers, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, SplineIkRigs, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, FkHierarchyRigs, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, FkIkRigs, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, bZeroRoot, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, bUpdateFromSource, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, UnknownData_8GMI, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, Transform, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, Main, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularRigData, UnknownData_61AF, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularRigData, 0x0130);
		}

		// struct FAnimNode_SetBonesTransforms : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__ARigRuntime__AnimNode_SetBonesTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, BonesTransforms, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, TranslationMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, RotationMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, ScaleMode, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, TranslationSpace, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, RotationSpace, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, ScaleSpace, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, UnknownData_EZUH, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, BlendWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBonesTransforms, UnknownData_UW8L, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SetBonesTransforms, 0x0050);
		}

		// struct FAnimNode_SetBoneTransform : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__ARigRuntime__AnimNode_SetBoneTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, BoneName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, Scale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, bLocation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, bRotation, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, bScale, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, UnknownData_GBOT, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, BlendWeight, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SetBoneTransform, UnknownData_SDR1, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SetBoneTransform, 0x0058);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_ZV3J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_7Y3N, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_JPZ3, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_FN2U, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_V1BA, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FRadialBoxSettings
		TEST_METHOD(ScriptStruct__UMG__RadialBoxSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, bDistributeItemsEvenly, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, UnknownData_W0OZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, AngleBetweenItems, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialBoxSettings, StartingAngle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialBoxSettings, 0x000C);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_068Q, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_5XFA, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_D4A6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_A8O9, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_9WBZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_OYPU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_N5X5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_9H1Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_6STS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_SDO7, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02C0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0278);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_ZTYZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00C8);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_TW8Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_4GR6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_UI0G, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_Z083, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_2LVF, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_Y4EX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_7DKT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_AQP1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_95YI, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FS_ID_Name
		TEST_METHOD(UserDefinedStruct__S_ID_Name__S_ID_Name)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ID_Name, ID_4_28E46DB740DC005CD9C023A49DEE37C9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_ID_Name, Name_5_8328D0F74CF4C3A181782D9BB04D3C88, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_ID_Name, 0x0020);
		}

		// struct FSGroups
		TEST_METHOD(UserDefinedStruct__SGroups__SGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGroups, Group_2_6088E1DA40CD1B80951507A69E2FDC01, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGroups, Image_19_85100B584E952C98A3C315A278E48009, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGroups, Style_16_8CB644AD4113039F5DA00F83AD21F4B8, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSGroups, Roles_6_0ADB11A344EE920C79BEC9AF406DC3E3, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSGroups, 0x0148);
		}

		// struct FSSettings_Controls
		TEST_METHOD(UserDefinedStruct__SSettings_Controls__SSettings_Controls)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, LookSensitiveMouse_14_18AE42DE4206AC739043D1A1E26888D9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, InverseMouseY_7_58D9C6D5493F7BE0389295B1D2224F3F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, UnknownData_6WCI, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, DefaultGamepad_13_FCD1720B4A5AD6AF6940D6B04C60C135, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, LookAxisSensitiveGamePad_17_672C93DC430B7CD1C97CEEA9808F74A4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, InverseGamePadY_19_B9FF31FA42810F90E9C0968FDE43B7DE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, UnknownData_AZ52, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSSettings_Controls, DefaultControls_25_1109CAD24BF89CD3665FEBBB69ADD604, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSSettings_Controls, 0x0018);
		}

		// struct FSNotification
		TEST_METHOD(UserDefinedStruct__SNotification__SNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotification, Title_2_FBBC368E4C9D3F65C70EE08BC406E990, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotification, Body_4_87E5BE6241D0FB8289D78CA7DCA018B1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotification, Color_15_A4A74B5C4D8AC19D8BD52CB95C7A467C, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSNotification, 0x0040);
		}

		// struct FSInputKeys_RelatedInputKeys
		TEST_METHOD(UserDefinedStruct__SInputKeys_RelatedInputKeys__SInputKeys_RelatedInputKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, InputName_20_4960B7354F7E1300B8C4BA9FF309AC3B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, UnknownData_BSCJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, GamePadKey_8_EF5D8B6A494D6113199867A74E6C3E6D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, KeyboardKey1_21_E1458644416E89D54213F2B774157D66, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, KeyboardKey2_24_FC2604A84A5CBAF204BED08CA0F459AF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, IsAxis_12_275126D94C00DC7801C9F88CC472F7F9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, UnknownData_1ZMJ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSInputKeys_RelatedInputKeys, AxisScale_19_5BA9C9C1423040FC9F0271A978D856D2, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSInputKeys_RelatedInputKeys, 0x0058);
		}

		// struct FSteamCoreJson
		TEST_METHOD(ScriptStruct__SteamCoreWeb__SteamCoreJson)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamCoreJson, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamCoreJson, String, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamCoreJson, Number, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamCoreJson, Bool, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamCoreJson, Type, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSteamCoreJson, UnknownData_JAE6, 0x0026);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSteamCoreJson, 0x0028);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSessionPayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, ConfigFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, UnknownData_JWCD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultMeshMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionPayload, DefaultWireframeMeshMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionPayload, 0x0018);
		}

		// struct FARPlaneUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPlaneUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_4PM0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Center, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, Extents, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, BoundaryVertices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, ObjectClassification, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPlaneUpdatePayload, UnknownData_SBQY, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPlaneUpdatePayload, 0x0080);
		}

		// struct FARPointUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPointUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPointUpdatePayload, UnknownData_SBG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPointUpdatePayload, 0x0001);
		}

		// struct FARFaceUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARFaceUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LeftEyePosition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, RightEyePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, LookAtTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFaceUpdatePayload, UnknownData_6HHW, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFaceUpdatePayload, 0x0040);
		}

		// struct FARImageUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARImageUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, UnknownData_PN7B, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, DetectedImage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARImageUpdatePayload, EstimatedSize, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARImageUpdatePayload, 0x0060);
		}

		// struct FARQRCodeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARQRCodeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_IHJQ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, Extents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, UnknownData_HU0W, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARQRCodeUpdatePayload, QRCode, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARQRCodeUpdatePayload, 0x0070);
		}

		// struct FARPoseUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPoseUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, WorldTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPoseUpdatePayload, JointTransforms, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPoseUpdatePayload, 0x0040);
		}

		// struct FAREnvironmentProbeUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__AREnvironmentProbeUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAREnvironmentProbeUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAREnvironmentProbeUpdatePayload, 0x0030);
		}

		// struct FARObjectUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARObjectUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARObjectUpdatePayload, WorldTransform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARObjectUpdatePayload, 0x0030);
		}

		// struct FARMeshUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARMeshUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_OFYJ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, ObjectClassification, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARMeshUpdatePayload, UnknownData_XZHJ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARMeshUpdatePayload, 0x0060);
		}

		// struct FARGeoAnchorUpdatePayload
		TEST_METHOD(ScriptStruct__AugmentedReality__ARGeoAnchorUpdatePayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, SessionPayload, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_BWMB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, WorldTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Longitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, Latitude, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeMeters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AltitudeSource, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, UnknownData_G5IO, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARGeoAnchorUpdatePayload, AnchorName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARGeoAnchorUpdatePayload, 0x0070);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_NFIZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_WFLM, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FTrackedGeometryGroup
		TEST_METHOD(ScriptStruct__AugmentedReality__TrackedGeometryGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, ARComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedGeometryGroup, TrackedGeometry, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedGeometryGroup, 0x0018);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_6F1D, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_YWI2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARCameraIntrinsics
		TEST_METHOD(ScriptStruct__AugmentedReality__ARCameraIntrinsics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, ImageResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, FocalLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARCameraIntrinsics, PrincipalPoint, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARCameraIntrinsics, 0x0018);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_UWAI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_X2WZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_C5SI, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackEvaluationFieldEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationFieldEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Range, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, ForcedTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, Flags, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, UnknownData_U00F, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationFieldEntry, LegacySortOrder, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationFieldEntry, 0x0020);
		}

		// struct FMovieSceneTrackEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvaluationField, Entries, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvaluationField, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_NC07, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_WBTW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_G06J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_D0AS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_2FC4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_9NSE, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_1F34, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x00E8);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_N1J3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_RU3D, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_GN19, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_MGD1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_UZS1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_IMEQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_I7AU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSubSequenceTreeEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTreeEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTreeEntry, UnknownData_XJYH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTreeEntry, 0x0008);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_445B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneSequencePlaybackParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Frame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_LWD4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, MarkedFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, PositionType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UpdateMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackParams, UnknownData_F4WC, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackParams, 0x0028);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_QE0V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_NA4F, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_54BV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_5VTH, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackInstanceEntry
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, BoundObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceEntry, TrackInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceEntry, 0x0010);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_PLC8, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_LFNG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_B61P, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_XPMD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_EOBD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_STZS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneSubSequenceTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceTree, UnknownData_JQQ0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceTree, 0x0060);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_HFA3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneEvaluationFieldEntityTree
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityTree, UnknownData_J00T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityTree, 0x0060);
		}

		// struct FMovieSceneEvaluationFieldEntityKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityKey, EntityID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityKey, 0x000C);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x0008);
		}

		// struct FMovieSceneSequenceCompilerMaskStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCompilerMaskStruct)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCompilerMaskStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneFieldEntry_EvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_EvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, TrackPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, NumChildren, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_EvaluationTrack, UnknownData_EY1E, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_EvaluationTrack, 0x000C);
		}

		// struct FMovieSceneFieldEntry_ChildTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFieldEntry_ChildTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ChildIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, Flags, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, UnknownData_2K0H, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFieldEntry_ChildTemplate, ForcedTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFieldEntry_ChildTemplate, 0x0008);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, TrackLUT, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SectionLUT, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0030);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneEntitySystemGraphNodes
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNodes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNodes, UnknownData_Q90U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNodes, 0x0038);
		}

		// struct FMovieSceneEntitySystemGraph
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_393W, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, Nodes, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraph, UnknownData_XX0F, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraph, 0x0138);
		}

		// struct FMovieSceneTrackInstanceInput
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceInput, UnknownData_ETKK, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceInput, 0x0010);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_Q90K, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_AXCJ, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_Q0GS, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_S43J, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_HCV6, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_9LO2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0018);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0038);
		}

		// struct FTrackInstanceInputComponent
		TEST_METHOD(ScriptStruct__MovieScene__TrackInstanceInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, OutputIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackInstanceInputComponent, UnknownData_HR2O, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackInstanceInputComponent, 0x0010);
		}

		// struct FMovieSceneTrackInstanceComponent
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackInstanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackInstanceComponent, TrackInstanceClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackInstanceComponent, 0x0010);
		}

		// struct FEasingComponentData
		TEST_METHOD(ScriptStruct__MovieScene__EasingComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEasingComponentData, Section, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEasingComponentData, 0x0008);
		}

		// struct FMovieScenePropertyBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, bCanUseClassLookup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertyBinding, UnknownData_GZQ2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertyBinding, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_6N1M, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_NR3G, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEntitySystemGraphNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntitySystemGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, UnknownData_KYYH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntitySystemGraphNode, System, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntitySystemGraphNode, 0x0028);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_A698, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_M5PU, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_308J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_QMVL, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_JTGP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_CB3W, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bEvaluateTracksWhenNotSpawned, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_1PZ7, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_7AGU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_UUL2, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_REDS, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneEvaluationFieldEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, ForcedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_OM0G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntityMetaData, UnknownData_L7LY, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntityMetaData, 0x000C);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_8NJA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_MYDL, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_V8HV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_K4SK, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0078);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_ZRIN, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_3Y2Y, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0160);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_ZJID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_B61C, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, bHasHierarchicalEasing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_MD5E, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_0TDA, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneEvaluationFieldEntity
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldEntity, SharedMetaDataIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldEntity, 0x0010);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, RootNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Tree, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x0118);
		}

		// struct FMovieSceneEvaluationFieldSharedEntityMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSharedEntityMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSharedEntityMetaData, 0x0010);
		}

		// struct FMovieSceneEntityComponentField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEntityComponentField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, PersistentEntityTree, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, OneShotEntityTree, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, Entities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, EntityMetaData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEntityComponentField, SharedMetaData, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEntityComponentField, 0x00F0);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_OLR2, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_4X5N, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_ORYT, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_G6LR, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_P97J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FSYarminSymbols
		TEST_METHOD(UserDefinedStruct__SYarminSymbols__SYarminSymbols)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSYarminSymbols, Value_4_D5D0C6CF4FC7E805B0AFD798945AC4BA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSYarminSymbols, 0x0010);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_CN6J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_HJBO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_SS50, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_TDVB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_TJB3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_XUJ6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_BRL5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_8F1B, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_ZJID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_1DIL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_IF0J, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_X4G2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_I6JH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_A44T, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_OQ3F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_567D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_92DW, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_KFLF, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_X9O5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_G1QT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_45RX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_WUPR, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_MS0J, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_ITTZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FLocalizedIconInfo
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconModelPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconPortalPath, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfo, 0x0030);
		}

		// struct FLocalizedIconInfos
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfos, IconData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfos, 0x0010);
		}

		// struct FLuminComponentSubElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentSubElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, ElementType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, UnknownData_FBQX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentSubElement, 0x0018);
		}

		// struct FLocalizedAppName
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedAppName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, AppName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAppName, 0x0020);
		}

		// struct FLuminComponentElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, VisibleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExecutableName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ComponentType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, UnknownData_IHNM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExtraComponentSubElements, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentElement, 0x0048);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileShadowQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_S77O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_WU8Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_4QMM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_L3SE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_GDLR, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSNotificationTemplates
		TEST_METHOD(UserDefinedStruct__SNotificationTemplates__SNotificationTemplates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotificationTemplates, Type_2_F9DCCCDB4DA3195D1009A3B4CCAA026A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotificationTemplates, UnknownData_SDXA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotificationTemplates, Color_5_47497116417C9372625E669D9FE0BAE3, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSNotificationTemplates, 0x0014);
		}

		// struct FSNotificationSender
		TEST_METHOD(UserDefinedStruct__SNotificationSender__SNotificationSender)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotificationSender, Title_2_FBBC368E4C9D3F65C70EE08BC406E990, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotificationSender, Body_4_87E5BE6241D0FB8289D78CA7DCA018B1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSNotificationSender, Type_17_A4A74B5C4D8AC19D8BD52CB95C7A467C, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSNotificationSender, 0x0031);
		}

		// struct FMagicLeapImageTargetState
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTargetState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, TrackingStatus, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, UnknownData_AFNR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetState, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTargetState, 0x001C);
		}

		// struct FMagicLeapImageTargetSettings
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTargetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, ImageTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, LongerDimension, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, bIsStationary, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, BIsEnabled, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTargetSettings, UnknownData_BX9C, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTargetSettings, 0x0020);
		}
	};
}
